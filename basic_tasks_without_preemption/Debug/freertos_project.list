
freertos_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005be4  08005be4  00015be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c8c  08005c8c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005c8c  08005c8c  00015c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c94  08005c94  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c94  08005c94  00015c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c98  08005c98  00015c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e98  20000014  08005cb0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012eac  08005cb0  00022eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015afb  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e15  00000000  00000000  00035b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  00038958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  00039ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002867f  00000000  00000000  0003aed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016415  00000000  00000000  0006354f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcae8  00000000  00000000  00079964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017644c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050c4  00000000  00000000  0017649c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005bcc 	.word	0x08005bcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08005bcc 	.word	0x08005bcc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fab3 	bl	8000a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f847 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f8c7 	bl	8000674 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e6:	f000 f895 	bl	8000614 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1\r\n", 2, &task1_handle);
 80004ea:	f107 0308 	add.w	r3, r7, #8
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	2302      	movs	r3, #2
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <main+0x84>)
 80004f6:	22c8      	movs	r2, #200	; 0xc8
 80004f8:	4918      	ldr	r1, [pc, #96]	; (800055c <main+0x88>)
 80004fa:	4819      	ldr	r0, [pc, #100]	; (8000560 <main+0x8c>)
 80004fc:	f003 fdc2 	bl	8004084 <xTaskCreate>
 8000500:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d00a      	beq.n	800051e <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800050c:	f383 8811 	msr	BASEPRI, r3
 8000510:	f3bf 8f6f 	isb	sy
 8000514:	f3bf 8f4f 	dsb	sy
 8000518:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800051a:	bf00      	nop
 800051c:	e7fe      	b.n	800051c <main+0x48>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2\r\n", 2, &task2_handle);
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2302      	movs	r3, #2
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <main+0x90>)
 8000528:	22c8      	movs	r2, #200	; 0xc8
 800052a:	490f      	ldr	r1, [pc, #60]	; (8000568 <main+0x94>)
 800052c:	480f      	ldr	r0, [pc, #60]	; (800056c <main+0x98>)
 800052e:	f003 fda9 	bl	8004084 <xTaskCreate>
 8000532:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d00a      	beq.n	8000550 <main+0x7c>
        __asm volatile
 800053a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800053e:	f383 8811 	msr	BASEPRI, r3
 8000542:	f3bf 8f6f 	isb	sy
 8000546:	f3bf 8f4f 	dsb	sy
 800054a:	60fb      	str	r3, [r7, #12]
    }
 800054c:	bf00      	nop
 800054e:	e7fe      	b.n	800054e <main+0x7a>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000550:	f003 fed0 	bl	80042f4 <vTaskStartScheduler>
  //insufficient memory in heap
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000554:	e7fe      	b.n	8000554 <main+0x80>
 8000556:	bf00      	nop
 8000558:	08005be4 	.word	0x08005be4
 800055c:	08005c00 	.word	0x08005c00
 8000560:	08000741 	.word	0x08000741
 8000564:	08005c08 	.word	0x08005c08
 8000568:	08005c24 	.word	0x08005c24
 800056c:	08000755 	.word	0x08000755

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b096      	sub	sp, #88	; 0x58
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2244      	movs	r2, #68	; 0x44
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f005 fb1c 	bl	8005bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	463b      	mov	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000592:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000596:	f000 fd47 	bl	8001028 <HAL_PWREx_ControlVoltageScaling>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a0:	f000 f8f4 	bl	800078c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a4:	2302      	movs	r3, #2
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ae:	2310      	movs	r3, #16
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b6:	2302      	movs	r3, #2
 80005b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ba:	2301      	movs	r3, #1
 80005bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005be:	230a      	movs	r3, #10
 80005c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005c2:	2307      	movs	r3, #7
 80005c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 fd7e 	bl	80010d4 <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005de:	f000 f8d5 	bl	800078c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2303      	movs	r3, #3
 80005e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	2104      	movs	r1, #4
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 f946 	bl	800188c <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000606:	f000 f8c1 	bl	800078c <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3758      	adds	r7, #88	; 0x58
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_USART2_UART_Init+0x58>)
 800061a:	4a15      	ldr	r2, [pc, #84]	; (8000670 <MX_USART2_UART_Init+0x5c>)
 800061c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061e:	4b13      	ldr	r3, [pc, #76]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_USART2_UART_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_USART2_UART_Init+0x58>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_USART2_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000658:	f002 fafc 	bl	8002c54 <HAL_UART_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000662:	f000 f893 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000030 	.word	0x20000030
 8000670:	40004400 	.word	0x40004400

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a2a      	ldr	r2, [pc, #168]	; (8000738 <MX_GPIO_Init+0xc4>)
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b28      	ldr	r3, [pc, #160]	; (8000738 <MX_GPIO_Init+0xc4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0304 	and.w	r3, r3, #4
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a2:	4b25      	ldr	r3, [pc, #148]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	4a24      	ldr	r2, [pc, #144]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ae:	4b22      	ldr	r3, [pc, #136]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4a1e      	ldr	r2, [pc, #120]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	4a18      	ldr	r2, [pc, #96]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2120      	movs	r1, #32
 80006ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f2:	f000 fc73 	bl	8000fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	480b      	ldr	r0, [pc, #44]	; (800073c <MX_GPIO_Init+0xc8>)
 800070e:	f000 fabb 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000712:	2320      	movs	r3, #32
 8000714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072c:	f000 faac 	bl	8000c88 <HAL_GPIO_Init>

}
 8000730:	bf00      	nop
 8000732:	3728      	adds	r7, #40	; 0x28
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40021000 	.word	0x40021000
 800073c:	48000800 	.word	0x48000800

08000740 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	//char msg[100];

	while(1)
	{
        int test1=0;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
        test1++;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3301      	adds	r3, #1
 8000750:	60fb      	str	r3, [r7, #12]
	{
 8000752:	e7f9      	b.n	8000748 <task1_handler+0x8>

08000754 <task2_handler>:
		//taskYIELD();
	}
}

static void task2_handler(void* parameters)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	//char msg[100];
	while(1)
	{
        int test2=0;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
        test2++;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3301      	adds	r3, #1
 8000764:	60fb      	str	r3, [r7, #12]
	{
 8000766:	e7f9      	b.n	800075c <task2_handler+0x8>

08000768 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d101      	bne.n	800077e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800077a:	f000 f983 	bl	8000a84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40001000 	.word	0x40001000

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000794:	e7fe      	b.n	8000794 <Error_Handler+0x8>
	...

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <HAL_MspInit+0x44>)
 80007a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007a2:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <HAL_MspInit+0x44>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6613      	str	r3, [r2, #96]	; 0x60
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <HAL_MspInit+0x44>)
 80007ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <HAL_MspInit+0x44>)
 80007b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <HAL_MspInit+0x44>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c0:	6593      	str	r3, [r2, #88]	; 0x58
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_MspInit+0x44>)
 80007c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000

080007e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b0ac      	sub	sp, #176	; 0xb0
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2288      	movs	r2, #136	; 0x88
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f005 f9db 	bl	8005bbc <memset>
  if(huart->Instance==USART2)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a21      	ldr	r2, [pc, #132]	; (8000890 <HAL_UART_MspInit+0xb0>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d13b      	bne.n	8000888 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000810:	2302      	movs	r3, #2
 8000812:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000814:	2300      	movs	r3, #0
 8000816:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4618      	mov	r0, r3
 800081e:	f001 fa8b 	bl	8001d38 <HAL_RCCEx_PeriphCLKConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000828:	f7ff ffb0 	bl	800078c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <HAL_UART_MspInit+0xb4>)
 800082e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000830:	4a18      	ldr	r2, [pc, #96]	; (8000894 <HAL_UART_MspInit+0xb4>)
 8000832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000836:	6593      	str	r3, [r2, #88]	; 0x58
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <HAL_UART_MspInit+0xb4>)
 800083a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <HAL_UART_MspInit+0xb4>)
 8000846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000848:	4a12      	ldr	r2, [pc, #72]	; (8000894 <HAL_UART_MspInit+0xb4>)
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <HAL_UART_MspInit+0xb4>)
 8000852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800085c:	230c      	movs	r3, #12
 800085e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000874:	2307      	movs	r3, #7
 8000876:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800087e:	4619      	mov	r1, r3
 8000880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000884:	f000 fa00 	bl	8000c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000888:	bf00      	nop
 800088a:	37b0      	adds	r7, #176	; 0xb0
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40004400 	.word	0x40004400
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08e      	sub	sp, #56	; 0x38
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008a0:	2300      	movs	r3, #0
 80008a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008a6:	4b34      	ldr	r3, [pc, #208]	; (8000978 <HAL_InitTick+0xe0>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008aa:	4a33      	ldr	r2, [pc, #204]	; (8000978 <HAL_InitTick+0xe0>)
 80008ac:	f043 0310 	orr.w	r3, r3, #16
 80008b0:	6593      	str	r3, [r2, #88]	; 0x58
 80008b2:	4b31      	ldr	r3, [pc, #196]	; (8000978 <HAL_InitTick+0xe0>)
 80008b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b6:	f003 0310 	and.w	r3, r3, #16
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008be:	f107 0210 	add.w	r2, r7, #16
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4611      	mov	r1, r2
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 f9a3 	bl	8001c14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008ce:	6a3b      	ldr	r3, [r7, #32]
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d103      	bne.n	80008e0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008d8:	f001 f970 	bl	8001bbc <HAL_RCC_GetPCLK1Freq>
 80008dc:	6378      	str	r0, [r7, #52]	; 0x34
 80008de:	e004      	b.n	80008ea <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008e0:	f001 f96c 	bl	8001bbc <HAL_RCC_GetPCLK1Freq>
 80008e4:	4603      	mov	r3, r0
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ec:	4a23      	ldr	r2, [pc, #140]	; (800097c <HAL_InitTick+0xe4>)
 80008ee:	fba2 2303 	umull	r2, r3, r2, r3
 80008f2:	0c9b      	lsrs	r3, r3, #18
 80008f4:	3b01      	subs	r3, #1
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008f8:	4b21      	ldr	r3, [pc, #132]	; (8000980 <HAL_InitTick+0xe8>)
 80008fa:	4a22      	ldr	r2, [pc, #136]	; (8000984 <HAL_InitTick+0xec>)
 80008fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <HAL_InitTick+0xe8>)
 8000900:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000904:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000906:	4a1e      	ldr	r2, [pc, #120]	; (8000980 <HAL_InitTick+0xe8>)
 8000908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800090c:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <HAL_InitTick+0xe8>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <HAL_InitTick+0xe8>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <HAL_InitTick+0xe8>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800091e:	4818      	ldr	r0, [pc, #96]	; (8000980 <HAL_InitTick+0xe8>)
 8000920:	f001 fec6 	bl	80026b0 <HAL_TIM_Base_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800092a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800092e:	2b00      	cmp	r3, #0
 8000930:	d11b      	bne.n	800096a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000932:	4813      	ldr	r0, [pc, #76]	; (8000980 <HAL_InitTick+0xe8>)
 8000934:	f001 ff1e 	bl	8002774 <HAL_TIM_Base_Start_IT>
 8000938:	4603      	mov	r3, r0
 800093a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800093e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000942:	2b00      	cmp	r3, #0
 8000944:	d111      	bne.n	800096a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000946:	2036      	movs	r0, #54	; 0x36
 8000948:	f000 f990 	bl	8000c6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b0f      	cmp	r3, #15
 8000950:	d808      	bhi.n	8000964 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000952:	2200      	movs	r2, #0
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	2036      	movs	r0, #54	; 0x36
 8000958:	f000 f96c 	bl	8000c34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800095c:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <HAL_InitTick+0xf0>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6013      	str	r3, [r2, #0]
 8000962:	e002      	b.n	800096a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000964:	2301      	movs	r3, #1
 8000966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800096a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800096e:	4618      	mov	r0, r3
 8000970:	3738      	adds	r7, #56	; 0x38
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000
 800097c:	431bde83 	.word	0x431bde83
 8000980:	200000b4 	.word	0x200000b4
 8000984:	40001000 	.word	0x40001000
 8000988:	20000004 	.word	0x20000004

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <NMI_Handler+0x4>

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <MemManage_Handler+0x4>

0800099e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <UsageFault_Handler+0x4>

080009aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <TIM6_DAC_IRQHandler+0x10>)
 80009be:	f001 ff49 	bl	8002854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200000b4 	.word	0x200000b4

080009cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <SystemInit+0x20>)
 80009d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <SystemInit+0x20>)
 80009d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009f4:	f7ff ffea 	bl	80009cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f8:	480c      	ldr	r0, [pc, #48]	; (8000a2c <LoopForever+0x6>)
  ldr r1, =_edata
 80009fa:	490d      	ldr	r1, [pc, #52]	; (8000a30 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009fc:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <LoopForever+0xe>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a10:	4c0a      	ldr	r4, [pc, #40]	; (8000a3c <LoopForever+0x16>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f005 f89b 	bl	8005b58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a22:	f7ff fd57 	bl	80004d4 <main>

08000a26 <LoopForever>:

LoopForever:
    b LoopForever
 8000a26:	e7fe      	b.n	8000a26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a34:	08005c9c 	.word	0x08005c9c
  ldr r2, =_sbss
 8000a38:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a3c:	20012eac 	.word	0x20012eac

08000a40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC1_2_IRQHandler>
	...

08000a44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <HAL_Init+0x3c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <HAL_Init+0x3c>)
 8000a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a58:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5a:	2003      	movs	r0, #3
 8000a5c:	f000 f8df 	bl	8000c1e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a60:	200f      	movs	r0, #15
 8000a62:	f7ff ff19 	bl	8000898 <HAL_InitTick>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d002      	beq.n	8000a72 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	71fb      	strb	r3, [r7, #7]
 8000a70:	e001      	b.n	8000a76 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a72:	f7ff fe91 	bl	8000798 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a76:	79fb      	ldrb	r3, [r7, #7]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40022000 	.word	0x40022000

08000a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x20>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_IncTick+0x24>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_IncTick+0x24>)
 8000a96:	6013      	str	r3, [r2, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000100 	.word	0x20000100

08000aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_GetTick+0x14>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000100 	.word	0x20000100

08000ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af6:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	60d3      	str	r3, [r2, #12]
}
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <__NVIC_GetPriorityGrouping+0x18>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	0a1b      	lsrs	r3, r3, #8
 8000b16:	f003 0307 	and.w	r3, r3, #7
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db0b      	blt.n	8000b52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	f003 021f 	and.w	r2, r3, #31
 8000b40:	4907      	ldr	r1, [pc, #28]	; (8000b60 <__NVIC_EnableIRQ+0x38>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	095b      	lsrs	r3, r3, #5
 8000b48:	2001      	movs	r0, #1
 8000b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000e100 	.word	0xe000e100

08000b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db0a      	blt.n	8000b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	490c      	ldr	r1, [pc, #48]	; (8000bb0 <__NVIC_SetPriority+0x4c>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	0112      	lsls	r2, r2, #4
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	440b      	add	r3, r1
 8000b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b8c:	e00a      	b.n	8000ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4908      	ldr	r1, [pc, #32]	; (8000bb4 <__NVIC_SetPriority+0x50>)
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	f003 030f 	and.w	r3, r3, #15
 8000b9a:	3b04      	subs	r3, #4
 8000b9c:	0112      	lsls	r2, r2, #4
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	761a      	strb	r2, [r3, #24]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000e100 	.word	0xe000e100
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b089      	sub	sp, #36	; 0x24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	f1c3 0307 	rsb	r3, r3, #7
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	bf28      	it	cs
 8000bd6:	2304      	movcs	r3, #4
 8000bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	2b06      	cmp	r3, #6
 8000be0:	d902      	bls.n	8000be8 <NVIC_EncodePriority+0x30>
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3b03      	subs	r3, #3
 8000be6:	e000      	b.n	8000bea <NVIC_EncodePriority+0x32>
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43da      	mvns	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c00:	f04f 31ff 	mov.w	r1, #4294967295
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	43d9      	mvns	r1, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	4313      	orrs	r3, r2
         );
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3724      	adds	r7, #36	; 0x24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ff4c 	bl	8000ac4 <__NVIC_SetPriorityGrouping>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
 8000c40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c46:	f7ff ff61 	bl	8000b0c <__NVIC_GetPriorityGrouping>
 8000c4a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	68b9      	ldr	r1, [r7, #8]
 8000c50:	6978      	ldr	r0, [r7, #20]
 8000c52:	f7ff ffb1 	bl	8000bb8 <NVIC_EncodePriority>
 8000c56:	4602      	mov	r2, r0
 8000c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ff80 	bl	8000b64 <__NVIC_SetPriority>
}
 8000c64:	bf00      	nop
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ff54 	bl	8000b28 <__NVIC_EnableIRQ>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b087      	sub	sp, #28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c96:	e17f      	b.n	8000f98 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f000 8171 	beq.w	8000f92 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d005      	beq.n	8000cc8 <HAL_GPIO_Init+0x40>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d130      	bne.n	8000d2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cfe:	2201      	movs	r2, #1
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	091b      	lsrs	r3, r3, #4
 8000d14:	f003 0201 	and.w	r2, r3, #1
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d118      	bne.n	8000d68 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	08db      	lsrs	r3, r3, #3
 8000d52:	f003 0201 	and.w	r2, r3, #1
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d017      	beq.n	8000da4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0303 	and.w	r3, r3, #3
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d123      	bne.n	8000df8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	08da      	lsrs	r2, r3, #3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3208      	adds	r2, #8
 8000db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	f003 0307 	and.w	r3, r3, #7
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	220f      	movs	r2, #15
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	691a      	ldr	r2, [r3, #16]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	08da      	lsrs	r2, r3, #3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3208      	adds	r2, #8
 8000df2:	6939      	ldr	r1, [r7, #16]
 8000df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	2203      	movs	r2, #3
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0203 	and.w	r2, r3, #3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f000 80ac 	beq.w	8000f92 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3a:	4b5f      	ldr	r3, [pc, #380]	; (8000fb8 <HAL_GPIO_Init+0x330>)
 8000e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3e:	4a5e      	ldr	r2, [pc, #376]	; (8000fb8 <HAL_GPIO_Init+0x330>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6613      	str	r3, [r2, #96]	; 0x60
 8000e46:	4b5c      	ldr	r3, [pc, #368]	; (8000fb8 <HAL_GPIO_Init+0x330>)
 8000e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e52:	4a5a      	ldr	r2, [pc, #360]	; (8000fbc <HAL_GPIO_Init+0x334>)
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	3302      	adds	r3, #2
 8000e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	220f      	movs	r2, #15
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e7c:	d025      	beq.n	8000eca <HAL_GPIO_Init+0x242>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4f      	ldr	r2, [pc, #316]	; (8000fc0 <HAL_GPIO_Init+0x338>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d01f      	beq.n	8000ec6 <HAL_GPIO_Init+0x23e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4e      	ldr	r2, [pc, #312]	; (8000fc4 <HAL_GPIO_Init+0x33c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d019      	beq.n	8000ec2 <HAL_GPIO_Init+0x23a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4d      	ldr	r2, [pc, #308]	; (8000fc8 <HAL_GPIO_Init+0x340>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d013      	beq.n	8000ebe <HAL_GPIO_Init+0x236>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4c      	ldr	r2, [pc, #304]	; (8000fcc <HAL_GPIO_Init+0x344>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d00d      	beq.n	8000eba <HAL_GPIO_Init+0x232>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4b      	ldr	r2, [pc, #300]	; (8000fd0 <HAL_GPIO_Init+0x348>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d007      	beq.n	8000eb6 <HAL_GPIO_Init+0x22e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4a      	ldr	r2, [pc, #296]	; (8000fd4 <HAL_GPIO_Init+0x34c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d101      	bne.n	8000eb2 <HAL_GPIO_Init+0x22a>
 8000eae:	2306      	movs	r3, #6
 8000eb0:	e00c      	b.n	8000ecc <HAL_GPIO_Init+0x244>
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	e00a      	b.n	8000ecc <HAL_GPIO_Init+0x244>
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	e008      	b.n	8000ecc <HAL_GPIO_Init+0x244>
 8000eba:	2304      	movs	r3, #4
 8000ebc:	e006      	b.n	8000ecc <HAL_GPIO_Init+0x244>
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e004      	b.n	8000ecc <HAL_GPIO_Init+0x244>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e002      	b.n	8000ecc <HAL_GPIO_Init+0x244>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <HAL_GPIO_Init+0x244>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	f002 0203 	and.w	r2, r2, #3
 8000ed2:	0092      	lsls	r2, r2, #2
 8000ed4:	4093      	lsls	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000edc:	4937      	ldr	r1, [pc, #220]	; (8000fbc <HAL_GPIO_Init+0x334>)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eea:	4b3b      	ldr	r3, [pc, #236]	; (8000fd8 <HAL_GPIO_Init+0x350>)
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f0e:	4a32      	ldr	r2, [pc, #200]	; (8000fd8 <HAL_GPIO_Init+0x350>)
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f14:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <HAL_GPIO_Init+0x350>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f38:	4a27      	ldr	r2, [pc, #156]	; (8000fd8 <HAL_GPIO_Init+0x350>)
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f3e:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <HAL_GPIO_Init+0x350>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f62:	4a1d      	ldr	r2, [pc, #116]	; (8000fd8 <HAL_GPIO_Init+0x350>)
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <HAL_GPIO_Init+0x350>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f8c:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <HAL_GPIO_Init+0x350>)
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f47f ae78 	bne.w	8000c98 <HAL_GPIO_Init+0x10>
  }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	371c      	adds	r7, #28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010000 	.word	0x40010000
 8000fc0:	48000400 	.word	0x48000400
 8000fc4:	48000800 	.word	0x48000800
 8000fc8:	48000c00 	.word	0x48000c00
 8000fcc:	48001000 	.word	0x48001000
 8000fd0:	48001400 	.word	0x48001400
 8000fd4:	48001800 	.word	0x48001800
 8000fd8:	40010400 	.word	0x40010400

08000fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fec:	787b      	ldrb	r3, [r7, #1]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ff2:	887a      	ldrh	r2, [r7, #2]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ff8:	e002      	b.n	8001000 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ffa:	887a      	ldrh	r2, [r7, #2]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <HAL_PWREx_GetVoltageRange+0x18>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40007000 	.word	0x40007000

08001028 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001036:	d130      	bne.n	800109a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001038:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001044:	d038      	beq.n	80010b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001046:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800104e:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001050:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001054:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001056:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2232      	movs	r2, #50	; 0x32
 800105c:	fb02 f303 	mul.w	r3, r2, r3
 8001060:	4a1b      	ldr	r2, [pc, #108]	; (80010d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001062:	fba2 2303 	umull	r2, r3, r2, r3
 8001066:	0c9b      	lsrs	r3, r3, #18
 8001068:	3301      	adds	r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800106c:	e002      	b.n	8001074 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	3b01      	subs	r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800107c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001080:	d102      	bne.n	8001088 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f2      	bne.n	800106e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001094:	d110      	bne.n	80010b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e00f      	b.n	80010ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010a6:	d007      	beq.n	80010b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010b0:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40007000 	.word	0x40007000
 80010cc:	20000000 	.word	0x20000000
 80010d0:	431bde83 	.word	0x431bde83

080010d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e3ca      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010e6:	4b97      	ldr	r3, [pc, #604]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010f0:	4b94      	ldr	r3, [pc, #592]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 80e4 	beq.w	80012d0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d007      	beq.n	800111e <HAL_RCC_OscConfig+0x4a>
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	2b0c      	cmp	r3, #12
 8001112:	f040 808b 	bne.w	800122c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	2b01      	cmp	r3, #1
 800111a:	f040 8087 	bne.w	800122c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800111e:	4b89      	ldr	r3, [pc, #548]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d005      	beq.n	8001136 <HAL_RCC_OscConfig+0x62>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e3a2      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a1a      	ldr	r2, [r3, #32]
 800113a:	4b82      	ldr	r3, [pc, #520]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	2b00      	cmp	r3, #0
 8001144:	d004      	beq.n	8001150 <HAL_RCC_OscConfig+0x7c>
 8001146:	4b7f      	ldr	r3, [pc, #508]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800114e:	e005      	b.n	800115c <HAL_RCC_OscConfig+0x88>
 8001150:	4b7c      	ldr	r3, [pc, #496]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 8001152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001156:	091b      	lsrs	r3, r3, #4
 8001158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800115c:	4293      	cmp	r3, r2
 800115e:	d223      	bcs.n	80011a8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fd87 	bl	8001c78 <RCC_SetFlashLatencyFromMSIRange>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e383      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001174:	4b73      	ldr	r3, [pc, #460]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a72      	ldr	r2, [pc, #456]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 800117a:	f043 0308 	orr.w	r3, r3, #8
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b70      	ldr	r3, [pc, #448]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	496d      	ldr	r1, [pc, #436]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 800118e:	4313      	orrs	r3, r2
 8001190:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001192:	4b6c      	ldr	r3, [pc, #432]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	4968      	ldr	r1, [pc, #416]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	604b      	str	r3, [r1, #4]
 80011a6:	e025      	b.n	80011f4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011a8:	4b66      	ldr	r3, [pc, #408]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a65      	ldr	r2, [pc, #404]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 80011ae:	f043 0308 	orr.w	r3, r3, #8
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	4b63      	ldr	r3, [pc, #396]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	4960      	ldr	r1, [pc, #384]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011c6:	4b5f      	ldr	r3, [pc, #380]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	495b      	ldr	r1, [pc, #364]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d109      	bne.n	80011f4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 fd47 	bl	8001c78 <RCC_SetFlashLatencyFromMSIRange>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e343      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011f4:	f000 fc4a 	bl	8001a8c <HAL_RCC_GetSysClockFreq>
 80011f8:	4602      	mov	r2, r0
 80011fa:	4b52      	ldr	r3, [pc, #328]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	091b      	lsrs	r3, r3, #4
 8001200:	f003 030f 	and.w	r3, r3, #15
 8001204:	4950      	ldr	r1, [pc, #320]	; (8001348 <HAL_RCC_OscConfig+0x274>)
 8001206:	5ccb      	ldrb	r3, [r1, r3]
 8001208:	f003 031f 	and.w	r3, r3, #31
 800120c:	fa22 f303 	lsr.w	r3, r2, r3
 8001210:	4a4e      	ldr	r2, [pc, #312]	; (800134c <HAL_RCC_OscConfig+0x278>)
 8001212:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001214:	4b4e      	ldr	r3, [pc, #312]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fb3d 	bl	8000898 <HAL_InitTick>
 800121e:	4603      	mov	r3, r0
 8001220:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d052      	beq.n	80012ce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	e327      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d032      	beq.n	800129a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001234:	4b43      	ldr	r3, [pc, #268]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a42      	ldr	r2, [pc, #264]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001240:	f7ff fc34 	bl	8000aac <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001248:	f7ff fc30 	bl	8000aac <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e310      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800125a:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f0      	beq.n	8001248 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001266:	4b37      	ldr	r3, [pc, #220]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a36      	ldr	r2, [pc, #216]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	4b34      	ldr	r3, [pc, #208]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	4931      	ldr	r1, [pc, #196]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 8001280:	4313      	orrs	r3, r2
 8001282:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001284:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	492c      	ldr	r1, [pc, #176]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 8001294:	4313      	orrs	r3, r2
 8001296:	604b      	str	r3, [r1, #4]
 8001298:	e01a      	b.n	80012d0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800129a:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a29      	ldr	r2, [pc, #164]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 80012a0:	f023 0301 	bic.w	r3, r3, #1
 80012a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012a6:	f7ff fc01 	bl	8000aac <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012ae:	f7ff fbfd 	bl	8000aac <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e2dd      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012c0:	4b20      	ldr	r3, [pc, #128]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f0      	bne.n	80012ae <HAL_RCC_OscConfig+0x1da>
 80012cc:	e000      	b.n	80012d0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d074      	beq.n	80013c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d005      	beq.n	80012ee <HAL_RCC_OscConfig+0x21a>
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	2b0c      	cmp	r3, #12
 80012e6:	d10e      	bne.n	8001306 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d10b      	bne.n	8001306 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d064      	beq.n	80013c4 <HAL_RCC_OscConfig+0x2f0>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d160      	bne.n	80013c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e2ba      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800130e:	d106      	bne.n	800131e <HAL_RCC_OscConfig+0x24a>
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 8001316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	e026      	b.n	800136c <HAL_RCC_OscConfig+0x298>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001326:	d115      	bne.n	8001354 <HAL_RCC_OscConfig+0x280>
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a05      	ldr	r2, [pc, #20]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 800132e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a02      	ldr	r2, [pc, #8]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 800133a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	e014      	b.n	800136c <HAL_RCC_OscConfig+0x298>
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000
 8001348:	08005c44 	.word	0x08005c44
 800134c:	20000000 	.word	0x20000000
 8001350:	20000004 	.word	0x20000004
 8001354:	4ba0      	ldr	r3, [pc, #640]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a9f      	ldr	r2, [pc, #636]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 800135a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b9d      	ldr	r3, [pc, #628]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a9c      	ldr	r2, [pc, #624]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 8001366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d013      	beq.n	800139c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001374:	f7ff fb9a 	bl	8000aac <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fb96 	bl	8000aac <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	; 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e276      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800138e:	4b92      	ldr	r3, [pc, #584]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0x2a8>
 800139a:	e014      	b.n	80013c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139c:	f7ff fb86 	bl	8000aac <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff fb82 	bl	8000aac <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	; 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e262      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013b6:	4b88      	ldr	r3, [pc, #544]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x2d0>
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d060      	beq.n	8001494 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	d005      	beq.n	80013e4 <HAL_RCC_OscConfig+0x310>
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2b0c      	cmp	r3, #12
 80013dc:	d119      	bne.n	8001412 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d116      	bne.n	8001412 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013e4:	4b7c      	ldr	r3, [pc, #496]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <HAL_RCC_OscConfig+0x328>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e23f      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fc:	4b76      	ldr	r3, [pc, #472]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	061b      	lsls	r3, r3, #24
 800140a:	4973      	ldr	r1, [pc, #460]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 800140c:	4313      	orrs	r3, r2
 800140e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001410:	e040      	b.n	8001494 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d023      	beq.n	8001462 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800141a:	4b6f      	ldr	r3, [pc, #444]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a6e      	ldr	r2, [pc, #440]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 8001420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001426:	f7ff fb41 	bl	8000aac <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800142e:	f7ff fb3d 	bl	8000aac <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e21d      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001440:	4b65      	ldr	r3, [pc, #404]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f0      	beq.n	800142e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144c:	4b62      	ldr	r3, [pc, #392]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	061b      	lsls	r3, r3, #24
 800145a:	495f      	ldr	r1, [pc, #380]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 800145c:	4313      	orrs	r3, r2
 800145e:	604b      	str	r3, [r1, #4]
 8001460:	e018      	b.n	8001494 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001462:	4b5d      	ldr	r3, [pc, #372]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a5c      	ldr	r2, [pc, #368]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 8001468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800146c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146e:	f7ff fb1d 	bl	8000aac <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001476:	f7ff fb19 	bl	8000aac <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e1f9      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001488:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f0      	bne.n	8001476 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d03c      	beq.n	800151a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d01c      	beq.n	80014e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014a8:	4b4b      	ldr	r3, [pc, #300]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 80014aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ae:	4a4a      	ldr	r2, [pc, #296]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b8:	f7ff faf8 	bl	8000aac <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c0:	f7ff faf4 	bl	8000aac <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e1d4      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014d2:	4b41      	ldr	r3, [pc, #260]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 80014d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0ef      	beq.n	80014c0 <HAL_RCC_OscConfig+0x3ec>
 80014e0:	e01b      	b.n	800151a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e2:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 80014e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e8:	4a3b      	ldr	r2, [pc, #236]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 80014ea:	f023 0301 	bic.w	r3, r3, #1
 80014ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f2:	f7ff fadb 	bl	8000aac <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014fa:	f7ff fad7 	bl	8000aac <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e1b7      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800150c:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 800150e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1ef      	bne.n	80014fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 80a6 	beq.w	8001674 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800152c:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 800152e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d10d      	bne.n	8001554 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001538:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 800153a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153c:	4a26      	ldr	r2, [pc, #152]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 800153e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001542:	6593      	str	r3, [r2, #88]	; 0x58
 8001544:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 8001546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001550:	2301      	movs	r3, #1
 8001552:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001554:	4b21      	ldr	r3, [pc, #132]	; (80015dc <HAL_RCC_OscConfig+0x508>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155c:	2b00      	cmp	r3, #0
 800155e:	d118      	bne.n	8001592 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001560:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <HAL_RCC_OscConfig+0x508>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a1d      	ldr	r2, [pc, #116]	; (80015dc <HAL_RCC_OscConfig+0x508>)
 8001566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156c:	f7ff fa9e 	bl	8000aac <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001574:	f7ff fa9a 	bl	8000aac <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e17a      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <HAL_RCC_OscConfig+0x508>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d108      	bne.n	80015ac <HAL_RCC_OscConfig+0x4d8>
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 800159c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a0:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015aa:	e029      	b.n	8001600 <HAL_RCC_OscConfig+0x52c>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d115      	bne.n	80015e0 <HAL_RCC_OscConfig+0x50c>
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 80015b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ba:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 80015c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ca:	4a03      	ldr	r2, [pc, #12]	; (80015d8 <HAL_RCC_OscConfig+0x504>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015d4:	e014      	b.n	8001600 <HAL_RCC_OscConfig+0x52c>
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40007000 	.word	0x40007000
 80015e0:	4b9c      	ldr	r3, [pc, #624]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 80015e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e6:	4a9b      	ldr	r2, [pc, #620]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 80015e8:	f023 0301 	bic.w	r3, r3, #1
 80015ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015f0:	4b98      	ldr	r3, [pc, #608]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 80015f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015f6:	4a97      	ldr	r2, [pc, #604]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 80015f8:	f023 0304 	bic.w	r3, r3, #4
 80015fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d016      	beq.n	8001636 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001608:	f7ff fa50 	bl	8000aac <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800160e:	e00a      	b.n	8001626 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001610:	f7ff fa4c 	bl	8000aac <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	f241 3288 	movw	r2, #5000	; 0x1388
 800161e:	4293      	cmp	r3, r2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e12a      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001626:	4b8b      	ldr	r3, [pc, #556]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 8001628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0ed      	beq.n	8001610 <HAL_RCC_OscConfig+0x53c>
 8001634:	e015      	b.n	8001662 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001636:	f7ff fa39 	bl	8000aac <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800163c:	e00a      	b.n	8001654 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800163e:	f7ff fa35 	bl	8000aac <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	f241 3288 	movw	r2, #5000	; 0x1388
 800164c:	4293      	cmp	r3, r2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e113      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001654:	4b7f      	ldr	r3, [pc, #508]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 8001656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1ed      	bne.n	800163e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001662:	7ffb      	ldrb	r3, [r7, #31]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d105      	bne.n	8001674 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001668:	4b7a      	ldr	r3, [pc, #488]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 800166a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166c:	4a79      	ldr	r2, [pc, #484]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 800166e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001672:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80fe 	beq.w	800187a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	2b02      	cmp	r3, #2
 8001684:	f040 80d0 	bne.w	8001828 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001688:	4b72      	ldr	r3, [pc, #456]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f003 0203 	and.w	r2, r3, #3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	429a      	cmp	r2, r3
 800169a:	d130      	bne.n	80016fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	3b01      	subs	r3, #1
 80016a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d127      	bne.n	80016fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d11f      	bne.n	80016fe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016c8:	2a07      	cmp	r2, #7
 80016ca:	bf14      	ite	ne
 80016cc:	2201      	movne	r2, #1
 80016ce:	2200      	moveq	r2, #0
 80016d0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d113      	bne.n	80016fe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e0:	085b      	lsrs	r3, r3, #1
 80016e2:	3b01      	subs	r3, #1
 80016e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d109      	bne.n	80016fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	085b      	lsrs	r3, r3, #1
 80016f6:	3b01      	subs	r3, #1
 80016f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d06e      	beq.n	80017dc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	2b0c      	cmp	r3, #12
 8001702:	d069      	beq.n	80017d8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001704:	4b53      	ldr	r3, [pc, #332]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d105      	bne.n	800171c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001710:	4b50      	ldr	r3, [pc, #320]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0ad      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001720:	4b4c      	ldr	r3, [pc, #304]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a4b      	ldr	r2, [pc, #300]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 8001726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800172a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800172c:	f7ff f9be 	bl	8000aac <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff f9ba 	bl	8000aac <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e09a      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001746:	4b43      	ldr	r3, [pc, #268]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001752:	4b40      	ldr	r3, [pc, #256]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	4b40      	ldr	r3, [pc, #256]	; (8001858 <HAL_RCC_OscConfig+0x784>)
 8001758:	4013      	ands	r3, r2
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001762:	3a01      	subs	r2, #1
 8001764:	0112      	lsls	r2, r2, #4
 8001766:	4311      	orrs	r1, r2
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800176c:	0212      	lsls	r2, r2, #8
 800176e:	4311      	orrs	r1, r2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001774:	0852      	lsrs	r2, r2, #1
 8001776:	3a01      	subs	r2, #1
 8001778:	0552      	lsls	r2, r2, #21
 800177a:	4311      	orrs	r1, r2
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001780:	0852      	lsrs	r2, r2, #1
 8001782:	3a01      	subs	r2, #1
 8001784:	0652      	lsls	r2, r2, #25
 8001786:	4311      	orrs	r1, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800178c:	0912      	lsrs	r2, r2, #4
 800178e:	0452      	lsls	r2, r2, #17
 8001790:	430a      	orrs	r2, r1
 8001792:	4930      	ldr	r1, [pc, #192]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 8001794:	4313      	orrs	r3, r2
 8001796:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001798:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a2d      	ldr	r2, [pc, #180]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 800179e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017a4:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	4a2a      	ldr	r2, [pc, #168]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 80017aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017b0:	f7ff f97c 	bl	8000aac <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff f978 	bl	8000aac <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e058      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ca:	4b22      	ldr	r3, [pc, #136]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017d6:	e050      	b.n	800187a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e04f      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017dc:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d148      	bne.n	800187a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a19      	ldr	r2, [pc, #100]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 80017ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017f4:	4b17      	ldr	r3, [pc, #92]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4a16      	ldr	r2, [pc, #88]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 80017fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001800:	f7ff f954 	bl	8000aac <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff f950 	bl	8000aac <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e030      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x734>
 8001826:	e028      	b.n	800187a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	2b0c      	cmp	r3, #12
 800182c:	d023      	beq.n	8001876 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a08      	ldr	r2, [pc, #32]	; (8001854 <HAL_RCC_OscConfig+0x780>)
 8001834:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183a:	f7ff f937 	bl	8000aac <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001840:	e00c      	b.n	800185c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001842:	f7ff f933 	bl	8000aac <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d905      	bls.n	800185c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e013      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
 8001854:	40021000 	.word	0x40021000
 8001858:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_RCC_OscConfig+0x7b0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1ec      	bne.n	8001842 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_RCC_OscConfig+0x7b0>)
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	4905      	ldr	r1, [pc, #20]	; (8001884 <HAL_RCC_OscConfig+0x7b0>)
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_RCC_OscConfig+0x7b4>)
 8001870:	4013      	ands	r3, r2
 8001872:	60cb      	str	r3, [r1, #12]
 8001874:	e001      	b.n	800187a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40021000 	.word	0x40021000
 8001888:	feeefffc 	.word	0xfeeefffc

0800188c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0e7      	b.n	8001a70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018a0:	4b75      	ldr	r3, [pc, #468]	; (8001a78 <HAL_RCC_ClockConfig+0x1ec>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d910      	bls.n	80018d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b72      	ldr	r3, [pc, #456]	; (8001a78 <HAL_RCC_ClockConfig+0x1ec>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 0207 	bic.w	r2, r3, #7
 80018b6:	4970      	ldr	r1, [pc, #448]	; (8001a78 <HAL_RCC_ClockConfig+0x1ec>)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018be:	4b6e      	ldr	r3, [pc, #440]	; (8001a78 <HAL_RCC_ClockConfig+0x1ec>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0cf      	b.n	8001a70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d010      	beq.n	80018fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	4b66      	ldr	r3, [pc, #408]	; (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d908      	bls.n	80018fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ec:	4b63      	ldr	r3, [pc, #396]	; (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4960      	ldr	r1, [pc, #384]	; (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d04c      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b03      	cmp	r3, #3
 8001910:	d107      	bne.n	8001922 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001912:	4b5a      	ldr	r3, [pc, #360]	; (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d121      	bne.n	8001962 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e0a6      	b.n	8001a70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d107      	bne.n	800193a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800192a:	4b54      	ldr	r3, [pc, #336]	; (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d115      	bne.n	8001962 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e09a      	b.n	8001a70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d107      	bne.n	8001952 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001942:	4b4e      	ldr	r3, [pc, #312]	; (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d109      	bne.n	8001962 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e08e      	b.n	8001a70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001952:	4b4a      	ldr	r3, [pc, #296]	; (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e086      	b.n	8001a70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001962:	4b46      	ldr	r3, [pc, #280]	; (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f023 0203 	bic.w	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	4943      	ldr	r1, [pc, #268]	; (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 8001970:	4313      	orrs	r3, r2
 8001972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001974:	f7ff f89a 	bl	8000aac <HAL_GetTick>
 8001978:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197a:	e00a      	b.n	8001992 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197c:	f7ff f896 	bl	8000aac <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	f241 3288 	movw	r2, #5000	; 0x1388
 800198a:	4293      	cmp	r3, r2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e06e      	b.n	8001a70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001992:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 020c 	and.w	r2, r3, #12
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d1eb      	bne.n	800197c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d010      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	4b31      	ldr	r3, [pc, #196]	; (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019bc:	429a      	cmp	r2, r3
 80019be:	d208      	bcs.n	80019d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c0:	4b2e      	ldr	r3, [pc, #184]	; (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	492b      	ldr	r1, [pc, #172]	; (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019d2:	4b29      	ldr	r3, [pc, #164]	; (8001a78 <HAL_RCC_ClockConfig+0x1ec>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d210      	bcs.n	8001a02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e0:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <HAL_RCC_ClockConfig+0x1ec>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f023 0207 	bic.w	r2, r3, #7
 80019e8:	4923      	ldr	r1, [pc, #140]	; (8001a78 <HAL_RCC_ClockConfig+0x1ec>)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f0:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_RCC_ClockConfig+0x1ec>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d001      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e036      	b.n	8001a70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d008      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	4918      	ldr	r1, [pc, #96]	; (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d009      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4910      	ldr	r1, [pc, #64]	; (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a40:	f000 f824 	bl	8001a8c <HAL_RCC_GetSysClockFreq>
 8001a44:	4602      	mov	r2, r0
 8001a46:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	f003 030f 	and.w	r3, r3, #15
 8001a50:	490b      	ldr	r1, [pc, #44]	; (8001a80 <HAL_RCC_ClockConfig+0x1f4>)
 8001a52:	5ccb      	ldrb	r3, [r1, r3]
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5c:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <HAL_RCC_ClockConfig+0x1f8>)
 8001a5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_RCC_ClockConfig+0x1fc>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe ff17 	bl	8000898 <HAL_InitTick>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a6e:	7afb      	ldrb	r3, [r7, #11]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40022000 	.word	0x40022000
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	08005c44 	.word	0x08005c44
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000004 	.word	0x20000004

08001a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a9a:	4b3e      	ldr	r3, [pc, #248]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aa4:	4b3b      	ldr	r3, [pc, #236]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	2b0c      	cmp	r3, #12
 8001ab8:	d121      	bne.n	8001afe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d11e      	bne.n	8001afe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ac0:	4b34      	ldr	r3, [pc, #208]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d107      	bne.n	8001adc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001acc:	4b31      	ldr	r3, [pc, #196]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad2:	0a1b      	lsrs	r3, r3, #8
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	e005      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001adc:	4b2d      	ldr	r3, [pc, #180]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ae8:	4a2b      	ldr	r2, [pc, #172]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10d      	bne.n	8001b14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001afc:	e00a      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d102      	bne.n	8001b0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x110>)
 8001b06:	61bb      	str	r3, [r7, #24]
 8001b08:	e004      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b10:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	d134      	bne.n	8001b84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b1a:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d003      	beq.n	8001b32 <HAL_RCC_GetSysClockFreq+0xa6>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d003      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0xac>
 8001b30:	e005      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b32:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x110>)
 8001b34:	617b      	str	r3, [r7, #20]
      break;
 8001b36:	e005      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b3a:	617b      	str	r3, [r7, #20]
      break;
 8001b3c:	e002      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	617b      	str	r3, [r7, #20]
      break;
 8001b42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	3301      	adds	r3, #1
 8001b50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	0a1b      	lsrs	r3, r3, #8
 8001b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	fb03 f202 	mul.w	r2, r3, r2
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	0e5b      	lsrs	r3, r3, #25
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	3301      	adds	r3, #1
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b84:	69bb      	ldr	r3, [r7, #24]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3724      	adds	r7, #36	; 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
 8001b98:	08005c5c 	.word	0x08005c5c
 8001b9c:	00f42400 	.word	0x00f42400
 8001ba0:	007a1200 	.word	0x007a1200

08001ba4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000000 	.word	0x20000000

08001bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001bc0:	f7ff fff0 	bl	8001ba4 <HAL_RCC_GetHCLKFreq>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	0a1b      	lsrs	r3, r3, #8
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	4904      	ldr	r1, [pc, #16]	; (8001be4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bd2:	5ccb      	ldrb	r3, [r1, r3]
 8001bd4:	f003 031f 	and.w	r3, r3, #31
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021000 	.word	0x40021000
 8001be4:	08005c54 	.word	0x08005c54

08001be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001bec:	f7ff ffda 	bl	8001ba4 <HAL_RCC_GetHCLKFreq>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	0adb      	lsrs	r3, r3, #11
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	4904      	ldr	r1, [pc, #16]	; (8001c10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bfe:	5ccb      	ldrb	r3, [r1, r3]
 8001c00:	f003 031f 	and.w	r3, r3, #31
 8001c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	08005c54 	.word	0x08005c54

08001c14 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	220f      	movs	r2, #15
 8001c22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_RCC_GetClockConfig+0x5c>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 0203 	and.w	r2, r3, #3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <HAL_RCC_GetClockConfig+0x5c>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <HAL_RCC_GetClockConfig+0x5c>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCC_GetClockConfig+0x5c>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	08db      	lsrs	r3, r3, #3
 8001c4e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <HAL_RCC_GetClockConfig+0x60>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0207 	and.w	r2, r3, #7
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	601a      	str	r2, [r3, #0]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40022000 	.word	0x40022000

08001c78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c84:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c90:	f7ff f9bc 	bl	800100c <HAL_PWREx_GetVoltageRange>
 8001c94:	6178      	str	r0, [r7, #20]
 8001c96:	e014      	b.n	8001cc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c98:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9c:	4a24      	ldr	r2, [pc, #144]	; (8001d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca4:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cb0:	f7ff f9ac 	bl	800100c <HAL_PWREx_GetVoltageRange>
 8001cb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	4a1d      	ldr	r2, [pc, #116]	; (8001d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cc8:	d10b      	bne.n	8001ce2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b80      	cmp	r3, #128	; 0x80
 8001cce:	d919      	bls.n	8001d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2ba0      	cmp	r3, #160	; 0xa0
 8001cd4:	d902      	bls.n	8001cdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	e013      	b.n	8001d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cdc:	2301      	movs	r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	e010      	b.n	8001d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b80      	cmp	r3, #128	; 0x80
 8001ce6:	d902      	bls.n	8001cee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ce8:	2303      	movs	r3, #3
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	e00a      	b.n	8001d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b80      	cmp	r3, #128	; 0x80
 8001cf2:	d102      	bne.n	8001cfa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	e004      	b.n	8001d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b70      	cmp	r3, #112	; 0x70
 8001cfe:	d101      	bne.n	8001d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d00:	2301      	movs	r3, #1
 8001d02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f023 0207 	bic.w	r2, r3, #7
 8001d0c:	4909      	ldr	r1, [pc, #36]	; (8001d34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d14:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d001      	beq.n	8001d26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40022000 	.word	0x40022000

08001d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d40:	2300      	movs	r3, #0
 8001d42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d44:	2300      	movs	r3, #0
 8001d46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d041      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d5c:	d02a      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d62:	d824      	bhi.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d68:	d008      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d6e:	d81e      	bhi.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00a      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001d74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d78:	d010      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001d7a:	e018      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d7c:	4b86      	ldr	r3, [pc, #536]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	4a85      	ldr	r2, [pc, #532]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d88:	e015      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 fabb 	bl	800230c <RCCEx_PLLSAI1_Config>
 8001d96:	4603      	mov	r3, r0
 8001d98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d9a:	e00c      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3320      	adds	r3, #32
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 fba6 	bl	80024f4 <RCCEx_PLLSAI2_Config>
 8001da8:	4603      	mov	r3, r0
 8001daa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dac:	e003      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	74fb      	strb	r3, [r7, #19]
      break;
 8001db2:	e000      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001db6:	7cfb      	ldrb	r3, [r7, #19]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10b      	bne.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dbc:	4b76      	ldr	r3, [pc, #472]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dca:	4973      	ldr	r1, [pc, #460]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001dd2:	e001      	b.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dd4:	7cfb      	ldrb	r3, [r7, #19]
 8001dd6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d041      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001de8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001dec:	d02a      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001dee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001df2:	d824      	bhi.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001df4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001df8:	d008      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001dfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dfe:	d81e      	bhi.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00a      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e08:	d010      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e0a:	e018      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e0c:	4b62      	ldr	r3, [pc, #392]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4a61      	ldr	r2, [pc, #388]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e18:	e015      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 fa73 	bl	800230c <RCCEx_PLLSAI1_Config>
 8001e26:	4603      	mov	r3, r0
 8001e28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e2a:	e00c      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3320      	adds	r3, #32
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 fb5e 	bl	80024f4 <RCCEx_PLLSAI2_Config>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e3c:	e003      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	74fb      	strb	r3, [r7, #19]
      break;
 8001e42:	e000      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e46:	7cfb      	ldrb	r3, [r7, #19]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10b      	bne.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e4c:	4b52      	ldr	r3, [pc, #328]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e5a:	494f      	ldr	r1, [pc, #316]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e62:	e001      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e64:	7cfb      	ldrb	r3, [r7, #19]
 8001e66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80a0 	beq.w	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e7a:	4b47      	ldr	r3, [pc, #284]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00d      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e90:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	4a40      	ldr	r2, [pc, #256]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e9c:	4b3e      	ldr	r3, [pc, #248]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eac:	4b3b      	ldr	r3, [pc, #236]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a3a      	ldr	r2, [pc, #232]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eb8:	f7fe fdf8 	bl	8000aac <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ebe:	e009      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec0:	f7fe fdf4 	bl	8000aac <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d902      	bls.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	74fb      	strb	r3, [r7, #19]
        break;
 8001ed2:	e005      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ed4:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0ef      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001ee0:	7cfb      	ldrb	r3, [r7, #19]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d15c      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ee6:	4b2c      	ldr	r3, [pc, #176]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01f      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d019      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f04:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f10:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f16:	4a20      	ldr	r2, [pc, #128]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f20:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f26:	4a1c      	ldr	r2, [pc, #112]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f30:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d016      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7fe fdb3 	bl	8000aac <HAL_GetTick>
 8001f46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f48:	e00b      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7fe fdaf 	bl	8000aac <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d902      	bls.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	74fb      	strb	r3, [r7, #19]
            break;
 8001f60:	e006      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0ec      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001f70:	7cfb      	ldrb	r3, [r7, #19]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f76:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f86:	4904      	ldr	r1, [pc, #16]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f8e:	e009      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f90:	7cfb      	ldrb	r3, [r7, #19]
 8001f92:	74bb      	strb	r3, [r7, #18]
 8001f94:	e006      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fa0:	7cfb      	ldrb	r3, [r7, #19]
 8001fa2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fa4:	7c7b      	ldrb	r3, [r7, #17]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d105      	bne.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001faa:	4b9e      	ldr	r3, [pc, #632]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fae:	4a9d      	ldr	r2, [pc, #628]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fc2:	4b98      	ldr	r3, [pc, #608]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc8:	f023 0203 	bic.w	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd0:	4994      	ldr	r1, [pc, #592]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00a      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fe4:	4b8f      	ldr	r3, [pc, #572]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fea:	f023 020c 	bic.w	r2, r3, #12
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff2:	498c      	ldr	r1, [pc, #560]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00a      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002006:	4b87      	ldr	r3, [pc, #540]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	4983      	ldr	r1, [pc, #524]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002016:	4313      	orrs	r3, r2
 8002018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00a      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002028:	4b7e      	ldr	r3, [pc, #504]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	497b      	ldr	r1, [pc, #492]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002038:	4313      	orrs	r3, r2
 800203a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00a      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800204a:	4b76      	ldr	r3, [pc, #472]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002050:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002058:	4972      	ldr	r1, [pc, #456]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205a:	4313      	orrs	r3, r2
 800205c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0320 	and.w	r3, r3, #32
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00a      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800206c:	4b6d      	ldr	r3, [pc, #436]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002072:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	496a      	ldr	r1, [pc, #424]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207c:	4313      	orrs	r3, r2
 800207e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00a      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800208e:	4b65      	ldr	r3, [pc, #404]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002094:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209c:	4961      	ldr	r1, [pc, #388]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00a      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020b0:	4b5c      	ldr	r3, [pc, #368]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020be:	4959      	ldr	r1, [pc, #356]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00a      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020d2:	4b54      	ldr	r3, [pc, #336]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e0:	4950      	ldr	r1, [pc, #320]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020f4:	4b4b      	ldr	r3, [pc, #300]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002102:	4948      	ldr	r1, [pc, #288]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002116:	4b43      	ldr	r3, [pc, #268]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	493f      	ldr	r1, [pc, #252]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d028      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002138:	4b3a      	ldr	r3, [pc, #232]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002146:	4937      	ldr	r1, [pc, #220]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002156:	d106      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002158:	4b32      	ldr	r3, [pc, #200]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4a31      	ldr	r2, [pc, #196]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002162:	60d3      	str	r3, [r2, #12]
 8002164:	e011      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800216a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800216e:	d10c      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3304      	adds	r3, #4
 8002174:	2101      	movs	r1, #1
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f8c8 	bl	800230c <RCCEx_PLLSAI1_Config>
 800217c:	4603      	mov	r3, r0
 800217e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002180:	7cfb      	ldrb	r3, [r7, #19]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002186:	7cfb      	ldrb	r3, [r7, #19]
 8002188:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d028      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002196:	4b23      	ldr	r3, [pc, #140]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	491f      	ldr	r1, [pc, #124]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021b4:	d106      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021b6:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	4a1a      	ldr	r2, [pc, #104]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021c0:	60d3      	str	r3, [r2, #12]
 80021c2:	e011      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3304      	adds	r3, #4
 80021d2:	2101      	movs	r1, #1
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 f899 	bl	800230c <RCCEx_PLLSAI1_Config>
 80021da:	4603      	mov	r3, r0
 80021dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021de:	7cfb      	ldrb	r3, [r7, #19]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d02b      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002202:	4908      	ldr	r1, [pc, #32]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800220e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002212:	d109      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4a02      	ldr	r2, [pc, #8]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800221e:	60d3      	str	r3, [r2, #12]
 8002220:	e014      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800222c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002230:	d10c      	bne.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3304      	adds	r3, #4
 8002236:	2101      	movs	r1, #1
 8002238:	4618      	mov	r0, r3
 800223a:	f000 f867 	bl	800230c <RCCEx_PLLSAI1_Config>
 800223e:	4603      	mov	r3, r0
 8002240:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002242:	7cfb      	ldrb	r3, [r7, #19]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002248:	7cfb      	ldrb	r3, [r7, #19]
 800224a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d02f      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002258:	4b2b      	ldr	r3, [pc, #172]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002266:	4928      	ldr	r1, [pc, #160]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002272:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002276:	d10d      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3304      	adds	r3, #4
 800227c:	2102      	movs	r1, #2
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f844 	bl	800230c <RCCEx_PLLSAI1_Config>
 8002284:	4603      	mov	r3, r0
 8002286:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d014      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800228e:	7cfb      	ldrb	r3, [r7, #19]
 8002290:	74bb      	strb	r3, [r7, #18]
 8002292:	e011      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800229c:	d10c      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3320      	adds	r3, #32
 80022a2:	2102      	movs	r1, #2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 f925 	bl	80024f4 <RCCEx_PLLSAI2_Config>
 80022aa:	4603      	mov	r3, r0
 80022ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ae:	7cfb      	ldrb	r3, [r7, #19]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022b4:	7cfb      	ldrb	r3, [r7, #19]
 80022b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00a      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022c4:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022d2:	490d      	ldr	r1, [pc, #52]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00b      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022f6:	4904      	ldr	r1, [pc, #16]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000

0800230c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800231a:	4b75      	ldr	r3, [pc, #468]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d018      	beq.n	8002358 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002326:	4b72      	ldr	r3, [pc, #456]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f003 0203 	and.w	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d10d      	bne.n	8002352 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
       ||
 800233a:	2b00      	cmp	r3, #0
 800233c:	d009      	beq.n	8002352 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800233e:	4b6c      	ldr	r3, [pc, #432]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	091b      	lsrs	r3, r3, #4
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
       ||
 800234e:	429a      	cmp	r2, r3
 8002350:	d047      	beq.n	80023e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
 8002356:	e044      	b.n	80023e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b03      	cmp	r3, #3
 800235e:	d018      	beq.n	8002392 <RCCEx_PLLSAI1_Config+0x86>
 8002360:	2b03      	cmp	r3, #3
 8002362:	d825      	bhi.n	80023b0 <RCCEx_PLLSAI1_Config+0xa4>
 8002364:	2b01      	cmp	r3, #1
 8002366:	d002      	beq.n	800236e <RCCEx_PLLSAI1_Config+0x62>
 8002368:	2b02      	cmp	r3, #2
 800236a:	d009      	beq.n	8002380 <RCCEx_PLLSAI1_Config+0x74>
 800236c:	e020      	b.n	80023b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800236e:	4b60      	ldr	r3, [pc, #384]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d11d      	bne.n	80023b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800237e:	e01a      	b.n	80023b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002380:	4b5b      	ldr	r3, [pc, #364]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002388:	2b00      	cmp	r3, #0
 800238a:	d116      	bne.n	80023ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002390:	e013      	b.n	80023ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002392:	4b57      	ldr	r3, [pc, #348]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10f      	bne.n	80023be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800239e:	4b54      	ldr	r3, [pc, #336]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023ae:	e006      	b.n	80023be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
      break;
 80023b4:	e004      	b.n	80023c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023b6:	bf00      	nop
 80023b8:	e002      	b.n	80023c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023ba:	bf00      	nop
 80023bc:	e000      	b.n	80023c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023be:	bf00      	nop
    }

    if(status == HAL_OK)
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10d      	bne.n	80023e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023c6:	4b4a      	ldr	r3, [pc, #296]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6819      	ldr	r1, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	430b      	orrs	r3, r1
 80023dc:	4944      	ldr	r1, [pc, #272]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d17d      	bne.n	80024e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023e8:	4b41      	ldr	r3, [pc, #260]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a40      	ldr	r2, [pc, #256]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f4:	f7fe fb5a 	bl	8000aac <HAL_GetTick>
 80023f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023fa:	e009      	b.n	8002410 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023fc:	f7fe fb56 	bl	8000aac <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d902      	bls.n	8002410 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	73fb      	strb	r3, [r7, #15]
        break;
 800240e:	e005      	b.n	800241c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002410:	4b37      	ldr	r3, [pc, #220]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1ef      	bne.n	80023fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d160      	bne.n	80024e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d111      	bne.n	800244c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002428:	4b31      	ldr	r3, [pc, #196]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6892      	ldr	r2, [r2, #8]
 8002438:	0211      	lsls	r1, r2, #8
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68d2      	ldr	r2, [r2, #12]
 800243e:	0912      	lsrs	r2, r2, #4
 8002440:	0452      	lsls	r2, r2, #17
 8002442:	430a      	orrs	r2, r1
 8002444:	492a      	ldr	r1, [pc, #168]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002446:	4313      	orrs	r3, r2
 8002448:	610b      	str	r3, [r1, #16]
 800244a:	e027      	b.n	800249c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d112      	bne.n	8002478 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002452:	4b27      	ldr	r3, [pc, #156]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800245a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6892      	ldr	r2, [r2, #8]
 8002462:	0211      	lsls	r1, r2, #8
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6912      	ldr	r2, [r2, #16]
 8002468:	0852      	lsrs	r2, r2, #1
 800246a:	3a01      	subs	r2, #1
 800246c:	0552      	lsls	r2, r2, #21
 800246e:	430a      	orrs	r2, r1
 8002470:	491f      	ldr	r1, [pc, #124]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002472:	4313      	orrs	r3, r2
 8002474:	610b      	str	r3, [r1, #16]
 8002476:	e011      	b.n	800249c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002478:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002480:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6892      	ldr	r2, [r2, #8]
 8002488:	0211      	lsls	r1, r2, #8
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6952      	ldr	r2, [r2, #20]
 800248e:	0852      	lsrs	r2, r2, #1
 8002490:	3a01      	subs	r2, #1
 8002492:	0652      	lsls	r2, r2, #25
 8002494:	430a      	orrs	r2, r1
 8002496:	4916      	ldr	r1, [pc, #88]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002498:	4313      	orrs	r3, r2
 800249a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800249c:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a13      	ldr	r2, [pc, #76]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a8:	f7fe fb00 	bl	8000aac <HAL_GetTick>
 80024ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024ae:	e009      	b.n	80024c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024b0:	f7fe fafc 	bl	8000aac <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d902      	bls.n	80024c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	73fb      	strb	r3, [r7, #15]
          break;
 80024c2:	e005      	b.n	80024d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024c4:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0ef      	beq.n	80024b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d8:	691a      	ldr	r2, [r3, #16]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	4904      	ldr	r1, [pc, #16]	; (80024f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000

080024f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002502:	4b6a      	ldr	r3, [pc, #424]	; (80026ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d018      	beq.n	8002540 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800250e:	4b67      	ldr	r3, [pc, #412]	; (80026ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f003 0203 	and.w	r2, r3, #3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d10d      	bne.n	800253a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
       ||
 8002522:	2b00      	cmp	r3, #0
 8002524:	d009      	beq.n	800253a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002526:	4b61      	ldr	r3, [pc, #388]	; (80026ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	091b      	lsrs	r3, r3, #4
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
       ||
 8002536:	429a      	cmp	r2, r3
 8002538:	d047      	beq.n	80025ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	e044      	b.n	80025ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b03      	cmp	r3, #3
 8002546:	d018      	beq.n	800257a <RCCEx_PLLSAI2_Config+0x86>
 8002548:	2b03      	cmp	r3, #3
 800254a:	d825      	bhi.n	8002598 <RCCEx_PLLSAI2_Config+0xa4>
 800254c:	2b01      	cmp	r3, #1
 800254e:	d002      	beq.n	8002556 <RCCEx_PLLSAI2_Config+0x62>
 8002550:	2b02      	cmp	r3, #2
 8002552:	d009      	beq.n	8002568 <RCCEx_PLLSAI2_Config+0x74>
 8002554:	e020      	b.n	8002598 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002556:	4b55      	ldr	r3, [pc, #340]	; (80026ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d11d      	bne.n	800259e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002566:	e01a      	b.n	800259e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002568:	4b50      	ldr	r3, [pc, #320]	; (80026ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002570:	2b00      	cmp	r3, #0
 8002572:	d116      	bne.n	80025a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002578:	e013      	b.n	80025a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800257a:	4b4c      	ldr	r3, [pc, #304]	; (80026ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10f      	bne.n	80025a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002586:	4b49      	ldr	r3, [pc, #292]	; (80026ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002596:	e006      	b.n	80025a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
      break;
 800259c:	e004      	b.n	80025a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800259e:	bf00      	nop
 80025a0:	e002      	b.n	80025a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025a2:	bf00      	nop
 80025a4:	e000      	b.n	80025a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10d      	bne.n	80025ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025ae:	4b3f      	ldr	r3, [pc, #252]	; (80026ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6819      	ldr	r1, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	430b      	orrs	r3, r1
 80025c4:	4939      	ldr	r1, [pc, #228]	; (80026ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d167      	bne.n	80026a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80025d0:	4b36      	ldr	r3, [pc, #216]	; (80026ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a35      	ldr	r2, [pc, #212]	; (80026ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025dc:	f7fe fa66 	bl	8000aac <HAL_GetTick>
 80025e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025e2:	e009      	b.n	80025f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025e4:	f7fe fa62 	bl	8000aac <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d902      	bls.n	80025f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	73fb      	strb	r3, [r7, #15]
        break;
 80025f6:	e005      	b.n	8002604 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025f8:	4b2c      	ldr	r3, [pc, #176]	; (80026ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1ef      	bne.n	80025e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d14a      	bne.n	80026a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d111      	bne.n	8002634 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002610:	4b26      	ldr	r3, [pc, #152]	; (80026ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6892      	ldr	r2, [r2, #8]
 8002620:	0211      	lsls	r1, r2, #8
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68d2      	ldr	r2, [r2, #12]
 8002626:	0912      	lsrs	r2, r2, #4
 8002628:	0452      	lsls	r2, r2, #17
 800262a:	430a      	orrs	r2, r1
 800262c:	491f      	ldr	r1, [pc, #124]	; (80026ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800262e:	4313      	orrs	r3, r2
 8002630:	614b      	str	r3, [r1, #20]
 8002632:	e011      	b.n	8002658 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800263c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6892      	ldr	r2, [r2, #8]
 8002644:	0211      	lsls	r1, r2, #8
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6912      	ldr	r2, [r2, #16]
 800264a:	0852      	lsrs	r2, r2, #1
 800264c:	3a01      	subs	r2, #1
 800264e:	0652      	lsls	r2, r2, #25
 8002650:	430a      	orrs	r2, r1
 8002652:	4916      	ldr	r1, [pc, #88]	; (80026ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002654:	4313      	orrs	r3, r2
 8002656:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002658:	4b14      	ldr	r3, [pc, #80]	; (80026ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a13      	ldr	r2, [pc, #76]	; (80026ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800265e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002662:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002664:	f7fe fa22 	bl	8000aac <HAL_GetTick>
 8002668:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800266a:	e009      	b.n	8002680 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800266c:	f7fe fa1e 	bl	8000aac <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d902      	bls.n	8002680 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	73fb      	strb	r3, [r7, #15]
          break;
 800267e:	e005      	b.n	800268c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002680:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0ef      	beq.n	800266c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d106      	bne.n	80026a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	4904      	ldr	r1, [pc, #16]	; (80026ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800269c:	4313      	orrs	r3, r2
 800269e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000

080026b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e049      	b.n	8002756 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f841 	bl	800275e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3304      	adds	r3, #4
 80026ec:	4619      	mov	r1, r3
 80026ee:	4610      	mov	r0, r2
 80026f0:	f000 f9f8 	bl	8002ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b01      	cmp	r3, #1
 8002786:	d001      	beq.n	800278c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e04f      	b.n	800282c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a23      	ldr	r2, [pc, #140]	; (8002838 <HAL_TIM_Base_Start_IT+0xc4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d01d      	beq.n	80027ea <HAL_TIM_Base_Start_IT+0x76>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b6:	d018      	beq.n	80027ea <HAL_TIM_Base_Start_IT+0x76>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a1f      	ldr	r2, [pc, #124]	; (800283c <HAL_TIM_Base_Start_IT+0xc8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d013      	beq.n	80027ea <HAL_TIM_Base_Start_IT+0x76>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a1e      	ldr	r2, [pc, #120]	; (8002840 <HAL_TIM_Base_Start_IT+0xcc>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00e      	beq.n	80027ea <HAL_TIM_Base_Start_IT+0x76>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1c      	ldr	r2, [pc, #112]	; (8002844 <HAL_TIM_Base_Start_IT+0xd0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d009      	beq.n	80027ea <HAL_TIM_Base_Start_IT+0x76>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a1b      	ldr	r2, [pc, #108]	; (8002848 <HAL_TIM_Base_Start_IT+0xd4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d004      	beq.n	80027ea <HAL_TIM_Base_Start_IT+0x76>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a19      	ldr	r2, [pc, #100]	; (800284c <HAL_TIM_Base_Start_IT+0xd8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d115      	bne.n	8002816 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	4b17      	ldr	r3, [pc, #92]	; (8002850 <HAL_TIM_Base_Start_IT+0xdc>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b06      	cmp	r3, #6
 80027fa:	d015      	beq.n	8002828 <HAL_TIM_Base_Start_IT+0xb4>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002802:	d011      	beq.n	8002828 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002814:	e008      	b.n	8002828 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0201 	orr.w	r2, r2, #1
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	e000      	b.n	800282a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002828:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	40012c00 	.word	0x40012c00
 800283c:	40000400 	.word	0x40000400
 8002840:	40000800 	.word	0x40000800
 8002844:	40000c00 	.word	0x40000c00
 8002848:	40013400 	.word	0x40013400
 800284c:	40014000 	.word	0x40014000
 8002850:	00010007 	.word	0x00010007

08002854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b02      	cmp	r3, #2
 8002868:	d122      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b02      	cmp	r3, #2
 8002876:	d11b      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0202 	mvn.w	r2, #2
 8002880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f905 	bl	8002aa6 <HAL_TIM_IC_CaptureCallback>
 800289c:	e005      	b.n	80028aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f8f7 	bl	8002a92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f908 	bl	8002aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d122      	bne.n	8002904 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d11b      	bne.n	8002904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0204 	mvn.w	r2, #4
 80028d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2202      	movs	r2, #2
 80028da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f8db 	bl	8002aa6 <HAL_TIM_IC_CaptureCallback>
 80028f0:	e005      	b.n	80028fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f8cd 	bl	8002a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f8de 	bl	8002aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b08      	cmp	r3, #8
 8002910:	d122      	bne.n	8002958 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b08      	cmp	r3, #8
 800291e:	d11b      	bne.n	8002958 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0208 	mvn.w	r2, #8
 8002928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2204      	movs	r2, #4
 800292e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f8b1 	bl	8002aa6 <HAL_TIM_IC_CaptureCallback>
 8002944:	e005      	b.n	8002952 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f8a3 	bl	8002a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f8b4 	bl	8002aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b10      	cmp	r3, #16
 8002964:	d122      	bne.n	80029ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	2b10      	cmp	r3, #16
 8002972:	d11b      	bne.n	80029ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0210 	mvn.w	r2, #16
 800297c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2208      	movs	r2, #8
 8002982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f887 	bl	8002aa6 <HAL_TIM_IC_CaptureCallback>
 8002998:	e005      	b.n	80029a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f879 	bl	8002a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f88a 	bl	8002aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d10e      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d107      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0201 	mvn.w	r2, #1
 80029d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7fd fec8 	bl	8000768 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e2:	2b80      	cmp	r3, #128	; 0x80
 80029e4:	d10e      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f0:	2b80      	cmp	r3, #128	; 0x80
 80029f2:	d107      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f914 	bl	8002c2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a12:	d10e      	bne.n	8002a32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1e:	2b80      	cmp	r3, #128	; 0x80
 8002a20:	d107      	bne.n	8002a32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f907 	bl	8002c40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3c:	2b40      	cmp	r3, #64	; 0x40
 8002a3e:	d10e      	bne.n	8002a5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4a:	2b40      	cmp	r3, #64	; 0x40
 8002a4c:	d107      	bne.n	8002a5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f838 	bl	8002ace <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	d10e      	bne.n	8002a8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	2b20      	cmp	r3, #32
 8002a78:	d107      	bne.n	8002a8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f06f 0220 	mvn.w	r2, #32
 8002a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f8c7 	bl	8002c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a40      	ldr	r2, [pc, #256]	; (8002bf8 <TIM_Base_SetConfig+0x114>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d013      	beq.n	8002b24 <TIM_Base_SetConfig+0x40>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b02:	d00f      	beq.n	8002b24 <TIM_Base_SetConfig+0x40>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a3d      	ldr	r2, [pc, #244]	; (8002bfc <TIM_Base_SetConfig+0x118>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00b      	beq.n	8002b24 <TIM_Base_SetConfig+0x40>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a3c      	ldr	r2, [pc, #240]	; (8002c00 <TIM_Base_SetConfig+0x11c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d007      	beq.n	8002b24 <TIM_Base_SetConfig+0x40>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a3b      	ldr	r2, [pc, #236]	; (8002c04 <TIM_Base_SetConfig+0x120>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d003      	beq.n	8002b24 <TIM_Base_SetConfig+0x40>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a3a      	ldr	r2, [pc, #232]	; (8002c08 <TIM_Base_SetConfig+0x124>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d108      	bne.n	8002b36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a2f      	ldr	r2, [pc, #188]	; (8002bf8 <TIM_Base_SetConfig+0x114>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d01f      	beq.n	8002b7e <TIM_Base_SetConfig+0x9a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b44:	d01b      	beq.n	8002b7e <TIM_Base_SetConfig+0x9a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a2c      	ldr	r2, [pc, #176]	; (8002bfc <TIM_Base_SetConfig+0x118>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d017      	beq.n	8002b7e <TIM_Base_SetConfig+0x9a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a2b      	ldr	r2, [pc, #172]	; (8002c00 <TIM_Base_SetConfig+0x11c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d013      	beq.n	8002b7e <TIM_Base_SetConfig+0x9a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a2a      	ldr	r2, [pc, #168]	; (8002c04 <TIM_Base_SetConfig+0x120>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00f      	beq.n	8002b7e <TIM_Base_SetConfig+0x9a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a29      	ldr	r2, [pc, #164]	; (8002c08 <TIM_Base_SetConfig+0x124>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00b      	beq.n	8002b7e <TIM_Base_SetConfig+0x9a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a28      	ldr	r2, [pc, #160]	; (8002c0c <TIM_Base_SetConfig+0x128>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d007      	beq.n	8002b7e <TIM_Base_SetConfig+0x9a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a27      	ldr	r2, [pc, #156]	; (8002c10 <TIM_Base_SetConfig+0x12c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d003      	beq.n	8002b7e <TIM_Base_SetConfig+0x9a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a26      	ldr	r2, [pc, #152]	; (8002c14 <TIM_Base_SetConfig+0x130>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d108      	bne.n	8002b90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a10      	ldr	r2, [pc, #64]	; (8002bf8 <TIM_Base_SetConfig+0x114>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d00f      	beq.n	8002bdc <TIM_Base_SetConfig+0xf8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <TIM_Base_SetConfig+0x124>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d00b      	beq.n	8002bdc <TIM_Base_SetConfig+0xf8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a11      	ldr	r2, [pc, #68]	; (8002c0c <TIM_Base_SetConfig+0x128>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d007      	beq.n	8002bdc <TIM_Base_SetConfig+0xf8>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a10      	ldr	r2, [pc, #64]	; (8002c10 <TIM_Base_SetConfig+0x12c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d003      	beq.n	8002bdc <TIM_Base_SetConfig+0xf8>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <TIM_Base_SetConfig+0x130>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d103      	bne.n	8002be4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	615a      	str	r2, [r3, #20]
}
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40012c00 	.word	0x40012c00
 8002bfc:	40000400 	.word	0x40000400
 8002c00:	40000800 	.word	0x40000800
 8002c04:	40000c00 	.word	0x40000c00
 8002c08:	40013400 	.word	0x40013400
 8002c0c:	40014000 	.word	0x40014000
 8002c10:	40014400 	.word	0x40014400
 8002c14:	40014800 	.word	0x40014800

08002c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e040      	b.n	8002ce8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fd fdb2 	bl	80007e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2224      	movs	r2, #36	; 0x24
 8002c80:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0201 	bic.w	r2, r2, #1
 8002c90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f82c 	bl	8002cf0 <UART_SetConfig>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e022      	b.n	8002ce8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fad8 	bl	8003260 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fb5f 	bl	80033a4 <UART_CheckIdleState>
 8002ce6:	4603      	mov	r3, r0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cf4:	b08a      	sub	sp, #40	; 0x28
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4ba4      	ldr	r3, [pc, #656]	; (8002fb0 <UART_SetConfig+0x2c0>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	6812      	ldr	r2, [r2, #0]
 8002d26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a99      	ldr	r2, [pc, #612]	; (8002fb4 <UART_SetConfig+0x2c4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d004      	beq.n	8002d5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a90      	ldr	r2, [pc, #576]	; (8002fb8 <UART_SetConfig+0x2c8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d126      	bne.n	8002dc8 <UART_SetConfig+0xd8>
 8002d7a:	4b90      	ldr	r3, [pc, #576]	; (8002fbc <UART_SetConfig+0x2cc>)
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d81b      	bhi.n	8002dc0 <UART_SetConfig+0xd0>
 8002d88:	a201      	add	r2, pc, #4	; (adr r2, 8002d90 <UART_SetConfig+0xa0>)
 8002d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8e:	bf00      	nop
 8002d90:	08002da1 	.word	0x08002da1
 8002d94:	08002db1 	.word	0x08002db1
 8002d98:	08002da9 	.word	0x08002da9
 8002d9c:	08002db9 	.word	0x08002db9
 8002da0:	2301      	movs	r3, #1
 8002da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002da6:	e116      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002da8:	2302      	movs	r3, #2
 8002daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dae:	e112      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002db0:	2304      	movs	r3, #4
 8002db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002db6:	e10e      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002db8:	2308      	movs	r3, #8
 8002dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dbe:	e10a      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002dc0:	2310      	movs	r3, #16
 8002dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dc6:	e106      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a7c      	ldr	r2, [pc, #496]	; (8002fc0 <UART_SetConfig+0x2d0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d138      	bne.n	8002e44 <UART_SetConfig+0x154>
 8002dd2:	4b7a      	ldr	r3, [pc, #488]	; (8002fbc <UART_SetConfig+0x2cc>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd8:	f003 030c 	and.w	r3, r3, #12
 8002ddc:	2b0c      	cmp	r3, #12
 8002dde:	d82d      	bhi.n	8002e3c <UART_SetConfig+0x14c>
 8002de0:	a201      	add	r2, pc, #4	; (adr r2, 8002de8 <UART_SetConfig+0xf8>)
 8002de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de6:	bf00      	nop
 8002de8:	08002e1d 	.word	0x08002e1d
 8002dec:	08002e3d 	.word	0x08002e3d
 8002df0:	08002e3d 	.word	0x08002e3d
 8002df4:	08002e3d 	.word	0x08002e3d
 8002df8:	08002e2d 	.word	0x08002e2d
 8002dfc:	08002e3d 	.word	0x08002e3d
 8002e00:	08002e3d 	.word	0x08002e3d
 8002e04:	08002e3d 	.word	0x08002e3d
 8002e08:	08002e25 	.word	0x08002e25
 8002e0c:	08002e3d 	.word	0x08002e3d
 8002e10:	08002e3d 	.word	0x08002e3d
 8002e14:	08002e3d 	.word	0x08002e3d
 8002e18:	08002e35 	.word	0x08002e35
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e22:	e0d8      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002e24:	2302      	movs	r3, #2
 8002e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e2a:	e0d4      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002e2c:	2304      	movs	r3, #4
 8002e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e32:	e0d0      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002e34:	2308      	movs	r3, #8
 8002e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e3a:	e0cc      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002e3c:	2310      	movs	r3, #16
 8002e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e42:	e0c8      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a5e      	ldr	r2, [pc, #376]	; (8002fc4 <UART_SetConfig+0x2d4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d125      	bne.n	8002e9a <UART_SetConfig+0x1aa>
 8002e4e:	4b5b      	ldr	r3, [pc, #364]	; (8002fbc <UART_SetConfig+0x2cc>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e58:	2b30      	cmp	r3, #48	; 0x30
 8002e5a:	d016      	beq.n	8002e8a <UART_SetConfig+0x19a>
 8002e5c:	2b30      	cmp	r3, #48	; 0x30
 8002e5e:	d818      	bhi.n	8002e92 <UART_SetConfig+0x1a2>
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d00a      	beq.n	8002e7a <UART_SetConfig+0x18a>
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d814      	bhi.n	8002e92 <UART_SetConfig+0x1a2>
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <UART_SetConfig+0x182>
 8002e6c:	2b10      	cmp	r3, #16
 8002e6e:	d008      	beq.n	8002e82 <UART_SetConfig+0x192>
 8002e70:	e00f      	b.n	8002e92 <UART_SetConfig+0x1a2>
 8002e72:	2300      	movs	r3, #0
 8002e74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e78:	e0ad      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e80:	e0a9      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002e82:	2304      	movs	r3, #4
 8002e84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e88:	e0a5      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002e8a:	2308      	movs	r3, #8
 8002e8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e90:	e0a1      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002e92:	2310      	movs	r3, #16
 8002e94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e98:	e09d      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a4a      	ldr	r2, [pc, #296]	; (8002fc8 <UART_SetConfig+0x2d8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d125      	bne.n	8002ef0 <UART_SetConfig+0x200>
 8002ea4:	4b45      	ldr	r3, [pc, #276]	; (8002fbc <UART_SetConfig+0x2cc>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002eae:	2bc0      	cmp	r3, #192	; 0xc0
 8002eb0:	d016      	beq.n	8002ee0 <UART_SetConfig+0x1f0>
 8002eb2:	2bc0      	cmp	r3, #192	; 0xc0
 8002eb4:	d818      	bhi.n	8002ee8 <UART_SetConfig+0x1f8>
 8002eb6:	2b80      	cmp	r3, #128	; 0x80
 8002eb8:	d00a      	beq.n	8002ed0 <UART_SetConfig+0x1e0>
 8002eba:	2b80      	cmp	r3, #128	; 0x80
 8002ebc:	d814      	bhi.n	8002ee8 <UART_SetConfig+0x1f8>
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <UART_SetConfig+0x1d8>
 8002ec2:	2b40      	cmp	r3, #64	; 0x40
 8002ec4:	d008      	beq.n	8002ed8 <UART_SetConfig+0x1e8>
 8002ec6:	e00f      	b.n	8002ee8 <UART_SetConfig+0x1f8>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ece:	e082      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ed6:	e07e      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002ed8:	2304      	movs	r3, #4
 8002eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ede:	e07a      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002ee0:	2308      	movs	r3, #8
 8002ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ee6:	e076      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002ee8:	2310      	movs	r3, #16
 8002eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eee:	e072      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a35      	ldr	r2, [pc, #212]	; (8002fcc <UART_SetConfig+0x2dc>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d12a      	bne.n	8002f50 <UART_SetConfig+0x260>
 8002efa:	4b30      	ldr	r3, [pc, #192]	; (8002fbc <UART_SetConfig+0x2cc>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f08:	d01a      	beq.n	8002f40 <UART_SetConfig+0x250>
 8002f0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f0e:	d81b      	bhi.n	8002f48 <UART_SetConfig+0x258>
 8002f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f14:	d00c      	beq.n	8002f30 <UART_SetConfig+0x240>
 8002f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f1a:	d815      	bhi.n	8002f48 <UART_SetConfig+0x258>
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <UART_SetConfig+0x238>
 8002f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f24:	d008      	beq.n	8002f38 <UART_SetConfig+0x248>
 8002f26:	e00f      	b.n	8002f48 <UART_SetConfig+0x258>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f2e:	e052      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002f30:	2302      	movs	r3, #2
 8002f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f36:	e04e      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002f38:	2304      	movs	r3, #4
 8002f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f3e:	e04a      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002f40:	2308      	movs	r3, #8
 8002f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f46:	e046      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002f48:	2310      	movs	r3, #16
 8002f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f4e:	e042      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a17      	ldr	r2, [pc, #92]	; (8002fb4 <UART_SetConfig+0x2c4>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d13a      	bne.n	8002fd0 <UART_SetConfig+0x2e0>
 8002f5a:	4b18      	ldr	r3, [pc, #96]	; (8002fbc <UART_SetConfig+0x2cc>)
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f68:	d01a      	beq.n	8002fa0 <UART_SetConfig+0x2b0>
 8002f6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f6e:	d81b      	bhi.n	8002fa8 <UART_SetConfig+0x2b8>
 8002f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f74:	d00c      	beq.n	8002f90 <UART_SetConfig+0x2a0>
 8002f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f7a:	d815      	bhi.n	8002fa8 <UART_SetConfig+0x2b8>
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <UART_SetConfig+0x298>
 8002f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f84:	d008      	beq.n	8002f98 <UART_SetConfig+0x2a8>
 8002f86:	e00f      	b.n	8002fa8 <UART_SetConfig+0x2b8>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f8e:	e022      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002f90:	2302      	movs	r3, #2
 8002f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f96:	e01e      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002f98:	2304      	movs	r3, #4
 8002f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f9e:	e01a      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002fa0:	2308      	movs	r3, #8
 8002fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fa6:	e016      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002fa8:	2310      	movs	r3, #16
 8002faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fae:	e012      	b.n	8002fd6 <UART_SetConfig+0x2e6>
 8002fb0:	efff69f3 	.word	0xefff69f3
 8002fb4:	40008000 	.word	0x40008000
 8002fb8:	40013800 	.word	0x40013800
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40004400 	.word	0x40004400
 8002fc4:	40004800 	.word	0x40004800
 8002fc8:	40004c00 	.word	0x40004c00
 8002fcc:	40005000 	.word	0x40005000
 8002fd0:	2310      	movs	r3, #16
 8002fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a9f      	ldr	r2, [pc, #636]	; (8003258 <UART_SetConfig+0x568>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d17a      	bne.n	80030d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fe0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d824      	bhi.n	8003032 <UART_SetConfig+0x342>
 8002fe8:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <UART_SetConfig+0x300>)
 8002fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fee:	bf00      	nop
 8002ff0:	08003015 	.word	0x08003015
 8002ff4:	08003033 	.word	0x08003033
 8002ff8:	0800301d 	.word	0x0800301d
 8002ffc:	08003033 	.word	0x08003033
 8003000:	08003023 	.word	0x08003023
 8003004:	08003033 	.word	0x08003033
 8003008:	08003033 	.word	0x08003033
 800300c:	08003033 	.word	0x08003033
 8003010:	0800302b 	.word	0x0800302b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003014:	f7fe fdd2 	bl	8001bbc <HAL_RCC_GetPCLK1Freq>
 8003018:	61f8      	str	r0, [r7, #28]
        break;
 800301a:	e010      	b.n	800303e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800301c:	4b8f      	ldr	r3, [pc, #572]	; (800325c <UART_SetConfig+0x56c>)
 800301e:	61fb      	str	r3, [r7, #28]
        break;
 8003020:	e00d      	b.n	800303e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003022:	f7fe fd33 	bl	8001a8c <HAL_RCC_GetSysClockFreq>
 8003026:	61f8      	str	r0, [r7, #28]
        break;
 8003028:	e009      	b.n	800303e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800302a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800302e:	61fb      	str	r3, [r7, #28]
        break;
 8003030:	e005      	b.n	800303e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800303c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80fb 	beq.w	800323c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	4413      	add	r3, r2
 8003050:	69fa      	ldr	r2, [r7, #28]
 8003052:	429a      	cmp	r2, r3
 8003054:	d305      	bcc.n	8003062 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	429a      	cmp	r2, r3
 8003060:	d903      	bls.n	800306a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003068:	e0e8      	b.n	800323c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	2200      	movs	r2, #0
 800306e:	461c      	mov	r4, r3
 8003070:	4615      	mov	r5, r2
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	022b      	lsls	r3, r5, #8
 800307c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003080:	0222      	lsls	r2, r4, #8
 8003082:	68f9      	ldr	r1, [r7, #12]
 8003084:	6849      	ldr	r1, [r1, #4]
 8003086:	0849      	lsrs	r1, r1, #1
 8003088:	2000      	movs	r0, #0
 800308a:	4688      	mov	r8, r1
 800308c:	4681      	mov	r9, r0
 800308e:	eb12 0a08 	adds.w	sl, r2, r8
 8003092:	eb43 0b09 	adc.w	fp, r3, r9
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	603b      	str	r3, [r7, #0]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030a4:	4650      	mov	r0, sl
 80030a6:	4659      	mov	r1, fp
 80030a8:	f7fd f892 	bl	80001d0 <__aeabi_uldivmod>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4613      	mov	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ba:	d308      	bcc.n	80030ce <UART_SetConfig+0x3de>
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030c2:	d204      	bcs.n	80030ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	60da      	str	r2, [r3, #12]
 80030cc:	e0b6      	b.n	800323c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80030d4:	e0b2      	b.n	800323c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030de:	d15e      	bne.n	800319e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80030e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d828      	bhi.n	800313a <UART_SetConfig+0x44a>
 80030e8:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <UART_SetConfig+0x400>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003115 	.word	0x08003115
 80030f4:	0800311d 	.word	0x0800311d
 80030f8:	08003125 	.word	0x08003125
 80030fc:	0800313b 	.word	0x0800313b
 8003100:	0800312b 	.word	0x0800312b
 8003104:	0800313b 	.word	0x0800313b
 8003108:	0800313b 	.word	0x0800313b
 800310c:	0800313b 	.word	0x0800313b
 8003110:	08003133 	.word	0x08003133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003114:	f7fe fd52 	bl	8001bbc <HAL_RCC_GetPCLK1Freq>
 8003118:	61f8      	str	r0, [r7, #28]
        break;
 800311a:	e014      	b.n	8003146 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800311c:	f7fe fd64 	bl	8001be8 <HAL_RCC_GetPCLK2Freq>
 8003120:	61f8      	str	r0, [r7, #28]
        break;
 8003122:	e010      	b.n	8003146 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003124:	4b4d      	ldr	r3, [pc, #308]	; (800325c <UART_SetConfig+0x56c>)
 8003126:	61fb      	str	r3, [r7, #28]
        break;
 8003128:	e00d      	b.n	8003146 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800312a:	f7fe fcaf 	bl	8001a8c <HAL_RCC_GetSysClockFreq>
 800312e:	61f8      	str	r0, [r7, #28]
        break;
 8003130:	e009      	b.n	8003146 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003136:	61fb      	str	r3, [r7, #28]
        break;
 8003138:	e005      	b.n	8003146 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003144:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d077      	beq.n	800323c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	005a      	lsls	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	085b      	lsrs	r3, r3, #1
 8003156:	441a      	add	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003160:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	2b0f      	cmp	r3, #15
 8003166:	d916      	bls.n	8003196 <UART_SetConfig+0x4a6>
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316e:	d212      	bcs.n	8003196 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	b29b      	uxth	r3, r3
 8003174:	f023 030f 	bic.w	r3, r3, #15
 8003178:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	b29b      	uxth	r3, r3
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	b29a      	uxth	r2, r3
 8003186:	8afb      	ldrh	r3, [r7, #22]
 8003188:	4313      	orrs	r3, r2
 800318a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	8afa      	ldrh	r2, [r7, #22]
 8003192:	60da      	str	r2, [r3, #12]
 8003194:	e052      	b.n	800323c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800319c:	e04e      	b.n	800323c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800319e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d827      	bhi.n	80031f6 <UART_SetConfig+0x506>
 80031a6:	a201      	add	r2, pc, #4	; (adr r2, 80031ac <UART_SetConfig+0x4bc>)
 80031a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ac:	080031d1 	.word	0x080031d1
 80031b0:	080031d9 	.word	0x080031d9
 80031b4:	080031e1 	.word	0x080031e1
 80031b8:	080031f7 	.word	0x080031f7
 80031bc:	080031e7 	.word	0x080031e7
 80031c0:	080031f7 	.word	0x080031f7
 80031c4:	080031f7 	.word	0x080031f7
 80031c8:	080031f7 	.word	0x080031f7
 80031cc:	080031ef 	.word	0x080031ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031d0:	f7fe fcf4 	bl	8001bbc <HAL_RCC_GetPCLK1Freq>
 80031d4:	61f8      	str	r0, [r7, #28]
        break;
 80031d6:	e014      	b.n	8003202 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031d8:	f7fe fd06 	bl	8001be8 <HAL_RCC_GetPCLK2Freq>
 80031dc:	61f8      	str	r0, [r7, #28]
        break;
 80031de:	e010      	b.n	8003202 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031e0:	4b1e      	ldr	r3, [pc, #120]	; (800325c <UART_SetConfig+0x56c>)
 80031e2:	61fb      	str	r3, [r7, #28]
        break;
 80031e4:	e00d      	b.n	8003202 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031e6:	f7fe fc51 	bl	8001a8c <HAL_RCC_GetSysClockFreq>
 80031ea:	61f8      	str	r0, [r7, #28]
        break;
 80031ec:	e009      	b.n	8003202 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031f2:	61fb      	str	r3, [r7, #28]
        break;
 80031f4:	e005      	b.n	8003202 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003200:	bf00      	nop
    }

    if (pclk != 0U)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d019      	beq.n	800323c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	085a      	lsrs	r2, r3, #1
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	441a      	add	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	fbb2 f3f3 	udiv	r3, r2, r3
 800321a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	2b0f      	cmp	r3, #15
 8003220:	d909      	bls.n	8003236 <UART_SetConfig+0x546>
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003228:	d205      	bcs.n	8003236 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60da      	str	r2, [r3, #12]
 8003234:	e002      	b.n	800323c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003248:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800324c:	4618      	mov	r0, r3
 800324e:	3728      	adds	r7, #40	; 0x28
 8003250:	46bd      	mov	sp, r7
 8003252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003256:	bf00      	nop
 8003258:	40008000 	.word	0x40008000
 800325c:	00f42400 	.word	0x00f42400

08003260 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	f003 0320 	and.w	r3, r3, #32
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01a      	beq.n	8003376 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800335e:	d10a      	bne.n	8003376 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	605a      	str	r2, [r3, #4]
  }
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033b4:	f7fd fb7a 	bl	8000aac <HAL_GetTick>
 80033b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d10e      	bne.n	80033e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f82d 	bl	8003436 <UART_WaitOnFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e023      	b.n	800342e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d10e      	bne.n	8003412 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f817 	bl	8003436 <UART_WaitOnFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e00d      	b.n	800342e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2220      	movs	r2, #32
 8003416:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2220      	movs	r2, #32
 800341c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b09c      	sub	sp, #112	; 0x70
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	603b      	str	r3, [r7, #0]
 8003442:	4613      	mov	r3, r2
 8003444:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003446:	e0a5      	b.n	8003594 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800344a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344e:	f000 80a1 	beq.w	8003594 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003452:	f7fd fb2b 	bl	8000aac <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800345e:	429a      	cmp	r2, r3
 8003460:	d302      	bcc.n	8003468 <UART_WaitOnFlagUntilTimeout+0x32>
 8003462:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003464:	2b00      	cmp	r3, #0
 8003466:	d13e      	bne.n	80034e6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003470:	e853 3f00 	ldrex	r3, [r3]
 8003474:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003478:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800347c:	667b      	str	r3, [r7, #100]	; 0x64
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003486:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003488:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800348c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800348e:	e841 2300 	strex	r3, r2, [r1]
 8003492:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e6      	bne.n	8003468 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3308      	adds	r3, #8
 80034a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a4:	e853 3f00 	ldrex	r3, [r3]
 80034a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	663b      	str	r3, [r7, #96]	; 0x60
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3308      	adds	r3, #8
 80034b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80034bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80034c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034c2:	e841 2300 	strex	r3, r2, [r1]
 80034c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80034c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1e5      	bne.n	800349a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2220      	movs	r2, #32
 80034d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e067      	b.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d04f      	beq.n	8003594 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003502:	d147      	bne.n	8003594 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800350c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003516:	e853 3f00 	ldrex	r3, [r3]
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003522:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352c:	637b      	str	r3, [r7, #52]	; 0x34
 800352e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003530:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003534:	e841 2300 	strex	r3, r2, [r1]
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800353a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e6      	bne.n	800350e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3308      	adds	r3, #8
 8003546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	613b      	str	r3, [r7, #16]
   return(result);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f023 0301 	bic.w	r3, r3, #1
 8003556:	66bb      	str	r3, [r7, #104]	; 0x68
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3308      	adds	r3, #8
 800355e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003560:	623a      	str	r2, [r7, #32]
 8003562:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003564:	69f9      	ldr	r1, [r7, #28]
 8003566:	6a3a      	ldr	r2, [r7, #32]
 8003568:	e841 2300 	strex	r3, r2, [r1]
 800356c:	61bb      	str	r3, [r7, #24]
   return(result);
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1e5      	bne.n	8003540 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2220      	movs	r2, #32
 8003578:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e010      	b.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69da      	ldr	r2, [r3, #28]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4013      	ands	r3, r2
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	bf0c      	ite	eq
 80035a4:	2301      	moveq	r3, #1
 80035a6:	2300      	movne	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	f43f af4a 	beq.w	8003448 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3770      	adds	r7, #112	; 0x70
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f103 0208 	add.w	r2, r3, #8
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f04f 32ff 	mov.w	r2, #4294967295
 80035d6:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f103 0208 	add.w	r2, r3, #8
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f103 0208 	add.w	r2, r3, #8
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	601a      	str	r2, [r3, #0]
}
 8003654:	bf00      	nop
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	d103      	bne.n	8003680 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	e00c      	b.n	800369a <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3308      	adds	r3, #8
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	e002      	b.n	800368e <vListInsert+0x2e>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	429a      	cmp	r2, r3
 8003698:	d2f6      	bcs.n	8003688 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	601a      	str	r2, [r3, #0]
}
 80036c6:	bf00      	nop
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036d2:	b480      	push	{r7}
 80036d4:	b085      	sub	sp, #20
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6892      	ldr	r2, [r2, #8]
 80036e8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6852      	ldr	r2, [r2, #4]
 80036f2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d103      	bne.n	8003706 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	1e5a      	subs	r2, r3, #1
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10a      	bne.n	8003750 <xQueueGenericReset+0x2a>
        __asm volatile
 800373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373e:	f383 8811 	msr	BASEPRI, r3
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	60bb      	str	r3, [r7, #8]
    }
 800374c:	bf00      	nop
 800374e:	e7fe      	b.n	800374e <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003750:	f001 fee2 	bl	8005518 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375c:	68f9      	ldr	r1, [r7, #12]
 800375e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	441a      	add	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003780:	3b01      	subs	r3, #1
 8003782:	68f9      	ldr	r1, [r7, #12]
 8003784:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003786:	fb01 f303 	mul.w	r3, r1, r3
 800378a:	441a      	add	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	22ff      	movs	r2, #255	; 0xff
 8003794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	22ff      	movs	r2, #255	; 0xff
 800379c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d109      	bne.n	80037ba <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00f      	beq.n	80037ce <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	3310      	adds	r3, #16
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 ffde 	bl	8004774 <xTaskRemoveFromEventList>
 80037b8:	e009      	b.n	80037ce <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	3310      	adds	r3, #16
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff fefd 	bl	80035be <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	3324      	adds	r3, #36	; 0x24
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fef8 	bl	80035be <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80037ce:	f001 fed3 	bl	8005578 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80037d2:	2301      	movs	r3, #1
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08c      	sub	sp, #48	; 0x30
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	4613      	mov	r3, r2
 80037e8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10a      	bne.n	8003806 <xQueueGenericCreate+0x2a>
        __asm volatile
 80037f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	61bb      	str	r3, [r7, #24]
    }
 8003802:	bf00      	nop
 8003804:	e7fe      	b.n	8003804 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d006      	beq.n	8003824 <xQueueGenericCreate+0x48>
 8003816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	fbb2 f3f3 	udiv	r3, r2, r3
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	429a      	cmp	r2, r3
 8003822:	d101      	bne.n	8003828 <xQueueGenericCreate+0x4c>
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <xQueueGenericCreate+0x4e>
 8003828:	2300      	movs	r3, #0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10a      	bne.n	8003844 <xQueueGenericCreate+0x68>
        __asm volatile
 800382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	617b      	str	r3, [r7, #20]
    }
 8003840:	bf00      	nop
 8003842:	e7fe      	b.n	8003842 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800384a:	d90a      	bls.n	8003862 <xQueueGenericCreate+0x86>
        __asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	613b      	str	r3, [r7, #16]
    }
 800385e:	bf00      	nop
 8003860:	e7fe      	b.n	8003860 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	3350      	adds	r3, #80	; 0x50
 8003866:	4618      	mov	r0, r3
 8003868:	f001 ff78 	bl	800575c <pvPortMalloc>
 800386c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00d      	beq.n	8003890 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	3350      	adds	r3, #80	; 0x50
 800387c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800387e:	79fa      	ldrb	r2, [r7, #7]
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	4613      	mov	r3, r2
 8003886:	69fa      	ldr	r2, [r7, #28]
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f805 	bl	800389a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003890:	6a3b      	ldr	r3, [r7, #32]
    }
 8003892:	4618      	mov	r0, r3
 8003894:	3728      	adds	r7, #40	; 0x28
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	607a      	str	r2, [r7, #4]
 80038a6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d103      	bne.n	80038b6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	e002      	b.n	80038bc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038c8:	2101      	movs	r1, #1
 80038ca:	69b8      	ldr	r0, [r7, #24]
 80038cc:	f7ff ff2b 	bl	8003726 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	78fa      	ldrb	r2, [r7, #3]
 80038d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80038d8:	bf00      	nop
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08e      	sub	sp, #56	; 0x38
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038ee:	2300      	movs	r3, #0
 80038f0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80038f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <xQueueGenericSend+0x32>
        __asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800390e:	bf00      	nop
 8003910:	e7fe      	b.n	8003910 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d103      	bne.n	8003920 <xQueueGenericSend+0x40>
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <xQueueGenericSend+0x44>
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <xQueueGenericSend+0x46>
 8003924:	2300      	movs	r3, #0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10a      	bne.n	8003940 <xQueueGenericSend+0x60>
        __asm volatile
 800392a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392e:	f383 8811 	msr	BASEPRI, r3
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800393c:	bf00      	nop
 800393e:	e7fe      	b.n	800393e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d103      	bne.n	800394e <xQueueGenericSend+0x6e>
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <xQueueGenericSend+0x72>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <xQueueGenericSend+0x74>
 8003952:	2300      	movs	r3, #0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <xQueueGenericSend+0x8e>
        __asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	623b      	str	r3, [r7, #32]
    }
 800396a:	bf00      	nop
 800396c:	e7fe      	b.n	800396c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800396e:	f001 f897 	bl	8004aa0 <xTaskGetSchedulerState>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <xQueueGenericSend+0x9e>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <xQueueGenericSend+0xa2>
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <xQueueGenericSend+0xa4>
 8003982:	2300      	movs	r3, #0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10a      	bne.n	800399e <xQueueGenericSend+0xbe>
        __asm volatile
 8003988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398c:	f383 8811 	msr	BASEPRI, r3
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	61fb      	str	r3, [r7, #28]
    }
 800399a:	bf00      	nop
 800399c:	e7fe      	b.n	800399c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800399e:	f001 fdbb 	bl	8005518 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d302      	bcc.n	80039b4 <xQueueGenericSend+0xd4>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d112      	bne.n	80039da <xQueueGenericSend+0xfa>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	68b9      	ldr	r1, [r7, #8]
 80039b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039ba:	f000 f9f5 	bl	8003da8 <prvCopyDataToQueue>
 80039be:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d004      	beq.n	80039d2 <xQueueGenericSend+0xf2>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	3324      	adds	r3, #36	; 0x24
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fed1 	bl	8004774 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80039d2:	f001 fdd1 	bl	8005578 <vPortExitCritical>
                return pdPASS;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e062      	b.n	8003aa0 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d103      	bne.n	80039e8 <xQueueGenericSend+0x108>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80039e0:	f001 fdca 	bl	8005578 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	e05b      	b.n	8003aa0 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80039e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <xQueueGenericSend+0x11c>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80039ee:	f107 0314 	add.w	r3, r7, #20
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 ff20 	bl	8004838 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80039f8:	2301      	movs	r3, #1
 80039fa:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80039fc:	f001 fdbc 	bl	8005578 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003a00:	f000 fcca 	bl	8004398 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003a04:	f001 fd88 	bl	8005518 <vPortEnterCritical>
 8003a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a0e:	b25b      	sxtb	r3, r3
 8003a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a14:	d103      	bne.n	8003a1e <xQueueGenericSend+0x13e>
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a24:	b25b      	sxtb	r3, r3
 8003a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2a:	d103      	bne.n	8003a34 <xQueueGenericSend+0x154>
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a34:	f001 fda0 	bl	8005578 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a38:	1d3a      	adds	r2, r7, #4
 8003a3a:	f107 0314 	add.w	r3, r7, #20
 8003a3e:	4611      	mov	r1, r2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 ff0f 	bl	8004864 <xTaskCheckForTimeOut>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d123      	bne.n	8003a94 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a4e:	f000 faa3 	bl	8003f98 <prvIsQueueFull>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d017      	beq.n	8003a88 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5a:	3310      	adds	r3, #16
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	4611      	mov	r1, r2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 fe37 	bl	80046d4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003a66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a68:	f000 fa2e 	bl	8003ec8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003a6c:	f000 fca2 	bl	80043b4 <xTaskResumeAll>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d193      	bne.n	800399e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003a76:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <xQueueGenericSend+0x1c8>)
 8003a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	e78a      	b.n	800399e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a8a:	f000 fa1d 	bl	8003ec8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003a8e:	f000 fc91 	bl	80043b4 <xTaskResumeAll>
 8003a92:	e784      	b.n	800399e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a96:	f000 fa17 	bl	8003ec8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003a9a:	f000 fc8b 	bl	80043b4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003a9e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3738      	adds	r7, #56	; 0x38
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	e000ed04 	.word	0xe000ed04

08003aac <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b090      	sub	sp, #64	; 0x40
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10a      	bne.n	8003ada <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003ad6:	bf00      	nop
 8003ad8:	e7fe      	b.n	8003ad8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d103      	bne.n	8003ae8 <xQueueGenericSendFromISR+0x3c>
 8003ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <xQueueGenericSendFromISR+0x40>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <xQueueGenericSendFromISR+0x42>
 8003aec:	2300      	movs	r3, #0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10a      	bne.n	8003b08 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003b04:	bf00      	nop
 8003b06:	e7fe      	b.n	8003b06 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d103      	bne.n	8003b16 <xQueueGenericSendFromISR+0x6a>
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <xQueueGenericSendFromISR+0x6e>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <xQueueGenericSendFromISR+0x70>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10a      	bne.n	8003b36 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	623b      	str	r3, [r7, #32]
    }
 8003b32:	bf00      	nop
 8003b34:	e7fe      	b.n	8003b34 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b36:	f001 fdd1 	bl	80056dc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003b3a:	f3ef 8211 	mrs	r2, BASEPRI
 8003b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	61fa      	str	r2, [r7, #28]
 8003b50:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003b52:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b54:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d302      	bcc.n	8003b68 <xQueueGenericSendFromISR+0xbc>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d13e      	bne.n	8003be6 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003b7e:	f000 f913 	bl	8003da8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003b82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8a:	d112      	bne.n	8003bb2 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d025      	beq.n	8003be0 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b96:	3324      	adds	r3, #36	; 0x24
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fdeb 	bl	8004774 <xTaskRemoveFromEventList>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01d      	beq.n	8003be0 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d01a      	beq.n	8003be0 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	e016      	b.n	8003be0 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003bb2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003bb6:	2b7f      	cmp	r3, #127	; 0x7f
 8003bb8:	d10a      	bne.n	8003bd0 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	617b      	str	r3, [r7, #20]
    }
 8003bcc:	bf00      	nop
 8003bce:	e7fe      	b.n	8003bce <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	b25a      	sxtb	r2, r3
 8003bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003be0:	2301      	movs	r3, #1
 8003be2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003be4:	e001      	b.n	8003bea <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bec:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003bf4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3740      	adds	r7, #64	; 0x40
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08c      	sub	sp, #48	; 0x30
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <xQueueReceive+0x30>
        __asm volatile
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	623b      	str	r3, [r7, #32]
    }
 8003c2c:	bf00      	nop
 8003c2e:	e7fe      	b.n	8003c2e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d103      	bne.n	8003c3e <xQueueReceive+0x3e>
 8003c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <xQueueReceive+0x42>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <xQueueReceive+0x44>
 8003c42:	2300      	movs	r3, #0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10a      	bne.n	8003c5e <xQueueReceive+0x5e>
        __asm volatile
 8003c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4c:	f383 8811 	msr	BASEPRI, r3
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	61fb      	str	r3, [r7, #28]
    }
 8003c5a:	bf00      	nop
 8003c5c:	e7fe      	b.n	8003c5c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c5e:	f000 ff1f 	bl	8004aa0 <xTaskGetSchedulerState>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d102      	bne.n	8003c6e <xQueueReceive+0x6e>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <xQueueReceive+0x72>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <xQueueReceive+0x74>
 8003c72:	2300      	movs	r3, #0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10a      	bne.n	8003c8e <xQueueReceive+0x8e>
        __asm volatile
 8003c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7c:	f383 8811 	msr	BASEPRI, r3
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	61bb      	str	r3, [r7, #24]
    }
 8003c8a:	bf00      	nop
 8003c8c:	e7fe      	b.n	8003c8c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003c8e:	f001 fc43 	bl	8005518 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d014      	beq.n	8003cc8 <xQueueReceive+0xc8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c9e:	68b9      	ldr	r1, [r7, #8]
 8003ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ca2:	f000 f8eb 	bl	8003e7c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	1e5a      	subs	r2, r3, #1
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cac:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d004      	beq.n	8003cc0 <xQueueReceive+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb8:	3310      	adds	r3, #16
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fd5a 	bl	8004774 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003cc0:	f001 fc5a 	bl	8005578 <vPortExitCritical>
                return pdPASS;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e069      	b.n	8003d9c <xQueueReceive+0x19c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d103      	bne.n	8003cd6 <xQueueReceive+0xd6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003cce:	f001 fc53 	bl	8005578 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e062      	b.n	8003d9c <xQueueReceive+0x19c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d106      	bne.n	8003cea <xQueueReceive+0xea>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003cdc:	f107 0310 	add.w	r3, r7, #16
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fda9 	bl	8004838 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003cea:	f001 fc45 	bl	8005578 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003cee:	f000 fb53 	bl	8004398 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003cf2:	f001 fc11 	bl	8005518 <vPortEnterCritical>
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cfc:	b25b      	sxtb	r3, r3
 8003cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d02:	d103      	bne.n	8003d0c <xQueueReceive+0x10c>
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d12:	b25b      	sxtb	r3, r3
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d18:	d103      	bne.n	8003d22 <xQueueReceive+0x122>
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d22:	f001 fc29 	bl	8005578 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d26:	1d3a      	adds	r2, r7, #4
 8003d28:	f107 0310 	add.w	r3, r7, #16
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fd98 	bl	8004864 <xTaskCheckForTimeOut>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d123      	bne.n	8003d82 <xQueueReceive+0x182>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d3c:	f000 f916 	bl	8003f6c <prvIsQueueEmpty>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d017      	beq.n	8003d76 <xQueueReceive+0x176>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d48:	3324      	adds	r3, #36	; 0x24
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fcc0 	bl	80046d4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d56:	f000 f8b7 	bl	8003ec8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003d5a:	f000 fb2b 	bl	80043b4 <xTaskResumeAll>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d194      	bne.n	8003c8e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003d64:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <xQueueReceive+0x1a4>)
 8003d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	e78b      	b.n	8003c8e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d78:	f000 f8a6 	bl	8003ec8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003d7c:	f000 fb1a 	bl	80043b4 <xTaskResumeAll>
 8003d80:	e785      	b.n	8003c8e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d84:	f000 f8a0 	bl	8003ec8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003d88:	f000 fb14 	bl	80043b4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d8e:	f000 f8ed 	bl	8003f6c <prvIsQueueEmpty>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f43f af7a 	beq.w	8003c8e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003d9a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3730      	adds	r7, #48	; 0x30
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	e000ed04 	.word	0xe000ed04

08003da8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10d      	bne.n	8003de2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d14d      	bne.n	8003e6a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fe82 	bl	8004adc <xTaskPriorityDisinherit>
 8003dd8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	609a      	str	r2, [r3, #8]
 8003de0:	e043      	b.n	8003e6a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d119      	bne.n	8003e1c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6858      	ldr	r0, [r3, #4]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	461a      	mov	r2, r3
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	f001 fed4 	bl	8005ba0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	441a      	add	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d32b      	bcc.n	8003e6a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	605a      	str	r2, [r3, #4]
 8003e1a:	e026      	b.n	8003e6a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	68d8      	ldr	r0, [r3, #12]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	461a      	mov	r2, r3
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	f001 feba 	bl	8005ba0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	425b      	negs	r3, r3
 8003e36:	441a      	add	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d207      	bcs.n	8003e58 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	425b      	negs	r3, r3
 8003e52:	441a      	add	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d105      	bne.n	8003e6a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003e72:	697b      	ldr	r3, [r7, #20]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d018      	beq.n	8003ec0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	441a      	add	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d303      	bcc.n	8003eb0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68d9      	ldr	r1, [r3, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	461a      	mov	r2, r3
 8003eba:	6838      	ldr	r0, [r7, #0]
 8003ebc:	f001 fe70 	bl	8005ba0 <memcpy>
    }
}
 8003ec0:	bf00      	nop
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003ed0:	f001 fb22 	bl	8005518 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eda:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003edc:	e011      	b.n	8003f02 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d012      	beq.n	8003f0c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3324      	adds	r3, #36	; 0x24
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fc42 	bl	8004774 <xTaskRemoveFromEventList>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003ef6:	f000 fd1b 	bl	8004930 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	dce9      	bgt.n	8003ede <prvUnlockQueue+0x16>
 8003f0a:	e000      	b.n	8003f0e <prvUnlockQueue+0x46>
                        break;
 8003f0c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	22ff      	movs	r2, #255	; 0xff
 8003f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003f16:	f001 fb2f 	bl	8005578 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003f1a:	f001 fafd 	bl	8005518 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f24:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f26:	e011      	b.n	8003f4c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d012      	beq.n	8003f56 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3310      	adds	r3, #16
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fc1d 	bl	8004774 <xTaskRemoveFromEventList>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003f40:	f000 fcf6 	bl	8004930 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003f44:	7bbb      	ldrb	r3, [r7, #14]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	dce9      	bgt.n	8003f28 <prvUnlockQueue+0x60>
 8003f54:	e000      	b.n	8003f58 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003f56:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	22ff      	movs	r2, #255	; 0xff
 8003f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003f60:	f001 fb0a 	bl	8005578 <vPortExitCritical>
}
 8003f64:	bf00      	nop
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003f74:	f001 fad0 	bl	8005518 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d102      	bne.n	8003f86 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003f80:	2301      	movs	r3, #1
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	e001      	b.n	8003f8a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003f8a:	f001 faf5 	bl	8005578 <vPortExitCritical>

    return xReturn;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003fa0:	f001 faba 	bl	8005518 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d102      	bne.n	8003fb6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	e001      	b.n	8003fba <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003fba:	f001 fadd 	bl	8005578 <vPortExitCritical>

    return xReturn;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	e014      	b.n	8004002 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003fd8:	4a0f      	ldr	r2, [pc, #60]	; (8004018 <vQueueAddToRegistry+0x50>)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10b      	bne.n	8003ffc <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003fe4:	490c      	ldr	r1, [pc, #48]	; (8004018 <vQueueAddToRegistry+0x50>)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003fee:	4a0a      	ldr	r2, [pc, #40]	; (8004018 <vQueueAddToRegistry+0x50>)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8003ffa:	e006      	b.n	800400a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3301      	adds	r3, #1
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b07      	cmp	r3, #7
 8004006:	d9e7      	bls.n	8003fd8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004008:	bf00      	nop
 800400a:	bf00      	nop
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	20000104 	.word	0x20000104

0800401c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800402c:	f001 fa74 	bl	8005518 <vPortEnterCritical>
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004036:	b25b      	sxtb	r3, r3
 8004038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403c:	d103      	bne.n	8004046 <vQueueWaitForMessageRestricted+0x2a>
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800404c:	b25b      	sxtb	r3, r3
 800404e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004052:	d103      	bne.n	800405c <vQueueWaitForMessageRestricted+0x40>
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800405c:	f001 fa8c 	bl	8005578 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	2b00      	cmp	r3, #0
 8004066:	d106      	bne.n	8004076 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	3324      	adds	r3, #36	; 0x24
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	68b9      	ldr	r1, [r7, #8]
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fb53 	bl	800471c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004076:	6978      	ldr	r0, [r7, #20]
 8004078:	f7ff ff26 	bl	8003ec8 <prvUnlockQueue>
    }
 800407c:	bf00      	nop
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004084:	b580      	push	{r7, lr}
 8004086:	b08c      	sub	sp, #48	; 0x30
 8004088:	af04      	add	r7, sp, #16
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	4613      	mov	r3, r2
 8004092:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004094:	88fb      	ldrh	r3, [r7, #6]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4618      	mov	r0, r3
 800409a:	f001 fb5f 	bl	800575c <pvPortMalloc>
 800409e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00e      	beq.n	80040c4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80040a6:	2058      	movs	r0, #88	; 0x58
 80040a8:	f001 fb58 	bl	800575c <pvPortMalloc>
 80040ac:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30
 80040ba:	e005      	b.n	80040c8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80040bc:	6978      	ldr	r0, [r7, #20]
 80040be:	f001 fc2d 	bl	800591c <vPortFree>
 80040c2:	e001      	b.n	80040c8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80040c4:	2300      	movs	r3, #0
 80040c6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d013      	beq.n	80040f6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040ce:	88fa      	ldrh	r2, [r7, #6]
 80040d0:	2300      	movs	r3, #0
 80040d2:	9303      	str	r3, [sp, #12]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	9302      	str	r3, [sp, #8]
 80040d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040da:	9301      	str	r3, [sp, #4]
 80040dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68b9      	ldr	r1, [r7, #8]
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f80e 	bl	8004106 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80040ea:	69f8      	ldr	r0, [r7, #28]
 80040ec:	f000 f8a2 	bl	8004234 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80040f0:	2301      	movs	r3, #1
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	e002      	b.n	80040fc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040f6:	f04f 33ff 	mov.w	r3, #4294967295
 80040fa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80040fc:	69bb      	ldr	r3, [r7, #24]
    }
 80040fe:	4618      	mov	r0, r3
 8004100:	3720      	adds	r7, #32
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b088      	sub	sp, #32
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	461a      	mov	r2, r3
 800411e:	21a5      	movs	r1, #165	; 0xa5
 8004120:	f001 fd4c 	bl	8005bbc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800412e:	3b01      	subs	r3, #1
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	f023 0307 	bic.w	r3, r3, #7
 800413c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <prvInitialiseNewTask+0x58>
        __asm volatile
 8004148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414c:	f383 8811 	msr	BASEPRI, r3
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	617b      	str	r3, [r7, #20]
    }
 800415a:	bf00      	nop
 800415c:	e7fe      	b.n	800415c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01f      	beq.n	80041a4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004164:	2300      	movs	r3, #0
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	e012      	b.n	8004190 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	4413      	add	r3, r2
 8004170:	7819      	ldrb	r1, [r3, #0]
 8004172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	4413      	add	r3, r2
 8004178:	3334      	adds	r3, #52	; 0x34
 800417a:	460a      	mov	r2, r1
 800417c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	4413      	add	r3, r2
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d006      	beq.n	8004198 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	3301      	adds	r3, #1
 800418e:	61fb      	str	r3, [r7, #28]
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	2b09      	cmp	r3, #9
 8004194:	d9e9      	bls.n	800416a <prvInitialiseNewTask+0x64>
 8004196:	e000      	b.n	800419a <prvInitialiseNewTask+0x94>
            {
                break;
 8004198:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80041a2:	e003      	b.n	80041ac <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80041a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80041ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d901      	bls.n	80041b6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80041b2:	2304      	movs	r3, #4
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ba:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041c0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	2200      	movs	r2, #0
 80041c6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80041c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ca:	3304      	adds	r3, #4
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff fa16 	bl	80035fe <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	3318      	adds	r3, #24
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fa11 	bl	80035fe <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e4:	f1c3 0205 	rsb	r2, r3, #5
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80041f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f4:	3350      	adds	r3, #80	; 0x50
 80041f6:	2204      	movs	r2, #4
 80041f8:	2100      	movs	r1, #0
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 fcde 	bl	8005bbc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004202:	3354      	adds	r3, #84	; 0x54
 8004204:	2201      	movs	r2, #1
 8004206:	2100      	movs	r1, #0
 8004208:	4618      	mov	r0, r3
 800420a:	f001 fcd7 	bl	8005bbc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	68f9      	ldr	r1, [r7, #12]
 8004212:	69b8      	ldr	r0, [r7, #24]
 8004214:	f001 f854 	bl	80052c0 <pxPortInitialiseStack>
 8004218:	4602      	mov	r2, r0
 800421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004228:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800422a:	bf00      	nop
 800422c:	3720      	adds	r7, #32
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
	...

08004234 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800423c:	f001 f96c 	bl	8005518 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004240:	4b26      	ldr	r3, [pc, #152]	; (80042dc <prvAddNewTaskToReadyList+0xa8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3301      	adds	r3, #1
 8004246:	4a25      	ldr	r2, [pc, #148]	; (80042dc <prvAddNewTaskToReadyList+0xa8>)
 8004248:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800424a:	4b25      	ldr	r3, [pc, #148]	; (80042e0 <prvAddNewTaskToReadyList+0xac>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d109      	bne.n	8004266 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004252:	4a23      	ldr	r2, [pc, #140]	; (80042e0 <prvAddNewTaskToReadyList+0xac>)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004258:	4b20      	ldr	r3, [pc, #128]	; (80042dc <prvAddNewTaskToReadyList+0xa8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d110      	bne.n	8004282 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004260:	f000 fb84 	bl	800496c <prvInitialiseTaskLists>
 8004264:	e00d      	b.n	8004282 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004266:	4b1f      	ldr	r3, [pc, #124]	; (80042e4 <prvAddNewTaskToReadyList+0xb0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d109      	bne.n	8004282 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800426e:	4b1c      	ldr	r3, [pc, #112]	; (80042e0 <prvAddNewTaskToReadyList+0xac>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	429a      	cmp	r2, r3
 800427a:	d802      	bhi.n	8004282 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800427c:	4a18      	ldr	r2, [pc, #96]	; (80042e0 <prvAddNewTaskToReadyList+0xac>)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004282:	4b19      	ldr	r3, [pc, #100]	; (80042e8 <prvAddNewTaskToReadyList+0xb4>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3301      	adds	r3, #1
 8004288:	4a17      	ldr	r2, [pc, #92]	; (80042e8 <prvAddNewTaskToReadyList+0xb4>)
 800428a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800428c:	4b16      	ldr	r3, [pc, #88]	; (80042e8 <prvAddNewTaskToReadyList+0xb4>)
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	2201      	movs	r2, #1
 800429a:	409a      	lsls	r2, r3
 800429c:	4b13      	ldr	r3, [pc, #76]	; (80042ec <prvAddNewTaskToReadyList+0xb8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	4a12      	ldr	r2, [pc, #72]	; (80042ec <prvAddNewTaskToReadyList+0xb8>)
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4a0f      	ldr	r2, [pc, #60]	; (80042f0 <prvAddNewTaskToReadyList+0xbc>)
 80042b4:	441a      	add	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3304      	adds	r3, #4
 80042ba:	4619      	mov	r1, r3
 80042bc:	4610      	mov	r0, r2
 80042be:	f7ff f9ab 	bl	8003618 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80042c2:	f001 f959 	bl	8005578 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80042c6:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <prvAddNewTaskToReadyList+0xb0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <prvAddNewTaskToReadyList+0x9e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80042ce:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <prvAddNewTaskToReadyList+0xac>)
 80042d0:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	2000021c 	.word	0x2000021c
 80042e0:	20000144 	.word	0x20000144
 80042e4:	20000228 	.word	0x20000228
 80042e8:	20000238 	.word	0x20000238
 80042ec:	20000224 	.word	0x20000224
 80042f0:	20000148 	.word	0x20000148

080042f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80042fa:	4b20      	ldr	r3, [pc, #128]	; (800437c <vTaskStartScheduler+0x88>)
 80042fc:	9301      	str	r3, [sp, #4]
 80042fe:	2300      	movs	r3, #0
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	2300      	movs	r3, #0
 8004304:	2282      	movs	r2, #130	; 0x82
 8004306:	491e      	ldr	r1, [pc, #120]	; (8004380 <vTaskStartScheduler+0x8c>)
 8004308:	481e      	ldr	r0, [pc, #120]	; (8004384 <vTaskStartScheduler+0x90>)
 800430a:	f7ff febb 	bl	8004084 <xTaskCreate>
 800430e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d102      	bne.n	800431c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004316:	f000 fcc1 	bl	8004c9c <xTimerCreateTimerTask>
 800431a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d116      	bne.n	8004350 <vTaskStartScheduler+0x5c>
        __asm volatile
 8004322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004326:	f383 8811 	msr	BASEPRI, r3
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	60bb      	str	r3, [r7, #8]
    }
 8004334:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004336:	4b14      	ldr	r3, [pc, #80]	; (8004388 <vTaskStartScheduler+0x94>)
 8004338:	f04f 32ff 	mov.w	r2, #4294967295
 800433c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800433e:	4b13      	ldr	r3, [pc, #76]	; (800438c <vTaskStartScheduler+0x98>)
 8004340:	2201      	movs	r2, #1
 8004342:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004344:	4b12      	ldr	r3, [pc, #72]	; (8004390 <vTaskStartScheduler+0x9c>)
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800434a:	f001 f843 	bl	80053d4 <xPortStartScheduler>
 800434e:	e00e      	b.n	800436e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004356:	d10a      	bne.n	800436e <vTaskStartScheduler+0x7a>
        __asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	607b      	str	r3, [r7, #4]
    }
 800436a:	bf00      	nop
 800436c:	e7fe      	b.n	800436c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800436e:	4b09      	ldr	r3, [pc, #36]	; (8004394 <vTaskStartScheduler+0xa0>)
 8004370:	681b      	ldr	r3, [r3, #0]
}
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000240 	.word	0x20000240
 8004380:	08005c2c 	.word	0x08005c2c
 8004384:	08004949 	.word	0x08004949
 8004388:	2000023c 	.word	0x2000023c
 800438c:	20000228 	.word	0x20000228
 8004390:	20000220 	.word	0x20000220
 8004394:	2000000c 	.word	0x2000000c

08004398 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800439c:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <vTaskSuspendAll+0x18>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3301      	adds	r3, #1
 80043a2:	4a03      	ldr	r2, [pc, #12]	; (80043b0 <vTaskSuspendAll+0x18>)
 80043a4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80043a6:	bf00      	nop
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	20000244 	.word	0x20000244

080043b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80043be:	2300      	movs	r3, #0
 80043c0:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80043c2:	4b3b      	ldr	r3, [pc, #236]	; (80044b0 <xTaskResumeAll+0xfc>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10a      	bne.n	80043e0 <xTaskResumeAll+0x2c>
        __asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	603b      	str	r3, [r7, #0]
    }
 80043dc:	bf00      	nop
 80043de:	e7fe      	b.n	80043de <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80043e0:	f001 f89a 	bl	8005518 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80043e4:	4b32      	ldr	r3, [pc, #200]	; (80044b0 <xTaskResumeAll+0xfc>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3b01      	subs	r3, #1
 80043ea:	4a31      	ldr	r2, [pc, #196]	; (80044b0 <xTaskResumeAll+0xfc>)
 80043ec:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043ee:	4b30      	ldr	r3, [pc, #192]	; (80044b0 <xTaskResumeAll+0xfc>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d155      	bne.n	80044a2 <xTaskResumeAll+0xee>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043f6:	4b2f      	ldr	r3, [pc, #188]	; (80044b4 <xTaskResumeAll+0x100>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d051      	beq.n	80044a2 <xTaskResumeAll+0xee>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043fe:	e02e      	b.n	800445e <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004400:	4b2d      	ldr	r3, [pc, #180]	; (80044b8 <xTaskResumeAll+0x104>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3318      	adds	r3, #24
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff f960 	bl	80036d2 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3304      	adds	r3, #4
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff f95b 	bl	80036d2 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	2201      	movs	r2, #1
 8004422:	409a      	lsls	r2, r3
 8004424:	4b25      	ldr	r3, [pc, #148]	; (80044bc <xTaskResumeAll+0x108>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4313      	orrs	r3, r2
 800442a:	4a24      	ldr	r2, [pc, #144]	; (80044bc <xTaskResumeAll+0x108>)
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4a21      	ldr	r2, [pc, #132]	; (80044c0 <xTaskResumeAll+0x10c>)
 800443c:	441a      	add	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3304      	adds	r3, #4
 8004442:	4619      	mov	r1, r3
 8004444:	4610      	mov	r0, r2
 8004446:	f7ff f8e7 	bl	8003618 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444e:	4b1d      	ldr	r3, [pc, #116]	; (80044c4 <xTaskResumeAll+0x110>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	429a      	cmp	r2, r3
 8004456:	d302      	bcc.n	800445e <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8004458:	4b1b      	ldr	r3, [pc, #108]	; (80044c8 <xTaskResumeAll+0x114>)
 800445a:	2201      	movs	r2, #1
 800445c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800445e:	4b16      	ldr	r3, [pc, #88]	; (80044b8 <xTaskResumeAll+0x104>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1cc      	bne.n	8004400 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800446c:	f000 fafc 	bl	8004a68 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004470:	4b16      	ldr	r3, [pc, #88]	; (80044cc <xTaskResumeAll+0x118>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d010      	beq.n	800449e <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800447c:	f000 f838 	bl	80044f0 <xTaskIncrementTick>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8004486:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <xTaskResumeAll+0x114>)
 8004488:	2201      	movs	r2, #1
 800448a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	3b01      	subs	r3, #1
 8004490:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1f1      	bne.n	800447c <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8004498:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <xTaskResumeAll+0x118>)
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800449e:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <xTaskResumeAll+0x114>)
 80044a0:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80044a2:	f001 f869 	bl	8005578 <vPortExitCritical>

    return xAlreadyYielded;
 80044a6:	687b      	ldr	r3, [r7, #4]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20000244 	.word	0x20000244
 80044b4:	2000021c 	.word	0x2000021c
 80044b8:	200001dc 	.word	0x200001dc
 80044bc:	20000224 	.word	0x20000224
 80044c0:	20000148 	.word	0x20000148
 80044c4:	20000144 	.word	0x20000144
 80044c8:	20000230 	.word	0x20000230
 80044cc:	2000022c 	.word	0x2000022c

080044d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80044d6:	4b05      	ldr	r3, [pc, #20]	; (80044ec <xTaskGetTickCount+0x1c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80044dc:	687b      	ldr	r3, [r7, #4]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	20000220 	.word	0x20000220

080044f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80044f6:	2300      	movs	r3, #0
 80044f8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044fa:	4b3f      	ldr	r3, [pc, #252]	; (80045f8 <xTaskIncrementTick+0x108>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d16f      	bne.n	80045e2 <xTaskIncrementTick+0xf2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004502:	4b3e      	ldr	r3, [pc, #248]	; (80045fc <xTaskIncrementTick+0x10c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3301      	adds	r3, #1
 8004508:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800450a:	4a3c      	ldr	r2, [pc, #240]	; (80045fc <xTaskIncrementTick+0x10c>)
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d120      	bne.n	8004558 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8004516:	4b3a      	ldr	r3, [pc, #232]	; (8004600 <xTaskIncrementTick+0x110>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00a      	beq.n	8004536 <xTaskIncrementTick+0x46>
        __asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	603b      	str	r3, [r7, #0]
    }
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <xTaskIncrementTick+0x44>
 8004536:	4b32      	ldr	r3, [pc, #200]	; (8004600 <xTaskIncrementTick+0x110>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	4b31      	ldr	r3, [pc, #196]	; (8004604 <xTaskIncrementTick+0x114>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a2f      	ldr	r2, [pc, #188]	; (8004600 <xTaskIncrementTick+0x110>)
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	4a2f      	ldr	r2, [pc, #188]	; (8004604 <xTaskIncrementTick+0x114>)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	4b2f      	ldr	r3, [pc, #188]	; (8004608 <xTaskIncrementTick+0x118>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3301      	adds	r3, #1
 8004550:	4a2d      	ldr	r2, [pc, #180]	; (8004608 <xTaskIncrementTick+0x118>)
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	f000 fa88 	bl	8004a68 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004558:	4b2c      	ldr	r3, [pc, #176]	; (800460c <xTaskIncrementTick+0x11c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	429a      	cmp	r2, r3
 8004560:	d344      	bcc.n	80045ec <xTaskIncrementTick+0xfc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004562:	4b27      	ldr	r3, [pc, #156]	; (8004600 <xTaskIncrementTick+0x110>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d104      	bne.n	8004576 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800456c:	4b27      	ldr	r3, [pc, #156]	; (800460c <xTaskIncrementTick+0x11c>)
 800456e:	f04f 32ff 	mov.w	r2, #4294967295
 8004572:	601a      	str	r2, [r3, #0]
                    break;
 8004574:	e03a      	b.n	80045ec <xTaskIncrementTick+0xfc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004576:	4b22      	ldr	r3, [pc, #136]	; (8004600 <xTaskIncrementTick+0x110>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	429a      	cmp	r2, r3
 800458c:	d203      	bcs.n	8004596 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800458e:	4a1f      	ldr	r2, [pc, #124]	; (800460c <xTaskIncrementTick+0x11c>)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004594:	e02a      	b.n	80045ec <xTaskIncrementTick+0xfc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	3304      	adds	r3, #4
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff f899 	bl	80036d2 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d004      	beq.n	80045b2 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	3318      	adds	r3, #24
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff f890 	bl	80036d2 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b6:	2201      	movs	r2, #1
 80045b8:	409a      	lsls	r2, r3
 80045ba:	4b15      	ldr	r3, [pc, #84]	; (8004610 <xTaskIncrementTick+0x120>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4313      	orrs	r3, r2
 80045c0:	4a13      	ldr	r2, [pc, #76]	; (8004610 <xTaskIncrementTick+0x120>)
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4a10      	ldr	r2, [pc, #64]	; (8004614 <xTaskIncrementTick+0x124>)
 80045d2:	441a      	add	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	3304      	adds	r3, #4
 80045d8:	4619      	mov	r1, r3
 80045da:	4610      	mov	r0, r2
 80045dc:	f7ff f81c 	bl	8003618 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045e0:	e7bf      	b.n	8004562 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80045e2:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <xTaskIncrementTick+0x128>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3301      	adds	r3, #1
 80045e8:	4a0b      	ldr	r2, [pc, #44]	; (8004618 <xTaskIncrementTick+0x128>)
 80045ea:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80045ec:	697b      	ldr	r3, [r7, #20]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20000244 	.word	0x20000244
 80045fc:	20000220 	.word	0x20000220
 8004600:	200001d4 	.word	0x200001d4
 8004604:	200001d8 	.word	0x200001d8
 8004608:	20000234 	.word	0x20000234
 800460c:	2000023c 	.word	0x2000023c
 8004610:	20000224 	.word	0x20000224
 8004614:	20000148 	.word	0x20000148
 8004618:	2000022c 	.word	0x2000022c

0800461c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004622:	4b27      	ldr	r3, [pc, #156]	; (80046c0 <vTaskSwitchContext+0xa4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800462a:	4b26      	ldr	r3, [pc, #152]	; (80046c4 <vTaskSwitchContext+0xa8>)
 800462c:	2201      	movs	r2, #1
 800462e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004630:	e03f      	b.n	80046b2 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8004632:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <vTaskSwitchContext+0xa8>)
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004638:	4b23      	ldr	r3, [pc, #140]	; (80046c8 <vTaskSwitchContext+0xac>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	fab3 f383 	clz	r3, r3
 8004644:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004646:	7afb      	ldrb	r3, [r7, #11]
 8004648:	f1c3 031f 	rsb	r3, r3, #31
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	491f      	ldr	r1, [pc, #124]	; (80046cc <vTaskSwitchContext+0xb0>)
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4613      	mov	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10a      	bne.n	8004678 <vTaskSwitchContext+0x5c>
        __asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	607b      	str	r3, [r7, #4]
    }
 8004674:	bf00      	nop
 8004676:	e7fe      	b.n	8004676 <vTaskSwitchContext+0x5a>
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4613      	mov	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4a12      	ldr	r2, [pc, #72]	; (80046cc <vTaskSwitchContext+0xb0>)
 8004684:	4413      	add	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	3308      	adds	r3, #8
 800469a:	429a      	cmp	r2, r3
 800469c:	d104      	bne.n	80046a8 <vTaskSwitchContext+0x8c>
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	605a      	str	r2, [r3, #4]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	4a08      	ldr	r2, [pc, #32]	; (80046d0 <vTaskSwitchContext+0xb4>)
 80046b0:	6013      	str	r3, [r2, #0]
}
 80046b2:	bf00      	nop
 80046b4:	371c      	adds	r7, #28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	20000244 	.word	0x20000244
 80046c4:	20000230 	.word	0x20000230
 80046c8:	20000224 	.word	0x20000224
 80046cc:	20000148 	.word	0x20000148
 80046d0:	20000144 	.word	0x20000144

080046d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10a      	bne.n	80046fa <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	60fb      	str	r3, [r7, #12]
    }
 80046f6:	bf00      	nop
 80046f8:	e7fe      	b.n	80046f8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046fa:	4b07      	ldr	r3, [pc, #28]	; (8004718 <vTaskPlaceOnEventList+0x44>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3318      	adds	r3, #24
 8004700:	4619      	mov	r1, r3
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fe ffac 	bl	8003660 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004708:	2101      	movs	r1, #1
 800470a:	6838      	ldr	r0, [r7, #0]
 800470c:	f000 fa60 	bl	8004bd0 <prvAddCurrentTaskToDelayedList>
}
 8004710:	bf00      	nop
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20000144 	.word	0x20000144

0800471c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10a      	bne.n	8004744 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	617b      	str	r3, [r7, #20]
    }
 8004740:	bf00      	nop
 8004742:	e7fe      	b.n	8004742 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004744:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <vTaskPlaceOnEventListRestricted+0x54>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3318      	adds	r3, #24
 800474a:	4619      	mov	r1, r3
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f7fe ff63 	bl	8003618 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004758:	f04f 33ff 	mov.w	r3, #4294967295
 800475c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	68b8      	ldr	r0, [r7, #8]
 8004762:	f000 fa35 	bl	8004bd0 <prvAddCurrentTaskToDelayedList>
    }
 8004766:	bf00      	nop
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20000144 	.word	0x20000144

08004774 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	60fb      	str	r3, [r7, #12]
    }
 800479c:	bf00      	nop
 800479e:	e7fe      	b.n	800479e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	3318      	adds	r3, #24
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fe ff94 	bl	80036d2 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047aa:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <xTaskRemoveFromEventList+0xac>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d11c      	bne.n	80047ec <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	3304      	adds	r3, #4
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fe ff8b 	bl	80036d2 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	2201      	movs	r2, #1
 80047c2:	409a      	lsls	r2, r3
 80047c4:	4b17      	ldr	r3, [pc, #92]	; (8004824 <xTaskRemoveFromEventList+0xb0>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	4a16      	ldr	r2, [pc, #88]	; (8004824 <xTaskRemoveFromEventList+0xb0>)
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d2:	4613      	mov	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4a13      	ldr	r2, [pc, #76]	; (8004828 <xTaskRemoveFromEventList+0xb4>)
 80047dc:	441a      	add	r2, r3
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	3304      	adds	r3, #4
 80047e2:	4619      	mov	r1, r3
 80047e4:	4610      	mov	r0, r2
 80047e6:	f7fe ff17 	bl	8003618 <vListInsertEnd>
 80047ea:	e005      	b.n	80047f8 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	3318      	adds	r3, #24
 80047f0:	4619      	mov	r1, r3
 80047f2:	480e      	ldr	r0, [pc, #56]	; (800482c <xTaskRemoveFromEventList+0xb8>)
 80047f4:	f7fe ff10 	bl	8003618 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fc:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <xTaskRemoveFromEventList+0xbc>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	429a      	cmp	r2, r3
 8004804:	d905      	bls.n	8004812 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004806:	2301      	movs	r3, #1
 8004808:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800480a:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <xTaskRemoveFromEventList+0xc0>)
 800480c:	2201      	movs	r2, #1
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	e001      	b.n	8004816 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004816:	697b      	ldr	r3, [r7, #20]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20000244 	.word	0x20000244
 8004824:	20000224 	.word	0x20000224
 8004828:	20000148 	.word	0x20000148
 800482c:	200001dc 	.word	0x200001dc
 8004830:	20000144 	.word	0x20000144
 8004834:	20000230 	.word	0x20000230

08004838 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004840:	4b06      	ldr	r3, [pc, #24]	; (800485c <vTaskInternalSetTimeOutState+0x24>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004848:	4b05      	ldr	r3, [pc, #20]	; (8004860 <vTaskInternalSetTimeOutState+0x28>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	605a      	str	r2, [r3, #4]
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	20000234 	.word	0x20000234
 8004860:	20000220 	.word	0x20000220

08004864 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	613b      	str	r3, [r7, #16]
    }
 8004886:	bf00      	nop
 8004888:	e7fe      	b.n	8004888 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10a      	bne.n	80048a6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	60fb      	str	r3, [r7, #12]
    }
 80048a2:	bf00      	nop
 80048a4:	e7fe      	b.n	80048a4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80048a6:	f000 fe37 	bl	8005518 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80048aa:	4b1f      	ldr	r3, [pc, #124]	; (8004928 <xTaskCheckForTimeOut+0xc4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c2:	d102      	bne.n	80048ca <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80048c4:	2300      	movs	r3, #0
 80048c6:	61fb      	str	r3, [r7, #28]
 80048c8:	e026      	b.n	8004918 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	4b17      	ldr	r3, [pc, #92]	; (800492c <xTaskCheckForTimeOut+0xc8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d00a      	beq.n	80048ec <xTaskCheckForTimeOut+0x88>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d305      	bcc.n	80048ec <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80048e0:	2301      	movs	r3, #1
 80048e2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e015      	b.n	8004918 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d20b      	bcs.n	800490e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	1ad2      	subs	r2, r2, r3
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7ff ff98 	bl	8004838 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004908:	2300      	movs	r3, #0
 800490a:	61fb      	str	r3, [r7, #28]
 800490c:	e004      	b.n	8004918 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004914:	2301      	movs	r3, #1
 8004916:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004918:	f000 fe2e 	bl	8005578 <vPortExitCritical>

    return xReturn;
 800491c:	69fb      	ldr	r3, [r7, #28]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3720      	adds	r7, #32
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000220 	.word	0x20000220
 800492c:	20000234 	.word	0x20000234

08004930 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004934:	4b03      	ldr	r3, [pc, #12]	; (8004944 <vTaskMissedYield+0x14>)
 8004936:	2201      	movs	r2, #1
 8004938:	601a      	str	r2, [r3, #0]
}
 800493a:	bf00      	nop
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	20000230 	.word	0x20000230

08004948 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004950:	f000 f84c 	bl	80049ec <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8004954:	4b04      	ldr	r3, [pc, #16]	; (8004968 <prvIdleTask+0x20>)
 8004956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004964:	e7f4      	b.n	8004950 <prvIdleTask+0x8>
 8004966:	bf00      	nop
 8004968:	e000ed04 	.word	0xe000ed04

0800496c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004972:	2300      	movs	r3, #0
 8004974:	607b      	str	r3, [r7, #4]
 8004976:	e00c      	b.n	8004992 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4a12      	ldr	r2, [pc, #72]	; (80049cc <prvInitialiseTaskLists+0x60>)
 8004984:	4413      	add	r3, r2
 8004986:	4618      	mov	r0, r3
 8004988:	f7fe fe19 	bl	80035be <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3301      	adds	r3, #1
 8004990:	607b      	str	r3, [r7, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b04      	cmp	r3, #4
 8004996:	d9ef      	bls.n	8004978 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004998:	480d      	ldr	r0, [pc, #52]	; (80049d0 <prvInitialiseTaskLists+0x64>)
 800499a:	f7fe fe10 	bl	80035be <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800499e:	480d      	ldr	r0, [pc, #52]	; (80049d4 <prvInitialiseTaskLists+0x68>)
 80049a0:	f7fe fe0d 	bl	80035be <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80049a4:	480c      	ldr	r0, [pc, #48]	; (80049d8 <prvInitialiseTaskLists+0x6c>)
 80049a6:	f7fe fe0a 	bl	80035be <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80049aa:	480c      	ldr	r0, [pc, #48]	; (80049dc <prvInitialiseTaskLists+0x70>)
 80049ac:	f7fe fe07 	bl	80035be <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80049b0:	480b      	ldr	r0, [pc, #44]	; (80049e0 <prvInitialiseTaskLists+0x74>)
 80049b2:	f7fe fe04 	bl	80035be <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80049b6:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <prvInitialiseTaskLists+0x78>)
 80049b8:	4a05      	ldr	r2, [pc, #20]	; (80049d0 <prvInitialiseTaskLists+0x64>)
 80049ba:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049bc:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <prvInitialiseTaskLists+0x7c>)
 80049be:	4a05      	ldr	r2, [pc, #20]	; (80049d4 <prvInitialiseTaskLists+0x68>)
 80049c0:	601a      	str	r2, [r3, #0]
}
 80049c2:	bf00      	nop
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	20000148 	.word	0x20000148
 80049d0:	200001ac 	.word	0x200001ac
 80049d4:	200001c0 	.word	0x200001c0
 80049d8:	200001dc 	.word	0x200001dc
 80049dc:	200001f0 	.word	0x200001f0
 80049e0:	20000208 	.word	0x20000208
 80049e4:	200001d4 	.word	0x200001d4
 80049e8:	200001d8 	.word	0x200001d8

080049ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049f2:	e019      	b.n	8004a28 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80049f4:	f000 fd90 	bl	8005518 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049f8:	4b10      	ldr	r3, [pc, #64]	; (8004a3c <prvCheckTasksWaitingTermination+0x50>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3304      	adds	r3, #4
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fe fe64 	bl	80036d2 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <prvCheckTasksWaitingTermination+0x54>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	4a0b      	ldr	r2, [pc, #44]	; (8004a40 <prvCheckTasksWaitingTermination+0x54>)
 8004a12:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004a14:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <prvCheckTasksWaitingTermination+0x58>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	4a0a      	ldr	r2, [pc, #40]	; (8004a44 <prvCheckTasksWaitingTermination+0x58>)
 8004a1c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004a1e:	f000 fdab 	bl	8005578 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f810 	bl	8004a48 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a28:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <prvCheckTasksWaitingTermination+0x58>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e1      	bne.n	80049f4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004a30:	bf00      	nop
 8004a32:	bf00      	nop
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	200001f0 	.word	0x200001f0
 8004a40:	2000021c 	.word	0x2000021c
 8004a44:	20000204 	.word	0x20000204

08004a48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 ff61 	bl	800591c <vPortFree>
                vPortFree( pxTCB );
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 ff5e 	bl	800591c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004a60:	bf00      	nop
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <prvResetNextTaskUnblockTime+0x30>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d104      	bne.n	8004a80 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004a76:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <prvResetNextTaskUnblockTime+0x34>)
 8004a78:	f04f 32ff 	mov.w	r2, #4294967295
 8004a7c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004a7e:	e005      	b.n	8004a8c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a80:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <prvResetNextTaskUnblockTime+0x30>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a04      	ldr	r2, [pc, #16]	; (8004a9c <prvResetNextTaskUnblockTime+0x34>)
 8004a8a:	6013      	str	r3, [r2, #0]
}
 8004a8c:	bf00      	nop
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	200001d4 	.word	0x200001d4
 8004a9c:	2000023c 	.word	0x2000023c

08004aa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <xTaskGetSchedulerState+0x34>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	607b      	str	r3, [r7, #4]
 8004ab2:	e008      	b.n	8004ac6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ab4:	4b08      	ldr	r3, [pc, #32]	; (8004ad8 <xTaskGetSchedulerState+0x38>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004abc:	2302      	movs	r3, #2
 8004abe:	607b      	str	r3, [r7, #4]
 8004ac0:	e001      	b.n	8004ac6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004ac6:	687b      	ldr	r3, [r7, #4]
    }
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	20000228 	.word	0x20000228
 8004ad8:	20000244 	.word	0x20000244

08004adc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d063      	beq.n	8004bba <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004af2:	4b34      	ldr	r3, [pc, #208]	; (8004bc4 <xTaskPriorityDisinherit+0xe8>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d00a      	beq.n	8004b12 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	60fb      	str	r3, [r7, #12]
    }
 8004b0e:	bf00      	nop
 8004b10:	e7fe      	b.n	8004b10 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	60bb      	str	r3, [r7, #8]
    }
 8004b2c:	bf00      	nop
 8004b2e:	e7fe      	b.n	8004b2e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b34:	1e5a      	subs	r2, r3, #1
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d039      	beq.n	8004bba <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d135      	bne.n	8004bba <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	3304      	adds	r3, #4
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fe fdbd 	bl	80036d2 <uxListRemove>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10a      	bne.n	8004b74 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	2201      	movs	r2, #1
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	43da      	mvns	r2, r3
 8004b6a:	4b17      	ldr	r3, [pc, #92]	; (8004bc8 <xTaskPriorityDisinherit+0xec>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	4a15      	ldr	r2, [pc, #84]	; (8004bc8 <xTaskPriorityDisinherit+0xec>)
 8004b72:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b80:	f1c3 0205 	rsb	r2, r3, #5
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <xTaskPriorityDisinherit+0xec>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	4a0c      	ldr	r2, [pc, #48]	; (8004bc8 <xTaskPriorityDisinherit+0xec>)
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4a09      	ldr	r2, [pc, #36]	; (8004bcc <xTaskPriorityDisinherit+0xf0>)
 8004ba8:	441a      	add	r2, r3
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	3304      	adds	r3, #4
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f7fe fd31 	bl	8003618 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004bba:	697b      	ldr	r3, [r7, #20]
    }
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	20000144 	.word	0x20000144
 8004bc8:	20000224 	.word	0x20000224
 8004bcc:	20000148 	.word	0x20000148

08004bd0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004bda:	4b29      	ldr	r3, [pc, #164]	; (8004c80 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004be0:	4b28      	ldr	r3, [pc, #160]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3304      	adds	r3, #4
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fe fd73 	bl	80036d2 <uxListRemove>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10b      	bne.n	8004c0a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004bf2:	4b24      	ldr	r3, [pc, #144]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43da      	mvns	r2, r3
 8004c00:	4b21      	ldr	r3, [pc, #132]	; (8004c88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4013      	ands	r3, r2
 8004c06:	4a20      	ldr	r2, [pc, #128]	; (8004c88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c08:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c10:	d10a      	bne.n	8004c28 <prvAddCurrentTaskToDelayedList+0x58>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c18:	4b1a      	ldr	r3, [pc, #104]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	4619      	mov	r1, r3
 8004c20:	481a      	ldr	r0, [pc, #104]	; (8004c8c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c22:	f7fe fcf9 	bl	8003618 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004c26:	e026      	b.n	8004c76 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c30:	4b14      	ldr	r3, [pc, #80]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d209      	bcs.n	8004c54 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c40:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	f7fe fd07 	bl	8003660 <vListInsert>
}
 8004c52:	e010      	b.n	8004c76 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c54:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4610      	mov	r0, r2
 8004c62:	f7fe fcfd 	bl	8003660 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004c66:	4b0c      	ldr	r3, [pc, #48]	; (8004c98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d202      	bcs.n	8004c76 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8004c70:	4a09      	ldr	r2, [pc, #36]	; (8004c98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	6013      	str	r3, [r2, #0]
}
 8004c76:	bf00      	nop
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000220 	.word	0x20000220
 8004c84:	20000144 	.word	0x20000144
 8004c88:	20000224 	.word	0x20000224
 8004c8c:	20000208 	.word	0x20000208
 8004c90:	200001d8 	.word	0x200001d8
 8004c94:	200001d4 	.word	0x200001d4
 8004c98:	2000023c 	.word	0x2000023c

08004c9c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004ca6:	f000 fad5 	bl	8005254 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004caa:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <xTimerCreateTimerTask+0x54>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00b      	beq.n	8004cca <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004cb2:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <xTimerCreateTimerTask+0x58>)
 8004cb4:	9301      	str	r3, [sp, #4]
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004cc0:	490d      	ldr	r1, [pc, #52]	; (8004cf8 <xTimerCreateTimerTask+0x5c>)
 8004cc2:	480e      	ldr	r0, [pc, #56]	; (8004cfc <xTimerCreateTimerTask+0x60>)
 8004cc4:	f7ff f9de 	bl	8004084 <xTaskCreate>
 8004cc8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10a      	bne.n	8004ce6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	603b      	str	r3, [r7, #0]
    }
 8004ce2:	bf00      	nop
 8004ce4:	e7fe      	b.n	8004ce4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004ce6:	687b      	ldr	r3, [r7, #4]
    }
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	20000278 	.word	0x20000278
 8004cf4:	2000027c 	.word	0x2000027c
 8004cf8:	08005c34 	.word	0x08005c34
 8004cfc:	08004e35 	.word	0x08004e35

08004d00 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08a      	sub	sp, #40	; 0x28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <xTimerGenericCommand+0x2e>
        __asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	623b      	str	r3, [r7, #32]
    }
 8004d2a:	bf00      	nop
 8004d2c:	e7fe      	b.n	8004d2c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004d2e:	4b1a      	ldr	r3, [pc, #104]	; (8004d98 <xTimerGenericCommand+0x98>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d02a      	beq.n	8004d8c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b05      	cmp	r3, #5
 8004d46:	dc18      	bgt.n	8004d7a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d48:	f7ff feaa 	bl	8004aa0 <xTaskGetSchedulerState>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d109      	bne.n	8004d66 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d52:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <xTimerGenericCommand+0x98>)
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	f107 0114 	add.w	r1, r7, #20
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d5e:	f7fe fdbf 	bl	80038e0 <xQueueGenericSend>
 8004d62:	6278      	str	r0, [r7, #36]	; 0x24
 8004d64:	e012      	b.n	8004d8c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d66:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <xTimerGenericCommand+0x98>)
 8004d68:	6818      	ldr	r0, [r3, #0]
 8004d6a:	f107 0114 	add.w	r1, r7, #20
 8004d6e:	2300      	movs	r3, #0
 8004d70:	2200      	movs	r2, #0
 8004d72:	f7fe fdb5 	bl	80038e0 <xQueueGenericSend>
 8004d76:	6278      	str	r0, [r7, #36]	; 0x24
 8004d78:	e008      	b.n	8004d8c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d7a:	4b07      	ldr	r3, [pc, #28]	; (8004d98 <xTimerGenericCommand+0x98>)
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	f107 0114 	add.w	r1, r7, #20
 8004d82:	2300      	movs	r3, #0
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	f7fe fe91 	bl	8003aac <xQueueGenericSendFromISR>
 8004d8a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3728      	adds	r7, #40	; 0x28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20000278 	.word	0x20000278

08004d9c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af02      	add	r7, sp, #8
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004da6:	4b22      	ldr	r3, [pc, #136]	; (8004e30 <prvProcessExpiredTimer+0x94>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	3304      	adds	r3, #4
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fe fc8c 	bl	80036d2 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d022      	beq.n	8004e0e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	699a      	ldr	r2, [r3, #24]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	18d1      	adds	r1, r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	6978      	ldr	r0, [r7, #20]
 8004dd6:	f000 f8d1 	bl	8004f7c <prvInsertTimerInActiveList>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01f      	beq.n	8004e20 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004de0:	2300      	movs	r3, #0
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	2300      	movs	r3, #0
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	2100      	movs	r1, #0
 8004dea:	6978      	ldr	r0, [r7, #20]
 8004dec:	f7ff ff88 	bl	8004d00 <xTimerGenericCommand>
 8004df0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d113      	bne.n	8004e20 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	60fb      	str	r3, [r7, #12]
    }
 8004e0a:	bf00      	nop
 8004e0c:	e7fe      	b.n	8004e0c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e14:	f023 0301 	bic.w	r3, r3, #1
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	6978      	ldr	r0, [r7, #20]
 8004e26:	4798      	blx	r3
    }
 8004e28:	bf00      	nop
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20000270 	.word	0x20000270

08004e34 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e3c:	f107 0308 	add.w	r3, r7, #8
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 f857 	bl	8004ef4 <prvGetNextExpireTime>
 8004e46:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f803 	bl	8004e58 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004e52:	f000 f8d5 	bl	8005000 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e56:	e7f1      	b.n	8004e3c <prvTimerTask+0x8>

08004e58 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004e62:	f7ff fa99 	bl	8004398 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e66:	f107 0308 	add.w	r3, r7, #8
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 f866 	bl	8004f3c <prvSampleTimeNow>
 8004e70:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d130      	bne.n	8004eda <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10a      	bne.n	8004e94 <prvProcessTimerOrBlockTask+0x3c>
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d806      	bhi.n	8004e94 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004e86:	f7ff fa95 	bl	80043b4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e8a:	68f9      	ldr	r1, [r7, #12]
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff ff85 	bl	8004d9c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004e92:	e024      	b.n	8004ede <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d008      	beq.n	8004eac <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e9a:	4b13      	ldr	r3, [pc, #76]	; (8004ee8 <prvProcessTimerOrBlockTask+0x90>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <prvProcessTimerOrBlockTask+0x50>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <prvProcessTimerOrBlockTask+0x52>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004eac:	4b0f      	ldr	r3, [pc, #60]	; (8004eec <prvProcessTimerOrBlockTask+0x94>)
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	4619      	mov	r1, r3
 8004eba:	f7ff f8af 	bl	800401c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004ebe:	f7ff fa79 	bl	80043b4 <xTaskResumeAll>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10a      	bne.n	8004ede <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004ec8:	4b09      	ldr	r3, [pc, #36]	; (8004ef0 <prvProcessTimerOrBlockTask+0x98>)
 8004eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	f3bf 8f6f 	isb	sy
    }
 8004ed8:	e001      	b.n	8004ede <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004eda:	f7ff fa6b 	bl	80043b4 <xTaskResumeAll>
    }
 8004ede:	bf00      	nop
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20000274 	.word	0x20000274
 8004eec:	20000278 	.word	0x20000278
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004efc:	4b0e      	ldr	r3, [pc, #56]	; (8004f38 <prvGetNextExpireTime+0x44>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <prvGetNextExpireTime+0x16>
 8004f06:	2201      	movs	r2, #1
 8004f08:	e000      	b.n	8004f0c <prvGetNextExpireTime+0x18>
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d105      	bne.n	8004f24 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f18:	4b07      	ldr	r3, [pc, #28]	; (8004f38 <prvGetNextExpireTime+0x44>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	e001      	b.n	8004f28 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004f28:	68fb      	ldr	r3, [r7, #12]
    }
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	20000270 	.word	0x20000270

08004f3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004f44:	f7ff fac4 	bl	80044d0 <xTaskGetTickCount>
 8004f48:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004f4a:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <prvSampleTimeNow+0x3c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d205      	bcs.n	8004f60 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004f54:	f000 f91a 	bl	800518c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	e002      	b.n	8004f66 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004f66:	4a04      	ldr	r2, [pc, #16]	; (8004f78 <prvSampleTimeNow+0x3c>)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
    }
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20000280 	.word	0x20000280

08004f7c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d812      	bhi.n	8004fc8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	1ad2      	subs	r2, r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d302      	bcc.n	8004fb6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	e01b      	b.n	8004fee <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004fb6:	4b10      	ldr	r3, [pc, #64]	; (8004ff8 <prvInsertTimerInActiveList+0x7c>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	f7fe fb4d 	bl	8003660 <vListInsert>
 8004fc6:	e012      	b.n	8004fee <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d206      	bcs.n	8004fde <prvInsertTimerInActiveList+0x62>
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d302      	bcc.n	8004fde <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	e007      	b.n	8004fee <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fde:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <prvInsertTimerInActiveList+0x80>)
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4610      	mov	r0, r2
 8004fea:	f7fe fb39 	bl	8003660 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004fee:	697b      	ldr	r3, [r7, #20]
    }
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	20000274 	.word	0x20000274
 8004ffc:	20000270 	.word	0x20000270

08005000 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005000:	b580      	push	{r7, lr}
 8005002:	b08c      	sub	sp, #48	; 0x30
 8005004:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005006:	e0ae      	b.n	8005166 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	f2c0 80aa 	blt.w	8005164 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d004      	beq.n	8005026 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	3304      	adds	r3, #4
 8005020:	4618      	mov	r0, r3
 8005022:	f7fe fb56 	bl	80036d2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005026:	1d3b      	adds	r3, r7, #4
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff ff87 	bl	8004f3c <prvSampleTimeNow>
 800502e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b09      	cmp	r3, #9
 8005034:	f200 8097 	bhi.w	8005166 <prvProcessReceivedCommands+0x166>
 8005038:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <prvProcessReceivedCommands+0x40>)
 800503a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503e:	bf00      	nop
 8005040:	08005069 	.word	0x08005069
 8005044:	08005069 	.word	0x08005069
 8005048:	08005069 	.word	0x08005069
 800504c:	080050dd 	.word	0x080050dd
 8005050:	080050f1 	.word	0x080050f1
 8005054:	0800513b 	.word	0x0800513b
 8005058:	08005069 	.word	0x08005069
 800505c:	08005069 	.word	0x08005069
 8005060:	080050dd 	.word	0x080050dd
 8005064:	080050f1 	.word	0x080050f1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800506e:	f043 0301 	orr.w	r3, r3, #1
 8005072:	b2da      	uxtb	r2, r3
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	18d1      	adds	r1, r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a3a      	ldr	r2, [r7, #32]
 8005086:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005088:	f7ff ff78 	bl	8004f7c <prvInsertTimerInActiveList>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d069      	beq.n	8005166 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005098:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d05e      	beq.n	8005166 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	441a      	add	r2, r3
 80050b0:	2300      	movs	r3, #0
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	2300      	movs	r3, #0
 80050b6:	2100      	movs	r1, #0
 80050b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050ba:	f7ff fe21 	bl	8004d00 <xTimerGenericCommand>
 80050be:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d14f      	bne.n	8005166 <prvProcessReceivedCommands+0x166>
        __asm volatile
 80050c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	61bb      	str	r3, [r7, #24]
    }
 80050d8:	bf00      	nop
 80050da:	e7fe      	b.n	80050da <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050e2:	f023 0301 	bic.w	r3, r3, #1
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80050ee:	e03a      	b.n	8005166 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	617b      	str	r3, [r7, #20]
    }
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	18d1      	adds	r1, r2, r3
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	6a3a      	ldr	r2, [r7, #32]
 8005132:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005134:	f7ff ff22 	bl	8004f7c <prvInsertTimerInActiveList>
                        break;
 8005138:	e015      	b.n	8005166 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d103      	bne.n	8005150 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8005148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800514a:	f000 fbe7 	bl	800591c <vPortFree>
 800514e:	e00a      	b.n	8005166 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	b2da      	uxtb	r2, r3
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005162:	e000      	b.n	8005166 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005164:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005166:	4b08      	ldr	r3, [pc, #32]	; (8005188 <prvProcessReceivedCommands+0x188>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f107 0108 	add.w	r1, r7, #8
 800516e:	2200      	movs	r2, #0
 8005170:	4618      	mov	r0, r3
 8005172:	f7fe fd45 	bl	8003c00 <xQueueReceive>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	f47f af45 	bne.w	8005008 <prvProcessReceivedCommands+0x8>
        }
    }
 800517e:	bf00      	nop
 8005180:	bf00      	nop
 8005182:	3728      	adds	r7, #40	; 0x28
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	20000278 	.word	0x20000278

0800518c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005192:	e048      	b.n	8005226 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005194:	4b2d      	ldr	r3, [pc, #180]	; (800524c <prvSwitchTimerLists+0xc0>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800519e:	4b2b      	ldr	r3, [pc, #172]	; (800524c <prvSwitchTimerLists+0xc0>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3304      	adds	r3, #4
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fe fa90 	bl	80036d2 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d02e      	beq.n	8005226 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4413      	add	r3, r2
 80051d0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d90e      	bls.n	80051f8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051e6:	4b19      	ldr	r3, [pc, #100]	; (800524c <prvSwitchTimerLists+0xc0>)
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	3304      	adds	r3, #4
 80051ee:	4619      	mov	r1, r3
 80051f0:	4610      	mov	r0, r2
 80051f2:	f7fe fa35 	bl	8003660 <vListInsert>
 80051f6:	e016      	b.n	8005226 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051f8:	2300      	movs	r3, #0
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	2300      	movs	r3, #0
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	2100      	movs	r1, #0
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f7ff fd7c 	bl	8004d00 <xTimerGenericCommand>
 8005208:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10a      	bne.n	8005226 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	603b      	str	r3, [r7, #0]
    }
 8005222:	bf00      	nop
 8005224:	e7fe      	b.n	8005224 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005226:	4b09      	ldr	r3, [pc, #36]	; (800524c <prvSwitchTimerLists+0xc0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1b1      	bne.n	8005194 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005230:	4b06      	ldr	r3, [pc, #24]	; (800524c <prvSwitchTimerLists+0xc0>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005236:	4b06      	ldr	r3, [pc, #24]	; (8005250 <prvSwitchTimerLists+0xc4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a04      	ldr	r2, [pc, #16]	; (800524c <prvSwitchTimerLists+0xc0>)
 800523c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800523e:	4a04      	ldr	r2, [pc, #16]	; (8005250 <prvSwitchTimerLists+0xc4>)
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	6013      	str	r3, [r2, #0]
    }
 8005244:	bf00      	nop
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20000270 	.word	0x20000270
 8005250:	20000274 	.word	0x20000274

08005254 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005258:	f000 f95e 	bl	8005518 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800525c:	4b12      	ldr	r3, [pc, #72]	; (80052a8 <prvCheckForValidListAndQueue+0x54>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d11d      	bne.n	80052a0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005264:	4811      	ldr	r0, [pc, #68]	; (80052ac <prvCheckForValidListAndQueue+0x58>)
 8005266:	f7fe f9aa 	bl	80035be <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800526a:	4811      	ldr	r0, [pc, #68]	; (80052b0 <prvCheckForValidListAndQueue+0x5c>)
 800526c:	f7fe f9a7 	bl	80035be <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005270:	4b10      	ldr	r3, [pc, #64]	; (80052b4 <prvCheckForValidListAndQueue+0x60>)
 8005272:	4a0e      	ldr	r2, [pc, #56]	; (80052ac <prvCheckForValidListAndQueue+0x58>)
 8005274:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005276:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <prvCheckForValidListAndQueue+0x64>)
 8005278:	4a0d      	ldr	r2, [pc, #52]	; (80052b0 <prvCheckForValidListAndQueue+0x5c>)
 800527a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800527c:	2200      	movs	r2, #0
 800527e:	210c      	movs	r1, #12
 8005280:	200a      	movs	r0, #10
 8005282:	f7fe faab 	bl	80037dc <xQueueGenericCreate>
 8005286:	4603      	mov	r3, r0
 8005288:	4a07      	ldr	r2, [pc, #28]	; (80052a8 <prvCheckForValidListAndQueue+0x54>)
 800528a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800528c:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <prvCheckForValidListAndQueue+0x54>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005294:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <prvCheckForValidListAndQueue+0x54>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4908      	ldr	r1, [pc, #32]	; (80052bc <prvCheckForValidListAndQueue+0x68>)
 800529a:	4618      	mov	r0, r3
 800529c:	f7fe fe94 	bl	8003fc8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80052a0:	f000 f96a 	bl	8005578 <vPortExitCritical>
    }
 80052a4:	bf00      	nop
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	20000278 	.word	0x20000278
 80052ac:	20000248 	.word	0x20000248
 80052b0:	2000025c 	.word	0x2000025c
 80052b4:	20000270 	.word	0x20000270
 80052b8:	20000274 	.word	0x20000274
 80052bc:	08005c3c 	.word	0x08005c3c

080052c0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3b04      	subs	r3, #4
 80052d0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052d8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3b04      	subs	r3, #4
 80052de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f023 0201 	bic.w	r2, r3, #1
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3b04      	subs	r3, #4
 80052ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80052f0:	4a0c      	ldr	r2, [pc, #48]	; (8005324 <pxPortInitialiseStack+0x64>)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3b14      	subs	r3, #20
 80052fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3b04      	subs	r3, #4
 8005306:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f06f 0202 	mvn.w	r2, #2
 800530e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	3b20      	subs	r3, #32
 8005314:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005316:	68fb      	ldr	r3, [r7, #12]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	08005329 	.word	0x08005329

08005328 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800532e:	2300      	movs	r3, #0
 8005330:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005332:	4b12      	ldr	r3, [pc, #72]	; (800537c <prvTaskExitError+0x54>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533a:	d00a      	beq.n	8005352 <prvTaskExitError+0x2a>
        __asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	60fb      	str	r3, [r7, #12]
    }
 800534e:	bf00      	nop
 8005350:	e7fe      	b.n	8005350 <prvTaskExitError+0x28>
        __asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	60bb      	str	r3, [r7, #8]
    }
 8005364:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005366:	bf00      	nop
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0fc      	beq.n	8005368 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800536e:	bf00      	nop
 8005370:	bf00      	nop
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	20000010 	.word	0x20000010

08005380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005380:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <pxCurrentTCBConst2>)
 8005382:	6819      	ldr	r1, [r3, #0]
 8005384:	6808      	ldr	r0, [r1, #0]
 8005386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800538a:	f380 8809 	msr	PSP, r0
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f04f 0000 	mov.w	r0, #0
 8005396:	f380 8811 	msr	BASEPRI, r0
 800539a:	4770      	bx	lr
 800539c:	f3af 8000 	nop.w

080053a0 <pxCurrentTCBConst2>:
 80053a0:	20000144 	.word	0x20000144
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop

080053a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80053a8:	4808      	ldr	r0, [pc, #32]	; (80053cc <prvPortStartFirstTask+0x24>)
 80053aa:	6800      	ldr	r0, [r0, #0]
 80053ac:	6800      	ldr	r0, [r0, #0]
 80053ae:	f380 8808 	msr	MSP, r0
 80053b2:	f04f 0000 	mov.w	r0, #0
 80053b6:	f380 8814 	msr	CONTROL, r0
 80053ba:	b662      	cpsie	i
 80053bc:	b661      	cpsie	f
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	df00      	svc	0
 80053c8:	bf00      	nop
 80053ca:	0000      	.short	0x0000
 80053cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop

080053d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053da:	4b46      	ldr	r3, [pc, #280]	; (80054f4 <xPortStartScheduler+0x120>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a46      	ldr	r2, [pc, #280]	; (80054f8 <xPortStartScheduler+0x124>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d10a      	bne.n	80053fa <xPortStartScheduler+0x26>
        __asm volatile
 80053e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	613b      	str	r3, [r7, #16]
    }
 80053f6:	bf00      	nop
 80053f8:	e7fe      	b.n	80053f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053fa:	4b3e      	ldr	r3, [pc, #248]	; (80054f4 <xPortStartScheduler+0x120>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a3f      	ldr	r2, [pc, #252]	; (80054fc <xPortStartScheduler+0x128>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d10a      	bne.n	800541a <xPortStartScheduler+0x46>
        __asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	60fb      	str	r3, [r7, #12]
    }
 8005416:	bf00      	nop
 8005418:	e7fe      	b.n	8005418 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800541a:	4b39      	ldr	r3, [pc, #228]	; (8005500 <xPortStartScheduler+0x12c>)
 800541c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	b2db      	uxtb	r3, r3
 8005424:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	22ff      	movs	r2, #255	; 0xff
 800542a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	b2db      	uxtb	r3, r3
 8005438:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800543c:	b2da      	uxtb	r2, r3
 800543e:	4b31      	ldr	r3, [pc, #196]	; (8005504 <xPortStartScheduler+0x130>)
 8005440:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005442:	4b31      	ldr	r3, [pc, #196]	; (8005508 <xPortStartScheduler+0x134>)
 8005444:	2207      	movs	r2, #7
 8005446:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005448:	e009      	b.n	800545e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800544a:	4b2f      	ldr	r3, [pc, #188]	; (8005508 <xPortStartScheduler+0x134>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3b01      	subs	r3, #1
 8005450:	4a2d      	ldr	r2, [pc, #180]	; (8005508 <xPortStartScheduler+0x134>)
 8005452:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005454:	78fb      	ldrb	r3, [r7, #3]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	b2db      	uxtb	r3, r3
 800545c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800545e:	78fb      	ldrb	r3, [r7, #3]
 8005460:	b2db      	uxtb	r3, r3
 8005462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005466:	2b80      	cmp	r3, #128	; 0x80
 8005468:	d0ef      	beq.n	800544a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800546a:	4b27      	ldr	r3, [pc, #156]	; (8005508 <xPortStartScheduler+0x134>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f1c3 0307 	rsb	r3, r3, #7
 8005472:	2b04      	cmp	r3, #4
 8005474:	d00a      	beq.n	800548c <xPortStartScheduler+0xb8>
        __asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	60bb      	str	r3, [r7, #8]
    }
 8005488:	bf00      	nop
 800548a:	e7fe      	b.n	800548a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800548c:	4b1e      	ldr	r3, [pc, #120]	; (8005508 <xPortStartScheduler+0x134>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	021b      	lsls	r3, r3, #8
 8005492:	4a1d      	ldr	r2, [pc, #116]	; (8005508 <xPortStartScheduler+0x134>)
 8005494:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005496:	4b1c      	ldr	r3, [pc, #112]	; (8005508 <xPortStartScheduler+0x134>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800549e:	4a1a      	ldr	r2, [pc, #104]	; (8005508 <xPortStartScheduler+0x134>)
 80054a0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80054aa:	4b18      	ldr	r3, [pc, #96]	; (800550c <xPortStartScheduler+0x138>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a17      	ldr	r2, [pc, #92]	; (800550c <xPortStartScheduler+0x138>)
 80054b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054b4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80054b6:	4b15      	ldr	r3, [pc, #84]	; (800550c <xPortStartScheduler+0x138>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a14      	ldr	r2, [pc, #80]	; (800550c <xPortStartScheduler+0x138>)
 80054bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80054c0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80054c2:	f000 f8db 	bl	800567c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80054c6:	4b12      	ldr	r3, [pc, #72]	; (8005510 <xPortStartScheduler+0x13c>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80054cc:	f000 f8fa 	bl	80056c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80054d0:	4b10      	ldr	r3, [pc, #64]	; (8005514 <xPortStartScheduler+0x140>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a0f      	ldr	r2, [pc, #60]	; (8005514 <xPortStartScheduler+0x140>)
 80054d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80054da:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80054dc:	f7ff ff64 	bl	80053a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80054e0:	f7ff f89c 	bl	800461c <vTaskSwitchContext>
    prvTaskExitError();
 80054e4:	f7ff ff20 	bl	8005328 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	e000ed00 	.word	0xe000ed00
 80054f8:	410fc271 	.word	0x410fc271
 80054fc:	410fc270 	.word	0x410fc270
 8005500:	e000e400 	.word	0xe000e400
 8005504:	20000284 	.word	0x20000284
 8005508:	20000288 	.word	0x20000288
 800550c:	e000ed20 	.word	0xe000ed20
 8005510:	20000010 	.word	0x20000010
 8005514:	e000ef34 	.word	0xe000ef34

08005518 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
        __asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	607b      	str	r3, [r7, #4]
    }
 8005530:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005532:	4b0f      	ldr	r3, [pc, #60]	; (8005570 <vPortEnterCritical+0x58>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3301      	adds	r3, #1
 8005538:	4a0d      	ldr	r2, [pc, #52]	; (8005570 <vPortEnterCritical+0x58>)
 800553a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800553c:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <vPortEnterCritical+0x58>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d10f      	bne.n	8005564 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005544:	4b0b      	ldr	r3, [pc, #44]	; (8005574 <vPortEnterCritical+0x5c>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <vPortEnterCritical+0x4c>
        __asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	603b      	str	r3, [r7, #0]
    }
 8005560:	bf00      	nop
 8005562:	e7fe      	b.n	8005562 <vPortEnterCritical+0x4a>
    }
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	20000010 	.word	0x20000010
 8005574:	e000ed04 	.word	0xe000ed04

08005578 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800557e:	4b12      	ldr	r3, [pc, #72]	; (80055c8 <vPortExitCritical+0x50>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <vPortExitCritical+0x24>
        __asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	607b      	str	r3, [r7, #4]
    }
 8005598:	bf00      	nop
 800559a:	e7fe      	b.n	800559a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800559c:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <vPortExitCritical+0x50>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	4a09      	ldr	r2, [pc, #36]	; (80055c8 <vPortExitCritical+0x50>)
 80055a4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80055a6:	4b08      	ldr	r3, [pc, #32]	; (80055c8 <vPortExitCritical+0x50>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d105      	bne.n	80055ba <vPortExitCritical+0x42>
 80055ae:	2300      	movs	r3, #0
 80055b0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	f383 8811 	msr	BASEPRI, r3
    }
 80055b8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80055ba:	bf00      	nop
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	20000010 	.word	0x20000010
 80055cc:	00000000 	.word	0x00000000

080055d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80055d0:	f3ef 8009 	mrs	r0, PSP
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	4b15      	ldr	r3, [pc, #84]	; (8005630 <pxCurrentTCBConst>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	f01e 0f10 	tst.w	lr, #16
 80055e0:	bf08      	it	eq
 80055e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ea:	6010      	str	r0, [r2, #0]
 80055ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055f4:	f380 8811 	msr	BASEPRI, r0
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f7ff f80c 	bl	800461c <vTaskSwitchContext>
 8005604:	f04f 0000 	mov.w	r0, #0
 8005608:	f380 8811 	msr	BASEPRI, r0
 800560c:	bc09      	pop	{r0, r3}
 800560e:	6819      	ldr	r1, [r3, #0]
 8005610:	6808      	ldr	r0, [r1, #0]
 8005612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005616:	f01e 0f10 	tst.w	lr, #16
 800561a:	bf08      	it	eq
 800561c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005620:	f380 8809 	msr	PSP, r0
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	f3af 8000 	nop.w

08005630 <pxCurrentTCBConst>:
 8005630:	20000144 	.word	0x20000144
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop

08005638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
        __asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	607b      	str	r3, [r7, #4]
    }
 8005650:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005652:	f7fe ff4d 	bl	80044f0 <xTaskIncrementTick>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800565c:	4b06      	ldr	r3, [pc, #24]	; (8005678 <SysTick_Handler+0x40>)
 800565e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	2300      	movs	r3, #0
 8005666:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	f383 8811 	msr	BASEPRI, r3
    }
 800566e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005670:	bf00      	nop
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	e000ed04 	.word	0xe000ed04

0800567c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005680:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <vPortSetupTimerInterrupt+0x34>)
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005686:	4b0b      	ldr	r3, [pc, #44]	; (80056b4 <vPortSetupTimerInterrupt+0x38>)
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800568c:	4b0a      	ldr	r3, [pc, #40]	; (80056b8 <vPortSetupTimerInterrupt+0x3c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a0a      	ldr	r2, [pc, #40]	; (80056bc <vPortSetupTimerInterrupt+0x40>)
 8005692:	fba2 2303 	umull	r2, r3, r2, r3
 8005696:	099b      	lsrs	r3, r3, #6
 8005698:	4a09      	ldr	r2, [pc, #36]	; (80056c0 <vPortSetupTimerInterrupt+0x44>)
 800569a:	3b01      	subs	r3, #1
 800569c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800569e:	4b04      	ldr	r3, [pc, #16]	; (80056b0 <vPortSetupTimerInterrupt+0x34>)
 80056a0:	2207      	movs	r2, #7
 80056a2:	601a      	str	r2, [r3, #0]
}
 80056a4:	bf00      	nop
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	e000e010 	.word	0xe000e010
 80056b4:	e000e018 	.word	0xe000e018
 80056b8:	20000000 	.word	0x20000000
 80056bc:	10624dd3 	.word	0x10624dd3
 80056c0:	e000e014 	.word	0xe000e014

080056c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80056c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80056d4 <vPortEnableVFP+0x10>
 80056c8:	6801      	ldr	r1, [r0, #0]
 80056ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80056ce:	6001      	str	r1, [r0, #0]
 80056d0:	4770      	bx	lr
 80056d2:	0000      	.short	0x0000
 80056d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80056d8:	bf00      	nop
 80056da:	bf00      	nop

080056dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80056e2:	f3ef 8305 	mrs	r3, IPSR
 80056e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b0f      	cmp	r3, #15
 80056ec:	d914      	bls.n	8005718 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056ee:	4a17      	ldr	r2, [pc, #92]	; (800574c <vPortValidateInterruptPriority+0x70>)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4413      	add	r3, r2
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056f8:	4b15      	ldr	r3, [pc, #84]	; (8005750 <vPortValidateInterruptPriority+0x74>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	7afa      	ldrb	r2, [r7, #11]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d20a      	bcs.n	8005718 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	607b      	str	r3, [r7, #4]
    }
 8005714:	bf00      	nop
 8005716:	e7fe      	b.n	8005716 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005718:	4b0e      	ldr	r3, [pc, #56]	; (8005754 <vPortValidateInterruptPriority+0x78>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005720:	4b0d      	ldr	r3, [pc, #52]	; (8005758 <vPortValidateInterruptPriority+0x7c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d90a      	bls.n	800573e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	603b      	str	r3, [r7, #0]
    }
 800573a:	bf00      	nop
 800573c:	e7fe      	b.n	800573c <vPortValidateInterruptPriority+0x60>
    }
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	e000e3f0 	.word	0xe000e3f0
 8005750:	20000284 	.word	0x20000284
 8005754:	e000ed0c 	.word	0xe000ed0c
 8005758:	20000288 	.word	0x20000288

0800575c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b08a      	sub	sp, #40	; 0x28
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005764:	2300      	movs	r3, #0
 8005766:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005768:	f7fe fe16 	bl	8004398 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800576c:	4b65      	ldr	r3, [pc, #404]	; (8005904 <pvPortMalloc+0x1a8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005774:	f000 f934 	bl	80059e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005778:	4b63      	ldr	r3, [pc, #396]	; (8005908 <pvPortMalloc+0x1ac>)
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4013      	ands	r3, r2
 8005780:	2b00      	cmp	r3, #0
 8005782:	f040 80a7 	bne.w	80058d4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d02d      	beq.n	80057e8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800578c:	2208      	movs	r2, #8
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	429a      	cmp	r2, r3
 8005796:	d227      	bcs.n	80057e8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005798:	2208      	movs	r2, #8
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4413      	add	r3, r2
 800579e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d021      	beq.n	80057ee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f023 0307 	bic.w	r3, r3, #7
 80057b0:	3308      	adds	r3, #8
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d214      	bcs.n	80057e2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f023 0307 	bic.w	r3, r3, #7
 80057be:	3308      	adds	r3, #8
 80057c0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d010      	beq.n	80057ee <pvPortMalloc+0x92>
        __asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	617b      	str	r3, [r7, #20]
    }
 80057de:	bf00      	nop
 80057e0:	e7fe      	b.n	80057e0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80057e2:	2300      	movs	r3, #0
 80057e4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057e6:	e002      	b.n	80057ee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	607b      	str	r3, [r7, #4]
 80057ec:	e000      	b.n	80057f0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057ee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d06e      	beq.n	80058d4 <pvPortMalloc+0x178>
 80057f6:	4b45      	ldr	r3, [pc, #276]	; (800590c <pvPortMalloc+0x1b0>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d869      	bhi.n	80058d4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005800:	4b43      	ldr	r3, [pc, #268]	; (8005910 <pvPortMalloc+0x1b4>)
 8005802:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005804:	4b42      	ldr	r3, [pc, #264]	; (8005910 <pvPortMalloc+0x1b4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800580a:	e004      	b.n	8005816 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	429a      	cmp	r2, r3
 800581e:	d903      	bls.n	8005828 <pvPortMalloc+0xcc>
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1f1      	bne.n	800580c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005828:	4b36      	ldr	r3, [pc, #216]	; (8005904 <pvPortMalloc+0x1a8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800582e:	429a      	cmp	r2, r3
 8005830:	d050      	beq.n	80058d4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2208      	movs	r2, #8
 8005838:	4413      	add	r3, r2
 800583a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	1ad2      	subs	r2, r2, r3
 800584c:	2308      	movs	r3, #8
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	429a      	cmp	r2, r3
 8005852:	d91f      	bls.n	8005894 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4413      	add	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	f003 0307 	and.w	r3, r3, #7
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <pvPortMalloc+0x120>
        __asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	613b      	str	r3, [r7, #16]
    }
 8005878:	bf00      	nop
 800587a:	e7fe      	b.n	800587a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	1ad2      	subs	r2, r2, r3
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800588e:	69b8      	ldr	r0, [r7, #24]
 8005890:	f000 f908 	bl	8005aa4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005894:	4b1d      	ldr	r3, [pc, #116]	; (800590c <pvPortMalloc+0x1b0>)
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	4a1b      	ldr	r2, [pc, #108]	; (800590c <pvPortMalloc+0x1b0>)
 80058a0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058a2:	4b1a      	ldr	r3, [pc, #104]	; (800590c <pvPortMalloc+0x1b0>)
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	4b1b      	ldr	r3, [pc, #108]	; (8005914 <pvPortMalloc+0x1b8>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d203      	bcs.n	80058b6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058ae:	4b17      	ldr	r3, [pc, #92]	; (800590c <pvPortMalloc+0x1b0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a18      	ldr	r2, [pc, #96]	; (8005914 <pvPortMalloc+0x1b8>)
 80058b4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	4b13      	ldr	r3, [pc, #76]	; (8005908 <pvPortMalloc+0x1ac>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	431a      	orrs	r2, r3
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80058ca:	4b13      	ldr	r3, [pc, #76]	; (8005918 <pvPortMalloc+0x1bc>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3301      	adds	r3, #1
 80058d0:	4a11      	ldr	r2, [pc, #68]	; (8005918 <pvPortMalloc+0x1bc>)
 80058d2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80058d4:	f7fe fd6e 	bl	80043b4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <pvPortMalloc+0x19c>
        __asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	60fb      	str	r3, [r7, #12]
    }
 80058f4:	bf00      	nop
 80058f6:	e7fe      	b.n	80058f6 <pvPortMalloc+0x19a>
    return pvReturn;
 80058f8:	69fb      	ldr	r3, [r7, #28]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3728      	adds	r7, #40	; 0x28
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20012e94 	.word	0x20012e94
 8005908:	20012ea8 	.word	0x20012ea8
 800590c:	20012e98 	.word	0x20012e98
 8005910:	20012e8c 	.word	0x20012e8c
 8005914:	20012e9c 	.word	0x20012e9c
 8005918:	20012ea0 	.word	0x20012ea0

0800591c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d04d      	beq.n	80059ca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800592e:	2308      	movs	r3, #8
 8005930:	425b      	negs	r3, r3
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	4413      	add	r3, r2
 8005936:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	4b24      	ldr	r3, [pc, #144]	; (80059d4 <vPortFree+0xb8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4013      	ands	r3, r2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10a      	bne.n	8005960 <vPortFree+0x44>
        __asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	60fb      	str	r3, [r7, #12]
    }
 800595c:	bf00      	nop
 800595e:	e7fe      	b.n	800595e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00a      	beq.n	800597e <vPortFree+0x62>
        __asm volatile
 8005968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596c:	f383 8811 	msr	BASEPRI, r3
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	60bb      	str	r3, [r7, #8]
    }
 800597a:	bf00      	nop
 800597c:	e7fe      	b.n	800597c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	4b14      	ldr	r3, [pc, #80]	; (80059d4 <vPortFree+0xb8>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4013      	ands	r3, r2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01e      	beq.n	80059ca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d11a      	bne.n	80059ca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	4b0e      	ldr	r3, [pc, #56]	; (80059d4 <vPortFree+0xb8>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	43db      	mvns	r3, r3
 800599e:	401a      	ands	r2, r3
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80059a4:	f7fe fcf8 	bl	8004398 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <vPortFree+0xbc>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4413      	add	r3, r2
 80059b2:	4a09      	ldr	r2, [pc, #36]	; (80059d8 <vPortFree+0xbc>)
 80059b4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059b6:	6938      	ldr	r0, [r7, #16]
 80059b8:	f000 f874 	bl	8005aa4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80059bc:	4b07      	ldr	r3, [pc, #28]	; (80059dc <vPortFree+0xc0>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3301      	adds	r3, #1
 80059c2:	4a06      	ldr	r2, [pc, #24]	; (80059dc <vPortFree+0xc0>)
 80059c4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80059c6:	f7fe fcf5 	bl	80043b4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80059ca:	bf00      	nop
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20012ea8 	.word	0x20012ea8
 80059d8:	20012e98 	.word	0x20012e98
 80059dc:	20012ea4 	.word	0x20012ea4

080059e0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059e6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80059ea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80059ec:	4b27      	ldr	r3, [pc, #156]	; (8005a8c <prvHeapInit+0xac>)
 80059ee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00c      	beq.n	8005a14 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	3307      	adds	r3, #7
 80059fe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0307 	bic.w	r3, r3, #7
 8005a06:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	4a1f      	ldr	r2, [pc, #124]	; (8005a8c <prvHeapInit+0xac>)
 8005a10:	4413      	add	r3, r2
 8005a12:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a18:	4a1d      	ldr	r2, [pc, #116]	; (8005a90 <prvHeapInit+0xb0>)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005a1e:	4b1c      	ldr	r3, [pc, #112]	; (8005a90 <prvHeapInit+0xb0>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	4413      	add	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005a2c:	2208      	movs	r2, #8
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	1a9b      	subs	r3, r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0307 	bic.w	r3, r3, #7
 8005a3a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4a15      	ldr	r2, [pc, #84]	; (8005a94 <prvHeapInit+0xb4>)
 8005a40:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005a42:	4b14      	ldr	r3, [pc, #80]	; (8005a94 <prvHeapInit+0xb4>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2200      	movs	r2, #0
 8005a48:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005a4a:	4b12      	ldr	r3, [pc, #72]	; (8005a94 <prvHeapInit+0xb4>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	1ad2      	subs	r2, r2, r3
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a60:	4b0c      	ldr	r3, [pc, #48]	; (8005a94 <prvHeapInit+0xb4>)
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	4a0a      	ldr	r2, [pc, #40]	; (8005a98 <prvHeapInit+0xb8>)
 8005a6e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	4a09      	ldr	r2, [pc, #36]	; (8005a9c <prvHeapInit+0xbc>)
 8005a76:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a78:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <prvHeapInit+0xc0>)
 8005a7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a7e:	601a      	str	r2, [r3, #0]
}
 8005a80:	bf00      	nop
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	2000028c 	.word	0x2000028c
 8005a90:	20012e8c 	.word	0x20012e8c
 8005a94:	20012e94 	.word	0x20012e94
 8005a98:	20012e9c 	.word	0x20012e9c
 8005a9c:	20012e98 	.word	0x20012e98
 8005aa0:	20012ea8 	.word	0x20012ea8

08005aa4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005aac:	4b28      	ldr	r3, [pc, #160]	; (8005b50 <prvInsertBlockIntoFreeList+0xac>)
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	e002      	b.n	8005ab8 <prvInsertBlockIntoFreeList+0x14>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d8f7      	bhi.n	8005ab2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	4413      	add	r3, r2
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d108      	bne.n	8005ae6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	441a      	add	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	441a      	add	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d118      	bne.n	8005b2c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	4b15      	ldr	r3, [pc, #84]	; (8005b54 <prvInsertBlockIntoFreeList+0xb0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d00d      	beq.n	8005b22 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	441a      	add	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	e008      	b.n	8005b34 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b22:	4b0c      	ldr	r3, [pc, #48]	; (8005b54 <prvInsertBlockIntoFreeList+0xb0>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	e003      	b.n	8005b34 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d002      	beq.n	8005b42 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005b42:	bf00      	nop
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	20012e8c 	.word	0x20012e8c
 8005b54:	20012e94 	.word	0x20012e94

08005b58 <__libc_init_array>:
 8005b58:	b570      	push	{r4, r5, r6, lr}
 8005b5a:	4d0d      	ldr	r5, [pc, #52]	; (8005b90 <__libc_init_array+0x38>)
 8005b5c:	4c0d      	ldr	r4, [pc, #52]	; (8005b94 <__libc_init_array+0x3c>)
 8005b5e:	1b64      	subs	r4, r4, r5
 8005b60:	10a4      	asrs	r4, r4, #2
 8005b62:	2600      	movs	r6, #0
 8005b64:	42a6      	cmp	r6, r4
 8005b66:	d109      	bne.n	8005b7c <__libc_init_array+0x24>
 8005b68:	4d0b      	ldr	r5, [pc, #44]	; (8005b98 <__libc_init_array+0x40>)
 8005b6a:	4c0c      	ldr	r4, [pc, #48]	; (8005b9c <__libc_init_array+0x44>)
 8005b6c:	f000 f82e 	bl	8005bcc <_init>
 8005b70:	1b64      	subs	r4, r4, r5
 8005b72:	10a4      	asrs	r4, r4, #2
 8005b74:	2600      	movs	r6, #0
 8005b76:	42a6      	cmp	r6, r4
 8005b78:	d105      	bne.n	8005b86 <__libc_init_array+0x2e>
 8005b7a:	bd70      	pop	{r4, r5, r6, pc}
 8005b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b80:	4798      	blx	r3
 8005b82:	3601      	adds	r6, #1
 8005b84:	e7ee      	b.n	8005b64 <__libc_init_array+0xc>
 8005b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b8a:	4798      	blx	r3
 8005b8c:	3601      	adds	r6, #1
 8005b8e:	e7f2      	b.n	8005b76 <__libc_init_array+0x1e>
 8005b90:	08005c94 	.word	0x08005c94
 8005b94:	08005c94 	.word	0x08005c94
 8005b98:	08005c94 	.word	0x08005c94
 8005b9c:	08005c98 	.word	0x08005c98

08005ba0 <memcpy>:
 8005ba0:	440a      	add	r2, r1
 8005ba2:	4291      	cmp	r1, r2
 8005ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ba8:	d100      	bne.n	8005bac <memcpy+0xc>
 8005baa:	4770      	bx	lr
 8005bac:	b510      	push	{r4, lr}
 8005bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bb6:	4291      	cmp	r1, r2
 8005bb8:	d1f9      	bne.n	8005bae <memcpy+0xe>
 8005bba:	bd10      	pop	{r4, pc}

08005bbc <memset>:
 8005bbc:	4402      	add	r2, r0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d100      	bne.n	8005bc6 <memset+0xa>
 8005bc4:	4770      	bx	lr
 8005bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bca:	e7f9      	b.n	8005bc0 <memset+0x4>

08005bcc <_init>:
 8005bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bce:	bf00      	nop
 8005bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd2:	bc08      	pop	{r3}
 8005bd4:	469e      	mov	lr, r3
 8005bd6:	4770      	bx	lr

08005bd8 <_fini>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	bf00      	nop
 8005bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bde:	bc08      	pop	{r3}
 8005be0:	469e      	mov	lr, r3
 8005be2:	4770      	bx	lr
