
freertos_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005e64  08005e64  00015e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f0c  08005f0c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005f0c  08005f0c  00015f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f14  08005f14  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f14  08005f14  00015f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f18  08005f18  00015f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e98  20000014  08005f30  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012eac  08005f30  00022eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015aff  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd0  00000000  00000000  00035b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  00038918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  00039c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002867f  00000000  00000000  0003ae90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016284  00000000  00000000  0006350f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcaf0  00000000  00000000  00079793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00176283  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050d0  00000000  00000000  001762d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e4c 	.word	0x08005e4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08005e4c 	.word	0x08005e4c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fac3 	bl	8000a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f847 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f8c7 	bl	8000674 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e6:	f000 f895 	bl	8000614 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1\r\n", 2, &task1_handle);
 80004ea:	f107 0308 	add.w	r3, r7, #8
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	2302      	movs	r3, #2
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <main+0x84>)
 80004f6:	22c8      	movs	r2, #200	; 0xc8
 80004f8:	4918      	ldr	r1, [pc, #96]	; (800055c <main+0x88>)
 80004fa:	4819      	ldr	r0, [pc, #100]	; (8000560 <main+0x8c>)
 80004fc:	f003 febc 	bl	8004278 <xTaskCreate>
 8000500:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d00a      	beq.n	800051e <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800050c:	f383 8811 	msr	BASEPRI, r3
 8000510:	f3bf 8f6f 	isb	sy
 8000514:	f3bf 8f4f 	dsb	sy
 8000518:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800051a:	bf00      	nop
 800051c:	e7fe      	b.n	800051c <main+0x48>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2\r\n", 2, &task2_handle);
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2302      	movs	r3, #2
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <main+0x90>)
 8000528:	22c8      	movs	r2, #200	; 0xc8
 800052a:	490f      	ldr	r1, [pc, #60]	; (8000568 <main+0x94>)
 800052c:	480f      	ldr	r0, [pc, #60]	; (800056c <main+0x98>)
 800052e:	f003 fea3 	bl	8004278 <xTaskCreate>
 8000532:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d00a      	beq.n	8000550 <main+0x7c>
        __asm volatile
 800053a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800053e:	f383 8811 	msr	BASEPRI, r3
 8000542:	f3bf 8f6f 	isb	sy
 8000546:	f3bf 8f4f 	dsb	sy
 800054a:	60fb      	str	r3, [r7, #12]
    }
 800054c:	bf00      	nop
 800054e:	e7fe      	b.n	800054e <main+0x7a>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000550:	f003 ffd8 	bl	8004504 <vTaskStartScheduler>
  //insufficient memory in heap
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000554:	e7fe      	b.n	8000554 <main+0x80>
 8000556:	bf00      	nop
 8000558:	08005e64 	.word	0x08005e64
 800055c:	08005e80 	.word	0x08005e80
 8000560:	08000741 	.word	0x08000741
 8000564:	08005e88 	.word	0x08005e88
 8000568:	08005ea4 	.word	0x08005ea4
 800056c:	08000765 	.word	0x08000765

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b096      	sub	sp, #88	; 0x58
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2244      	movs	r2, #68	; 0x44
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f005 fc5c 	bl	8005e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	463b      	mov	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000592:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000596:	f000 fd7b 	bl	8001090 <HAL_PWREx_ControlVoltageScaling>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a0:	f000 f904 	bl	80007ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a4:	2302      	movs	r3, #2
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ae:	2310      	movs	r3, #16
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b6:	2302      	movs	r3, #2
 80005b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ba:	2301      	movs	r3, #1
 80005bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005be:	230a      	movs	r3, #10
 80005c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005c2:	2307      	movs	r3, #7
 80005c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 fdb2 	bl	800113c <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005de:	f000 f8e5 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2303      	movs	r3, #3
 80005e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	2104      	movs	r1, #4
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 f97a 	bl	80018f4 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000606:	f000 f8d1 	bl	80007ac <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3758      	adds	r7, #88	; 0x58
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_USART2_UART_Init+0x58>)
 800061a:	4a15      	ldr	r2, [pc, #84]	; (8000670 <MX_USART2_UART_Init+0x5c>)
 800061c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061e:	4b13      	ldr	r3, [pc, #76]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_USART2_UART_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_USART2_UART_Init+0x58>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_USART2_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000658:	f002 fb30 	bl	8002cbc <HAL_UART_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000662:	f000 f8a3 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000030 	.word	0x20000030
 8000670:	40004400 	.word	0x40004400

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a2a      	ldr	r2, [pc, #168]	; (8000738 <MX_GPIO_Init+0xc4>)
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b28      	ldr	r3, [pc, #160]	; (8000738 <MX_GPIO_Init+0xc4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0304 	and.w	r3, r3, #4
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a2:	4b25      	ldr	r3, [pc, #148]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	4a24      	ldr	r2, [pc, #144]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ae:	4b22      	ldr	r3, [pc, #136]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4a1e      	ldr	r2, [pc, #120]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	4a18      	ldr	r2, [pc, #96]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2120      	movs	r1, #32
 80006ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f2:	f000 fca7 	bl	8001044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	480b      	ldr	r0, [pc, #44]	; (800073c <MX_GPIO_Init+0xc8>)
 800070e:	f000 faef 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000712:	2320      	movs	r3, #32
 8000714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072c:	f000 fae0 	bl	8000cf0 <HAL_GPIO_Init>

}
 8000730:	bf00      	nop
 8000732:	3728      	adds	r7, #40	; 0x28
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40021000 	.word	0x40021000
 800073c:	48000800 	.word	0x48000800

08000740 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	//char msg[100];

	while(1)
	{
        //uint8_t Test[] = "Hello World !!!\r\n"; //Data to send
        HAL_UART_Transmit(&huart2,(char*)parameters,100,10);// Sending in normal mode
 8000748:	230a      	movs	r3, #10
 800074a:	2264      	movs	r2, #100	; 0x64
 800074c:	6879      	ldr	r1, [r7, #4]
 800074e:	4804      	ldr	r0, [pc, #16]	; (8000760 <task1_handler+0x20>)
 8000750:	f002 fb02 	bl	8002d58 <HAL_UART_Transmit>
        HAL_Delay(1000);
 8000754:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000758:	f000 f9c4 	bl	8000ae4 <HAL_Delay>
        HAL_UART_Transmit(&huart2,(char*)parameters,100,10);// Sending in normal mode
 800075c:	e7f4      	b.n	8000748 <task1_handler+0x8>
 800075e:	bf00      	nop
 8000760:	20000030 	.word	0x20000030

08000764 <task2_handler>:
		//taskYIELD();
	}
}

static void task2_handler(void* parameters)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	//char msg[100];
	while(1)
	{
        HAL_UART_Transmit(&huart2,(char*)parameters,100,10);// Sending in normal mode
 800076c:	230a      	movs	r3, #10
 800076e:	2264      	movs	r2, #100	; 0x64
 8000770:	6879      	ldr	r1, [r7, #4]
 8000772:	4804      	ldr	r0, [pc, #16]	; (8000784 <task2_handler+0x20>)
 8000774:	f002 faf0 	bl	8002d58 <HAL_UART_Transmit>
        HAL_Delay(1000);
 8000778:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077c:	f000 f9b2 	bl	8000ae4 <HAL_Delay>
        HAL_UART_Transmit(&huart2,(char*)parameters,100,10);// Sending in normal mode
 8000780:	e7f4      	b.n	800076c <task2_handler+0x8>
 8000782:	bf00      	nop
 8000784:	20000030 	.word	0x20000030

08000788 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d101      	bne.n	800079e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800079a:	f000 f983 	bl	8000aa4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40001000 	.word	0x40001000

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <HAL_MspInit+0x44>)
 80007c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c2:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <HAL_MspInit+0x44>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6613      	str	r3, [r2, #96]	; 0x60
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_MspInit+0x44>)
 80007cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_MspInit+0x44>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <HAL_MspInit+0x44>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	6593      	str	r3, [r2, #88]	; 0x58
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_MspInit+0x44>)
 80007e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b0ac      	sub	sp, #176	; 0xb0
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2288      	movs	r2, #136	; 0x88
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f005 fb0b 	bl	8005e3c <memset>
  if(huart->Instance==USART2)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a21      	ldr	r2, [pc, #132]	; (80008b0 <HAL_UART_MspInit+0xb0>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d13b      	bne.n	80008a8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000830:	2302      	movs	r3, #2
 8000832:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000834:	2300      	movs	r3, #0
 8000836:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4618      	mov	r0, r3
 800083e:	f001 faaf 	bl	8001da0 <HAL_RCCEx_PeriphCLKConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000848:	f7ff ffb0 	bl	80007ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800084c:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <HAL_UART_MspInit+0xb4>)
 800084e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000850:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <HAL_UART_MspInit+0xb4>)
 8000852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000856:	6593      	str	r3, [r2, #88]	; 0x58
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <HAL_UART_MspInit+0xb4>)
 800085a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <HAL_UART_MspInit+0xb4>)
 8000866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000868:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <HAL_UART_MspInit+0xb4>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_UART_MspInit+0xb4>)
 8000872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800087c:	230c      	movs	r3, #12
 800087e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000894:	2307      	movs	r3, #7
 8000896:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800089e:	4619      	mov	r1, r3
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a4:	f000 fa24 	bl	8000cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a8:	bf00      	nop
 80008aa:	37b0      	adds	r7, #176	; 0xb0
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40004400 	.word	0x40004400
 80008b4:	40021000 	.word	0x40021000

080008b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08e      	sub	sp, #56	; 0x38
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008c0:	2300      	movs	r3, #0
 80008c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008c6:	4b34      	ldr	r3, [pc, #208]	; (8000998 <HAL_InitTick+0xe0>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	4a33      	ldr	r2, [pc, #204]	; (8000998 <HAL_InitTick+0xe0>)
 80008cc:	f043 0310 	orr.w	r3, r3, #16
 80008d0:	6593      	str	r3, [r2, #88]	; 0x58
 80008d2:	4b31      	ldr	r3, [pc, #196]	; (8000998 <HAL_InitTick+0xe0>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d6:	f003 0310 	and.w	r3, r3, #16
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008de:	f107 0210 	add.w	r2, r7, #16
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 f9c7 	bl	8001c7c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008ee:	6a3b      	ldr	r3, [r7, #32]
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d103      	bne.n	8000900 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008f8:	f001 f994 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 80008fc:	6378      	str	r0, [r7, #52]	; 0x34
 80008fe:	e004      	b.n	800090a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000900:	f001 f990 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 8000904:	4603      	mov	r3, r0
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800090a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800090c:	4a23      	ldr	r2, [pc, #140]	; (800099c <HAL_InitTick+0xe4>)
 800090e:	fba2 2303 	umull	r2, r3, r2, r3
 8000912:	0c9b      	lsrs	r3, r3, #18
 8000914:	3b01      	subs	r3, #1
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000918:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <HAL_InitTick+0xe8>)
 800091a:	4a22      	ldr	r2, [pc, #136]	; (80009a4 <HAL_InitTick+0xec>)
 800091c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800091e:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <HAL_InitTick+0xe8>)
 8000920:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000924:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000926:	4a1e      	ldr	r2, [pc, #120]	; (80009a0 <HAL_InitTick+0xe8>)
 8000928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <HAL_InitTick+0xe8>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <HAL_InitTick+0xe8>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <HAL_InitTick+0xe8>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800093e:	4818      	ldr	r0, [pc, #96]	; (80009a0 <HAL_InitTick+0xe8>)
 8000940:	f001 feea 	bl	8002718 <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800094a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800094e:	2b00      	cmp	r3, #0
 8000950:	d11b      	bne.n	800098a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000952:	4813      	ldr	r0, [pc, #76]	; (80009a0 <HAL_InitTick+0xe8>)
 8000954:	f001 ff42 	bl	80027dc <HAL_TIM_Base_Start_IT>
 8000958:	4603      	mov	r3, r0
 800095a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800095e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000962:	2b00      	cmp	r3, #0
 8000964:	d111      	bne.n	800098a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000966:	2036      	movs	r0, #54	; 0x36
 8000968:	f000 f9b4 	bl	8000cd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b0f      	cmp	r3, #15
 8000970:	d808      	bhi.n	8000984 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000972:	2200      	movs	r2, #0
 8000974:	6879      	ldr	r1, [r7, #4]
 8000976:	2036      	movs	r0, #54	; 0x36
 8000978:	f000 f990 	bl	8000c9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800097c:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <HAL_InitTick+0xf0>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
 8000982:	e002      	b.n	800098a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000984:	2301      	movs	r3, #1
 8000986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800098a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800098e:	4618      	mov	r0, r3
 8000990:	3738      	adds	r7, #56	; 0x38
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000
 800099c:	431bde83 	.word	0x431bde83
 80009a0:	200000b4 	.word	0x200000b4
 80009a4:	40001000 	.word	0x40001000
 80009a8:	20000004 	.word	0x20000004

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <NMI_Handler+0x4>

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <TIM6_DAC_IRQHandler+0x10>)
 80009de:	f001 ff6d 	bl	80028bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200000b4 	.word	0x200000b4

080009ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <SystemInit+0x20>)
 80009f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <SystemInit+0x20>)
 80009f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a14:	f7ff ffea 	bl	80009ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1a:	490d      	ldr	r1, [pc, #52]	; (8000a50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <LoopForever+0xe>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a20:	e002      	b.n	8000a28 <LoopCopyDataInit>

08000a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a26:	3304      	adds	r3, #4

08000a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a2c:	d3f9      	bcc.n	8000a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a30:	4c0a      	ldr	r4, [pc, #40]	; (8000a5c <LoopForever+0x16>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a34:	e001      	b.n	8000a3a <LoopFillZerobss>

08000a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a38:	3204      	adds	r2, #4

08000a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a3c:	d3fb      	bcc.n	8000a36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a3e:	f005 f9cb 	bl	8005dd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a42:	f7ff fd47 	bl	80004d4 <main>

08000a46 <LoopForever>:

LoopForever:
    b LoopForever
 8000a46:	e7fe      	b.n	8000a46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a48:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a54:	08005f1c 	.word	0x08005f1c
  ldr r2, =_sbss
 8000a58:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a5c:	20012eac 	.word	0x20012eac

08000a60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC1_2_IRQHandler>
	...

08000a64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_Init+0x3c>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <HAL_Init+0x3c>)
 8000a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7a:	2003      	movs	r0, #3
 8000a7c:	f000 f903 	bl	8000c86 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a80:	200f      	movs	r0, #15
 8000a82:	f7ff ff19 	bl	80008b8 <HAL_InitTick>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	71fb      	strb	r3, [r7, #7]
 8000a90:	e001      	b.n	8000a96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a92:	f7ff fe91 	bl	80007b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a96:	79fb      	ldrb	r3, [r7, #7]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40022000 	.word	0x40022000

08000aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_IncTick+0x20>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_IncTick+0x24>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <HAL_IncTick+0x24>)
 8000ab6:	6013      	str	r3, [r2, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000100 	.word	0x20000100

08000acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <HAL_GetTick+0x14>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000100 	.word	0x20000100

08000ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aec:	f7ff ffee 	bl	8000acc <HAL_GetTick>
 8000af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000afc:	d005      	beq.n	8000b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_Delay+0x44>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4413      	add	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b0a:	bf00      	nop
 8000b0c:	f7ff ffde 	bl	8000acc <HAL_GetTick>
 8000b10:	4602      	mov	r2, r0
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d8f7      	bhi.n	8000b0c <HAL_Delay+0x28>
  {
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000008 	.word	0x20000008

08000b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5e:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	60d3      	str	r3, [r2, #12]
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <__NVIC_GetPriorityGrouping+0x18>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	f003 0307 	and.w	r3, r3, #7
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db0b      	blt.n	8000bba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 021f 	and.w	r2, r3, #31
 8000ba8:	4907      	ldr	r1, [pc, #28]	; (8000bc8 <__NVIC_EnableIRQ+0x38>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db0a      	blt.n	8000bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	490c      	ldr	r1, [pc, #48]	; (8000c18 <__NVIC_SetPriority+0x4c>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf4:	e00a      	b.n	8000c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4908      	ldr	r1, [pc, #32]	; (8000c1c <__NVIC_SetPriority+0x50>)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	3b04      	subs	r3, #4
 8000c04:	0112      	lsls	r2, r2, #4
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	440b      	add	r3, r1
 8000c0a:	761a      	strb	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43d9      	mvns	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	4313      	orrs	r3, r2
         );
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3724      	adds	r7, #36	; 0x24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ff4c 	bl	8000b2c <__NVIC_SetPriorityGrouping>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cae:	f7ff ff61 	bl	8000b74 <__NVIC_GetPriorityGrouping>
 8000cb2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	68b9      	ldr	r1, [r7, #8]
 8000cb8:	6978      	ldr	r0, [r7, #20]
 8000cba:	f7ff ffb1 	bl	8000c20 <NVIC_EncodePriority>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ff80 	bl	8000bcc <__NVIC_SetPriority>
}
 8000ccc:	bf00      	nop
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ff54 	bl	8000b90 <__NVIC_EnableIRQ>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b087      	sub	sp, #28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfe:	e17f      	b.n	8001000 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	2101      	movs	r1, #1
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f000 8171 	beq.w	8000ffa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d005      	beq.n	8000d30 <HAL_GPIO_Init+0x40>
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d130      	bne.n	8000d92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	68da      	ldr	r2, [r3, #12]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d66:	2201      	movs	r2, #1
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	091b      	lsrs	r3, r3, #4
 8000d7c:	f003 0201 	and.w	r2, r3, #1
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 0303 	and.w	r3, r3, #3
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d118      	bne.n	8000dd0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000da4:	2201      	movs	r2, #1
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	08db      	lsrs	r3, r3, #3
 8000dba:	f003 0201 	and.w	r2, r3, #1
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d017      	beq.n	8000e0c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d123      	bne.n	8000e60 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	08da      	lsrs	r2, r3, #3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3208      	adds	r2, #8
 8000e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	220f      	movs	r2, #15
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	691a      	ldr	r2, [r3, #16]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	08da      	lsrs	r2, r3, #3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3208      	adds	r2, #8
 8000e5a:	6939      	ldr	r1, [r7, #16]
 8000e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0203 	and.w	r2, r3, #3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f000 80ac 	beq.w	8000ffa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	4b5f      	ldr	r3, [pc, #380]	; (8001020 <HAL_GPIO_Init+0x330>)
 8000ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea6:	4a5e      	ldr	r2, [pc, #376]	; (8001020 <HAL_GPIO_Init+0x330>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6613      	str	r3, [r2, #96]	; 0x60
 8000eae:	4b5c      	ldr	r3, [pc, #368]	; (8001020 <HAL_GPIO_Init+0x330>)
 8000eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eba:	4a5a      	ldr	r2, [pc, #360]	; (8001024 <HAL_GPIO_Init+0x334>)
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ee4:	d025      	beq.n	8000f32 <HAL_GPIO_Init+0x242>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4f      	ldr	r2, [pc, #316]	; (8001028 <HAL_GPIO_Init+0x338>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d01f      	beq.n	8000f2e <HAL_GPIO_Init+0x23e>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4e      	ldr	r2, [pc, #312]	; (800102c <HAL_GPIO_Init+0x33c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d019      	beq.n	8000f2a <HAL_GPIO_Init+0x23a>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4d      	ldr	r2, [pc, #308]	; (8001030 <HAL_GPIO_Init+0x340>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0x236>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4c      	ldr	r2, [pc, #304]	; (8001034 <HAL_GPIO_Init+0x344>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00d      	beq.n	8000f22 <HAL_GPIO_Init+0x232>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4b      	ldr	r2, [pc, #300]	; (8001038 <HAL_GPIO_Init+0x348>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x22e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4a      	ldr	r2, [pc, #296]	; (800103c <HAL_GPIO_Init+0x34c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d101      	bne.n	8000f1a <HAL_GPIO_Init+0x22a>
 8000f16:	2306      	movs	r3, #6
 8000f18:	e00c      	b.n	8000f34 <HAL_GPIO_Init+0x244>
 8000f1a:	2307      	movs	r3, #7
 8000f1c:	e00a      	b.n	8000f34 <HAL_GPIO_Init+0x244>
 8000f1e:	2305      	movs	r3, #5
 8000f20:	e008      	b.n	8000f34 <HAL_GPIO_Init+0x244>
 8000f22:	2304      	movs	r3, #4
 8000f24:	e006      	b.n	8000f34 <HAL_GPIO_Init+0x244>
 8000f26:	2303      	movs	r3, #3
 8000f28:	e004      	b.n	8000f34 <HAL_GPIO_Init+0x244>
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e002      	b.n	8000f34 <HAL_GPIO_Init+0x244>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <HAL_GPIO_Init+0x244>
 8000f32:	2300      	movs	r3, #0
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	f002 0203 	and.w	r2, r2, #3
 8000f3a:	0092      	lsls	r2, r2, #2
 8000f3c:	4093      	lsls	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f44:	4937      	ldr	r1, [pc, #220]	; (8001024 <HAL_GPIO_Init+0x334>)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f52:	4b3b      	ldr	r3, [pc, #236]	; (8001040 <HAL_GPIO_Init+0x350>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f76:	4a32      	ldr	r2, [pc, #200]	; (8001040 <HAL_GPIO_Init+0x350>)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f7c:	4b30      	ldr	r3, [pc, #192]	; (8001040 <HAL_GPIO_Init+0x350>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fa0:	4a27      	ldr	r2, [pc, #156]	; (8001040 <HAL_GPIO_Init+0x350>)
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <HAL_GPIO_Init+0x350>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fca:	4a1d      	ldr	r2, [pc, #116]	; (8001040 <HAL_GPIO_Init+0x350>)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <HAL_GPIO_Init+0x350>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ff4:	4a12      	ldr	r2, [pc, #72]	; (8001040 <HAL_GPIO_Init+0x350>)
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa22 f303 	lsr.w	r3, r2, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	f47f ae78 	bne.w	8000d00 <HAL_GPIO_Init+0x10>
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	371c      	adds	r7, #28
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000
 8001024:	40010000 	.word	0x40010000
 8001028:	48000400 	.word	0x48000400
 800102c:	48000800 	.word	0x48000800
 8001030:	48000c00 	.word	0x48000c00
 8001034:	48001000 	.word	0x48001000
 8001038:	48001400 	.word	0x48001400
 800103c:	48001800 	.word	0x48001800
 8001040:	40010400 	.word	0x40010400

08001044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
 8001050:	4613      	mov	r3, r2
 8001052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001054:	787b      	ldrb	r3, [r7, #1]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001060:	e002      	b.n	8001068 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <HAL_PWREx_GetVoltageRange+0x18>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40007000 	.word	0x40007000

08001090 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800109e:	d130      	bne.n	8001102 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010a0:	4b23      	ldr	r3, [pc, #140]	; (8001130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010ac:	d038      	beq.n	8001120 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010b6:	4a1e      	ldr	r2, [pc, #120]	; (8001130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2232      	movs	r2, #50	; 0x32
 80010c4:	fb02 f303 	mul.w	r3, r2, r3
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010ca:	fba2 2303 	umull	r2, r3, r2, r3
 80010ce:	0c9b      	lsrs	r3, r3, #18
 80010d0:	3301      	adds	r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010d4:	e002      	b.n	80010dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3b01      	subs	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010e8:	d102      	bne.n	80010f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1f2      	bne.n	80010d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010fc:	d110      	bne.n	8001120 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e00f      	b.n	8001122 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800110a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800110e:	d007      	beq.n	8001120 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001118:	4a05      	ldr	r2, [pc, #20]	; (8001130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800111e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40007000 	.word	0x40007000
 8001134:	20000000 	.word	0x20000000
 8001138:	431bde83 	.word	0x431bde83

0800113c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e3ca      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800114e:	4b97      	ldr	r3, [pc, #604]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001158:	4b94      	ldr	r3, [pc, #592]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0310 	and.w	r3, r3, #16
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 80e4 	beq.w	8001338 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d007      	beq.n	8001186 <HAL_RCC_OscConfig+0x4a>
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	2b0c      	cmp	r3, #12
 800117a:	f040 808b 	bne.w	8001294 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	2b01      	cmp	r3, #1
 8001182:	f040 8087 	bne.w	8001294 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001186:	4b89      	ldr	r3, [pc, #548]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d005      	beq.n	800119e <HAL_RCC_OscConfig+0x62>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e3a2      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a1a      	ldr	r2, [r3, #32]
 80011a2:	4b82      	ldr	r3, [pc, #520]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d004      	beq.n	80011b8 <HAL_RCC_OscConfig+0x7c>
 80011ae:	4b7f      	ldr	r3, [pc, #508]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011b6:	e005      	b.n	80011c4 <HAL_RCC_OscConfig+0x88>
 80011b8:	4b7c      	ldr	r3, [pc, #496]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80011ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011be:	091b      	lsrs	r3, r3, #4
 80011c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d223      	bcs.n	8001210 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 fd87 	bl	8001ce0 <RCC_SetFlashLatencyFromMSIRange>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e383      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011dc:	4b73      	ldr	r3, [pc, #460]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a72      	ldr	r2, [pc, #456]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80011e2:	f043 0308 	orr.w	r3, r3, #8
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	4b70      	ldr	r3, [pc, #448]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	496d      	ldr	r1, [pc, #436]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011fa:	4b6c      	ldr	r3, [pc, #432]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	4968      	ldr	r1, [pc, #416]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 800120a:	4313      	orrs	r3, r2
 800120c:	604b      	str	r3, [r1, #4]
 800120e:	e025      	b.n	800125c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001210:	4b66      	ldr	r3, [pc, #408]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a65      	ldr	r2, [pc, #404]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 8001216:	f043 0308 	orr.w	r3, r3, #8
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	4b63      	ldr	r3, [pc, #396]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	4960      	ldr	r1, [pc, #384]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 800122a:	4313      	orrs	r3, r2
 800122c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800122e:	4b5f      	ldr	r3, [pc, #380]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	495b      	ldr	r1, [pc, #364]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 800123e:	4313      	orrs	r3, r2
 8001240:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d109      	bne.n	800125c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	4618      	mov	r0, r3
 800124e:	f000 fd47 	bl	8001ce0 <RCC_SetFlashLatencyFromMSIRange>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e343      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800125c:	f000 fc4a 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8001260:	4602      	mov	r2, r0
 8001262:	4b52      	ldr	r3, [pc, #328]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	f003 030f 	and.w	r3, r3, #15
 800126c:	4950      	ldr	r1, [pc, #320]	; (80013b0 <HAL_RCC_OscConfig+0x274>)
 800126e:	5ccb      	ldrb	r3, [r1, r3]
 8001270:	f003 031f 	and.w	r3, r3, #31
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
 8001278:	4a4e      	ldr	r2, [pc, #312]	; (80013b4 <HAL_RCC_OscConfig+0x278>)
 800127a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800127c:	4b4e      	ldr	r3, [pc, #312]	; (80013b8 <HAL_RCC_OscConfig+0x27c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fb19 	bl	80008b8 <HAL_InitTick>
 8001286:	4603      	mov	r3, r0
 8001288:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d052      	beq.n	8001336 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	e327      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d032      	beq.n	8001302 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800129c:	4b43      	ldr	r3, [pc, #268]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a42      	ldr	r2, [pc, #264]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fc10 	bl	8000acc <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012b0:	f7ff fc0c 	bl	8000acc <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e310      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012c2:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ce:	4b37      	ldr	r3, [pc, #220]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a36      	ldr	r2, [pc, #216]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b34      	ldr	r3, [pc, #208]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	4931      	ldr	r1, [pc, #196]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ec:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	492c      	ldr	r1, [pc, #176]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]
 8001300:	e01a      	b.n	8001338 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001302:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a29      	ldr	r2, [pc, #164]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 8001308:	f023 0301 	bic.w	r3, r3, #1
 800130c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800130e:	f7ff fbdd 	bl	8000acc <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001316:	f7ff fbd9 	bl	8000acc <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e2dd      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001328:	4b20      	ldr	r3, [pc, #128]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1f0      	bne.n	8001316 <HAL_RCC_OscConfig+0x1da>
 8001334:	e000      	b.n	8001338 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001336:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d074      	beq.n	800142e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	2b08      	cmp	r3, #8
 8001348:	d005      	beq.n	8001356 <HAL_RCC_OscConfig+0x21a>
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	2b0c      	cmp	r3, #12
 800134e:	d10e      	bne.n	800136e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	2b03      	cmp	r3, #3
 8001354:	d10b      	bne.n	800136e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d064      	beq.n	800142c <HAL_RCC_OscConfig+0x2f0>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d160      	bne.n	800142c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e2ba      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001376:	d106      	bne.n	8001386 <HAL_RCC_OscConfig+0x24a>
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 800137e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	e026      	b.n	80013d4 <HAL_RCC_OscConfig+0x298>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800138e:	d115      	bne.n	80013bc <HAL_RCC_OscConfig+0x280>
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a05      	ldr	r2, [pc, #20]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 8001396:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a02      	ldr	r2, [pc, #8]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80013a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	e014      	b.n	80013d4 <HAL_RCC_OscConfig+0x298>
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000
 80013b0:	08005ec4 	.word	0x08005ec4
 80013b4:	20000000 	.word	0x20000000
 80013b8:	20000004 	.word	0x20000004
 80013bc:	4ba0      	ldr	r3, [pc, #640]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a9f      	ldr	r2, [pc, #636]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 80013c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	4b9d      	ldr	r3, [pc, #628]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a9c      	ldr	r2, [pc, #624]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 80013ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d013      	beq.n	8001404 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013dc:	f7ff fb76 	bl	8000acc <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e4:	f7ff fb72 	bl	8000acc <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b64      	cmp	r3, #100	; 0x64
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e276      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013f6:	4b92      	ldr	r3, [pc, #584]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x2a8>
 8001402:	e014      	b.n	800142e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff fb62 	bl	8000acc <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800140c:	f7ff fb5e 	bl	8000acc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b64      	cmp	r3, #100	; 0x64
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e262      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800141e:	4b88      	ldr	r3, [pc, #544]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x2d0>
 800142a:	e000      	b.n	800142e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d060      	beq.n	80014fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	2b04      	cmp	r3, #4
 800143e:	d005      	beq.n	800144c <HAL_RCC_OscConfig+0x310>
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	2b0c      	cmp	r3, #12
 8001444:	d119      	bne.n	800147a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d116      	bne.n	800147a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800144c:	4b7c      	ldr	r3, [pc, #496]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <HAL_RCC_OscConfig+0x328>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e23f      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001464:	4b76      	ldr	r3, [pc, #472]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	061b      	lsls	r3, r3, #24
 8001472:	4973      	ldr	r1, [pc, #460]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001478:	e040      	b.n	80014fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d023      	beq.n	80014ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001482:	4b6f      	ldr	r3, [pc, #444]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a6e      	ldr	r2, [pc, #440]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 8001488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148e:	f7ff fb1d 	bl	8000acc <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001496:	f7ff fb19 	bl	8000acc <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e21d      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014a8:	4b65      	ldr	r3, [pc, #404]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b4:	4b62      	ldr	r3, [pc, #392]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	061b      	lsls	r3, r3, #24
 80014c2:	495f      	ldr	r1, [pc, #380]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
 80014c8:	e018      	b.n	80014fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ca:	4b5d      	ldr	r3, [pc, #372]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a5c      	ldr	r2, [pc, #368]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 80014d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d6:	f7ff faf9 	bl	8000acc <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014de:	f7ff faf5 	bl	8000acc <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e1f9      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014f0:	4b53      	ldr	r3, [pc, #332]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f0      	bne.n	80014de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	2b00      	cmp	r3, #0
 8001506:	d03c      	beq.n	8001582 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d01c      	beq.n	800154a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001510:	4b4b      	ldr	r3, [pc, #300]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 8001512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001516:	4a4a      	ldr	r2, [pc, #296]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001520:	f7ff fad4 	bl	8000acc <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001528:	f7ff fad0 	bl	8000acc <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e1d4      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800153a:	4b41      	ldr	r3, [pc, #260]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 800153c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0ef      	beq.n	8001528 <HAL_RCC_OscConfig+0x3ec>
 8001548:	e01b      	b.n	8001582 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800154a:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 800154c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001550:	4a3b      	ldr	r2, [pc, #236]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155a:	f7ff fab7 	bl	8000acc <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001562:	f7ff fab3 	bl	8000acc <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e1b7      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001574:	4b32      	ldr	r3, [pc, #200]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 8001576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1ef      	bne.n	8001562 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 80a6 	beq.w	80016dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001594:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 8001596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d10d      	bne.n	80015bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a0:	4b27      	ldr	r3, [pc, #156]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 80015a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a4:	4a26      	ldr	r2, [pc, #152]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 80015a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015aa:	6593      	str	r3, [r2, #88]	; 0x58
 80015ac:	4b24      	ldr	r3, [pc, #144]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 80015ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015b8:	2301      	movs	r3, #1
 80015ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015bc:	4b21      	ldr	r3, [pc, #132]	; (8001644 <HAL_RCC_OscConfig+0x508>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d118      	bne.n	80015fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <HAL_RCC_OscConfig+0x508>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a1d      	ldr	r2, [pc, #116]	; (8001644 <HAL_RCC_OscConfig+0x508>)
 80015ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015d4:	f7ff fa7a 	bl	8000acc <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015dc:	f7ff fa76 	bl	8000acc <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e17a      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_RCC_OscConfig+0x508>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d108      	bne.n	8001614 <HAL_RCC_OscConfig+0x4d8>
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 8001604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001612:	e029      	b.n	8001668 <HAL_RCC_OscConfig+0x52c>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b05      	cmp	r3, #5
 800161a:	d115      	bne.n	8001648 <HAL_RCC_OscConfig+0x50c>
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 800161e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001622:	4a07      	ldr	r2, [pc, #28]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 800162e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001632:	4a03      	ldr	r2, [pc, #12]	; (8001640 <HAL_RCC_OscConfig+0x504>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800163c:	e014      	b.n	8001668 <HAL_RCC_OscConfig+0x52c>
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000
 8001644:	40007000 	.word	0x40007000
 8001648:	4b9c      	ldr	r3, [pc, #624]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 800164a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164e:	4a9b      	ldr	r2, [pc, #620]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 8001650:	f023 0301 	bic.w	r3, r3, #1
 8001654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001658:	4b98      	ldr	r3, [pc, #608]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 800165a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165e:	4a97      	ldr	r2, [pc, #604]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 8001660:	f023 0304 	bic.w	r3, r3, #4
 8001664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d016      	beq.n	800169e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001670:	f7ff fa2c 	bl	8000acc <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001676:	e00a      	b.n	800168e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001678:	f7ff fa28 	bl	8000acc <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	f241 3288 	movw	r2, #5000	; 0x1388
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e12a      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800168e:	4b8b      	ldr	r3, [pc, #556]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 8001690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0ed      	beq.n	8001678 <HAL_RCC_OscConfig+0x53c>
 800169c:	e015      	b.n	80016ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169e:	f7ff fa15 	bl	8000acc <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016a4:	e00a      	b.n	80016bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f7ff fa11 	bl	8000acc <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e113      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016bc:	4b7f      	ldr	r3, [pc, #508]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 80016be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1ed      	bne.n	80016a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016ca:	7ffb      	ldrb	r3, [r7, #31]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d105      	bne.n	80016dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d0:	4b7a      	ldr	r3, [pc, #488]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 80016d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d4:	4a79      	ldr	r2, [pc, #484]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 80016d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016da:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 80fe 	beq.w	80018e2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	f040 80d0 	bne.w	8001890 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80016f0:	4b72      	ldr	r3, [pc, #456]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f003 0203 	and.w	r2, r3, #3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	429a      	cmp	r2, r3
 8001702:	d130      	bne.n	8001766 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	3b01      	subs	r3, #1
 8001710:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	429a      	cmp	r2, r3
 8001714:	d127      	bne.n	8001766 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001720:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d11f      	bne.n	8001766 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001730:	2a07      	cmp	r2, #7
 8001732:	bf14      	ite	ne
 8001734:	2201      	movne	r2, #1
 8001736:	2200      	moveq	r2, #0
 8001738:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800173a:	4293      	cmp	r3, r2
 800173c:	d113      	bne.n	8001766 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001748:	085b      	lsrs	r3, r3, #1
 800174a:	3b01      	subs	r3, #1
 800174c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800174e:	429a      	cmp	r2, r3
 8001750:	d109      	bne.n	8001766 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	085b      	lsrs	r3, r3, #1
 800175e:	3b01      	subs	r3, #1
 8001760:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001762:	429a      	cmp	r2, r3
 8001764:	d06e      	beq.n	8001844 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	2b0c      	cmp	r3, #12
 800176a:	d069      	beq.n	8001840 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800176c:	4b53      	ldr	r3, [pc, #332]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d105      	bne.n	8001784 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001778:	4b50      	ldr	r3, [pc, #320]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0ad      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001788:	4b4c      	ldr	r3, [pc, #304]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a4b      	ldr	r2, [pc, #300]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 800178e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001792:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001794:	f7ff f99a 	bl	8000acc <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179c:	f7ff f996 	bl	8000acc <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e09a      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ae:	4b43      	ldr	r3, [pc, #268]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ba:	4b40      	ldr	r3, [pc, #256]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	4b40      	ldr	r3, [pc, #256]	; (80018c0 <HAL_RCC_OscConfig+0x784>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017ca:	3a01      	subs	r2, #1
 80017cc:	0112      	lsls	r2, r2, #4
 80017ce:	4311      	orrs	r1, r2
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017d4:	0212      	lsls	r2, r2, #8
 80017d6:	4311      	orrs	r1, r2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017dc:	0852      	lsrs	r2, r2, #1
 80017de:	3a01      	subs	r2, #1
 80017e0:	0552      	lsls	r2, r2, #21
 80017e2:	4311      	orrs	r1, r2
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017e8:	0852      	lsrs	r2, r2, #1
 80017ea:	3a01      	subs	r2, #1
 80017ec:	0652      	lsls	r2, r2, #25
 80017ee:	4311      	orrs	r1, r2
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017f4:	0912      	lsrs	r2, r2, #4
 80017f6:	0452      	lsls	r2, r2, #17
 80017f8:	430a      	orrs	r2, r1
 80017fa:	4930      	ldr	r1, [pc, #192]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001800:	4b2e      	ldr	r3, [pc, #184]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a2d      	ldr	r2, [pc, #180]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 8001806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800180a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800180c:	4b2b      	ldr	r3, [pc, #172]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	4a2a      	ldr	r2, [pc, #168]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 8001812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001816:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001818:	f7ff f958 	bl	8000acc <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001820:	f7ff f954 	bl	8000acc <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e058      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001832:	4b22      	ldr	r3, [pc, #136]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800183e:	e050      	b.n	80018e2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e04f      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001844:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d148      	bne.n	80018e2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a19      	ldr	r2, [pc, #100]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 8001856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800185a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4a16      	ldr	r2, [pc, #88]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 8001862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001866:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001868:	f7ff f930 	bl	8000acc <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff f92c 	bl	8000acc <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e030      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x734>
 800188e:	e028      	b.n	80018e2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2b0c      	cmp	r3, #12
 8001894:	d023      	beq.n	80018de <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a08      	ldr	r2, [pc, #32]	; (80018bc <HAL_RCC_OscConfig+0x780>)
 800189c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a2:	f7ff f913 	bl	8000acc <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a8:	e00c      	b.n	80018c4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018aa:	f7ff f90f 	bl	8000acc <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d905      	bls.n	80018c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e013      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
 80018bc:	40021000 	.word	0x40021000
 80018c0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_RCC_OscConfig+0x7b0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1ec      	bne.n	80018aa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_RCC_OscConfig+0x7b0>)
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	4905      	ldr	r1, [pc, #20]	; (80018ec <HAL_RCC_OscConfig+0x7b0>)
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_RCC_OscConfig+0x7b4>)
 80018d8:	4013      	ands	r3, r2
 80018da:	60cb      	str	r3, [r1, #12]
 80018dc:	e001      	b.n	80018e2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3720      	adds	r7, #32
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40021000 	.word	0x40021000
 80018f0:	feeefffc 	.word	0xfeeefffc

080018f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0e7      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001908:	4b75      	ldr	r3, [pc, #468]	; (8001ae0 <HAL_RCC_ClockConfig+0x1ec>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d910      	bls.n	8001938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b72      	ldr	r3, [pc, #456]	; (8001ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 0207 	bic.w	r2, r3, #7
 800191e:	4970      	ldr	r1, [pc, #448]	; (8001ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	4313      	orrs	r3, r2
 8001924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	4b6e      	ldr	r3, [pc, #440]	; (8001ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d001      	beq.n	8001938 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0cf      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d010      	beq.n	8001966 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	4b66      	ldr	r3, [pc, #408]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f0>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001950:	429a      	cmp	r2, r3
 8001952:	d908      	bls.n	8001966 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001954:	4b63      	ldr	r3, [pc, #396]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	4960      	ldr	r1, [pc, #384]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d04c      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d107      	bne.n	800198a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197a:	4b5a      	ldr	r3, [pc, #360]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d121      	bne.n	80019ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e0a6      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d107      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001992:	4b54      	ldr	r3, [pc, #336]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d115      	bne.n	80019ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e09a      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019aa:	4b4e      	ldr	r3, [pc, #312]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d109      	bne.n	80019ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e08e      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ba:	4b4a      	ldr	r3, [pc, #296]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e086      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019ca:	4b46      	ldr	r3, [pc, #280]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f023 0203 	bic.w	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4943      	ldr	r1, [pc, #268]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019dc:	f7ff f876 	bl	8000acc <HAL_GetTick>
 80019e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e2:	e00a      	b.n	80019fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e4:	f7ff f872 	bl	8000acc <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e06e      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fa:	4b3a      	ldr	r3, [pc, #232]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 020c 	and.w	r2, r3, #12
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d1eb      	bne.n	80019e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d010      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	4b31      	ldr	r3, [pc, #196]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d208      	bcs.n	8001a3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4b2e      	ldr	r3, [pc, #184]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	492b      	ldr	r1, [pc, #172]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a3a:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d210      	bcs.n	8001a6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a48:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f023 0207 	bic.w	r2, r3, #7
 8001a50:	4923      	ldr	r1, [pc, #140]	; (8001ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a58:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d001      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e036      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d008      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a76:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	4918      	ldr	r1, [pc, #96]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d009      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4910      	ldr	r1, [pc, #64]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aa8:	f000 f824 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8001aac:	4602      	mov	r2, r0
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	490b      	ldr	r1, [pc, #44]	; (8001ae8 <HAL_RCC_ClockConfig+0x1f4>)
 8001aba:	5ccb      	ldrb	r3, [r1, r3]
 8001abc:	f003 031f 	and.w	r3, r3, #31
 8001ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac4:	4a09      	ldr	r2, [pc, #36]	; (8001aec <HAL_RCC_ClockConfig+0x1f8>)
 8001ac6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_RCC_ClockConfig+0x1fc>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fef3 	bl	80008b8 <HAL_InitTick>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ad6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40022000 	.word	0x40022000
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	08005ec4 	.word	0x08005ec4
 8001aec:	20000000 	.word	0x20000000
 8001af0:	20000004 	.word	0x20000004

08001af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b02:	4b3e      	ldr	r3, [pc, #248]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b0c:	4b3b      	ldr	r3, [pc, #236]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_GetSysClockFreq+0x34>
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	2b0c      	cmp	r3, #12
 8001b20:	d121      	bne.n	8001b66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d11e      	bne.n	8001b66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b28:	4b34      	ldr	r3, [pc, #208]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d107      	bne.n	8001b44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b34:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3a:	0a1b      	lsrs	r3, r3, #8
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	e005      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b44:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b50:	4a2b      	ldr	r2, [pc, #172]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10d      	bne.n	8001b7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b64:	e00a      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d102      	bne.n	8001b72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b6e:	61bb      	str	r3, [r7, #24]
 8001b70:	e004      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b78:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	2b0c      	cmp	r3, #12
 8001b80:	d134      	bne.n	8001bec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d003      	beq.n	8001b9a <HAL_RCC_GetSysClockFreq+0xa6>
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d003      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0xac>
 8001b98:	e005      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b9c:	617b      	str	r3, [r7, #20]
      break;
 8001b9e:	e005      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ba2:	617b      	str	r3, [r7, #20]
      break;
 8001ba4:	e002      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	617b      	str	r3, [r7, #20]
      break;
 8001baa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bac:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	fb03 f202 	mul.w	r2, r3, r2
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	0e5b      	lsrs	r3, r3, #25
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	3301      	adds	r3, #1
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bec:	69bb      	ldr	r3, [r7, #24]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3724      	adds	r7, #36	; 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	08005edc 	.word	0x08005edc
 8001c04:	00f42400 	.word	0x00f42400
 8001c08:	007a1200 	.word	0x007a1200

08001c0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000000 	.word	0x20000000

08001c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c28:	f7ff fff0 	bl	8001c0c <HAL_RCC_GetHCLKFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	4904      	ldr	r1, [pc, #16]	; (8001c4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	08005ed4 	.word	0x08005ed4

08001c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c54:	f7ff ffda 	bl	8001c0c <HAL_RCC_GetHCLKFreq>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	0adb      	lsrs	r3, r3, #11
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	4904      	ldr	r1, [pc, #16]	; (8001c78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c66:	5ccb      	ldrb	r3, [r1, r3]
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40021000 	.word	0x40021000
 8001c78:	08005ed4 	.word	0x08005ed4

08001c7c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	220f      	movs	r2, #15
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 0203 	and.w	r2, r3, #3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	08db      	lsrs	r3, r3, #3
 8001cb6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <HAL_RCC_GetClockConfig+0x60>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0207 	and.w	r2, r3, #7
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	601a      	str	r2, [r3, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40022000 	.word	0x40022000

08001ce0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cec:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cf8:	f7ff f9bc 	bl	8001074 <HAL_PWREx_GetVoltageRange>
 8001cfc:	6178      	str	r0, [r7, #20]
 8001cfe:	e014      	b.n	8001d2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d00:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d04:	4a24      	ldr	r2, [pc, #144]	; (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d0c:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d18:	f7ff f9ac 	bl	8001074 <HAL_PWREx_GetVoltageRange>
 8001d1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	4a1d      	ldr	r2, [pc, #116]	; (8001d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d30:	d10b      	bne.n	8001d4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b80      	cmp	r3, #128	; 0x80
 8001d36:	d919      	bls.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2ba0      	cmp	r3, #160	; 0xa0
 8001d3c:	d902      	bls.n	8001d44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d3e:	2302      	movs	r3, #2
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	e013      	b.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d44:	2301      	movs	r3, #1
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	e010      	b.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b80      	cmp	r3, #128	; 0x80
 8001d4e:	d902      	bls.n	8001d56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d50:	2303      	movs	r3, #3
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	e00a      	b.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b80      	cmp	r3, #128	; 0x80
 8001d5a:	d102      	bne.n	8001d62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	e004      	b.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b70      	cmp	r3, #112	; 0x70
 8001d66:	d101      	bne.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d68:	2301      	movs	r3, #1
 8001d6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f023 0207 	bic.w	r2, r3, #7
 8001d74:	4909      	ldr	r1, [pc, #36]	; (8001d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d001      	beq.n	8001d8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40022000 	.word	0x40022000

08001da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001da8:	2300      	movs	r3, #0
 8001daa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dac:	2300      	movs	r3, #0
 8001dae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d041      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dc4:	d02a      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001dc6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dca:	d824      	bhi.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dd0:	d008      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001dd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dd6:	d81e      	bhi.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00a      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001de0:	d010      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001de2:	e018      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001de4:	4b86      	ldr	r3, [pc, #536]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4a85      	ldr	r2, [pc, #532]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001df0:	e015      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3304      	adds	r3, #4
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 fabb 	bl	8002374 <RCCEx_PLLSAI1_Config>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e02:	e00c      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3320      	adds	r3, #32
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 fba6 	bl	800255c <RCCEx_PLLSAI2_Config>
 8001e10:	4603      	mov	r3, r0
 8001e12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e14:	e003      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	74fb      	strb	r3, [r7, #19]
      break;
 8001e1a:	e000      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e1e:	7cfb      	ldrb	r3, [r7, #19]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10b      	bne.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e24:	4b76      	ldr	r3, [pc, #472]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e32:	4973      	ldr	r1, [pc, #460]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e3a:	e001      	b.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e3c:	7cfb      	ldrb	r3, [r7, #19]
 8001e3e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d041      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e54:	d02a      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e5a:	d824      	bhi.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e60:	d008      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e66:	d81e      	bhi.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00a      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e70:	d010      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e72:	e018      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e74:	4b62      	ldr	r3, [pc, #392]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	4a61      	ldr	r2, [pc, #388]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e80:	e015      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 fa73 	bl	8002374 <RCCEx_PLLSAI1_Config>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e92:	e00c      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3320      	adds	r3, #32
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 fb5e 	bl	800255c <RCCEx_PLLSAI2_Config>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ea4:	e003      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	74fb      	strb	r3, [r7, #19]
      break;
 8001eaa:	e000      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001eae:	7cfb      	ldrb	r3, [r7, #19]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10b      	bne.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001eb4:	4b52      	ldr	r3, [pc, #328]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ec2:	494f      	ldr	r1, [pc, #316]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001eca:	e001      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ecc:	7cfb      	ldrb	r3, [r7, #19]
 8001ece:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80a0 	beq.w	800201e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ee2:	4b47      	ldr	r3, [pc, #284]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00d      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef8:	4b41      	ldr	r3, [pc, #260]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	4a40      	ldr	r2, [pc, #256]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f02:	6593      	str	r3, [r2, #88]	; 0x58
 8001f04:	4b3e      	ldr	r3, [pc, #248]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f10:	2301      	movs	r3, #1
 8001f12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f14:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a3a      	ldr	r2, [pc, #232]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f20:	f7fe fdd4 	bl	8000acc <HAL_GetTick>
 8001f24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f26:	e009      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f28:	f7fe fdd0 	bl	8000acc <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d902      	bls.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	74fb      	strb	r3, [r7, #19]
        break;
 8001f3a:	e005      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f3c:	4b31      	ldr	r3, [pc, #196]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0ef      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f48:	7cfb      	ldrb	r3, [r7, #19]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d15c      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f4e:	4b2c      	ldr	r3, [pc, #176]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01f      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d019      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f6c:	4b24      	ldr	r3, [pc, #144]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f78:	4b21      	ldr	r3, [pc, #132]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7e:	4a20      	ldr	r2, [pc, #128]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f88:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8e:	4a1c      	ldr	r2, [pc, #112]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f98:	4a19      	ldr	r2, [pc, #100]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d016      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001faa:	f7fe fd8f 	bl	8000acc <HAL_GetTick>
 8001fae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb0:	e00b      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb2:	f7fe fd8b 	bl	8000acc <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d902      	bls.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	74fb      	strb	r3, [r7, #19]
            break;
 8001fc8:	e006      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fca:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0ec      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001fd8:	7cfb      	ldrb	r3, [r7, #19]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fee:	4904      	ldr	r1, [pc, #16]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ff6:	e009      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ff8:	7cfb      	ldrb	r3, [r7, #19]
 8001ffa:	74bb      	strb	r3, [r7, #18]
 8001ffc:	e006      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000
 8002004:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002008:	7cfb      	ldrb	r3, [r7, #19]
 800200a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800200c:	7c7b      	ldrb	r3, [r7, #17]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d105      	bne.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002012:	4b9e      	ldr	r3, [pc, #632]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	4a9d      	ldr	r2, [pc, #628]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00a      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800202a:	4b98      	ldr	r3, [pc, #608]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002030:	f023 0203 	bic.w	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002038:	4994      	ldr	r1, [pc, #592]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00a      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800204c:	4b8f      	ldr	r3, [pc, #572]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002052:	f023 020c 	bic.w	r2, r3, #12
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205a:	498c      	ldr	r1, [pc, #560]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00a      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800206e:	4b87      	ldr	r3, [pc, #540]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002074:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	4983      	ldr	r1, [pc, #524]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207e:	4313      	orrs	r3, r2
 8002080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00a      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002090:	4b7e      	ldr	r3, [pc, #504]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002096:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	497b      	ldr	r1, [pc, #492]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020b2:	4b76      	ldr	r3, [pc, #472]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c0:	4972      	ldr	r1, [pc, #456]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020d4:	4b6d      	ldr	r3, [pc, #436]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e2:	496a      	ldr	r1, [pc, #424]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020f6:	4b65      	ldr	r3, [pc, #404]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	4961      	ldr	r1, [pc, #388]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002118:	4b5c      	ldr	r3, [pc, #368]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002126:	4959      	ldr	r1, [pc, #356]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800213a:	4b54      	ldr	r3, [pc, #336]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002140:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002148:	4950      	ldr	r1, [pc, #320]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800215c:	4b4b      	ldr	r3, [pc, #300]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216a:	4948      	ldr	r1, [pc, #288]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800217e:	4b43      	ldr	r3, [pc, #268]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002184:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	493f      	ldr	r1, [pc, #252]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d028      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021a0:	4b3a      	ldr	r3, [pc, #232]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ae:	4937      	ldr	r1, [pc, #220]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021be:	d106      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021c0:	4b32      	ldr	r3, [pc, #200]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4a31      	ldr	r2, [pc, #196]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ca:	60d3      	str	r3, [r2, #12]
 80021cc:	e011      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021d6:	d10c      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3304      	adds	r3, #4
 80021dc:	2101      	movs	r1, #1
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f8c8 	bl	8002374 <RCCEx_PLLSAI1_Config>
 80021e4:	4603      	mov	r3, r0
 80021e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021e8:	7cfb      	ldrb	r3, [r7, #19]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80021ee:	7cfb      	ldrb	r3, [r7, #19]
 80021f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d028      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021fe:	4b23      	ldr	r3, [pc, #140]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002204:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220c:	491f      	ldr	r1, [pc, #124]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002218:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800221c:	d106      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800221e:	4b1b      	ldr	r3, [pc, #108]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	4a1a      	ldr	r2, [pc, #104]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002228:	60d3      	str	r3, [r2, #12]
 800222a:	e011      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002230:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002234:	d10c      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3304      	adds	r3, #4
 800223a:	2101      	movs	r1, #1
 800223c:	4618      	mov	r0, r3
 800223e:	f000 f899 	bl	8002374 <RCCEx_PLLSAI1_Config>
 8002242:	4603      	mov	r3, r0
 8002244:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002246:	7cfb      	ldrb	r3, [r7, #19]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800224c:	7cfb      	ldrb	r3, [r7, #19]
 800224e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d02b      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800226a:	4908      	ldr	r1, [pc, #32]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800227a:	d109      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800227c:	4b03      	ldr	r3, [pc, #12]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a02      	ldr	r2, [pc, #8]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002286:	60d3      	str	r3, [r2, #12]
 8002288:	e014      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002294:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3304      	adds	r3, #4
 800229e:	2101      	movs	r1, #1
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 f867 	bl	8002374 <RCCEx_PLLSAI1_Config>
 80022a6:	4603      	mov	r3, r0
 80022a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022aa:	7cfb      	ldrb	r3, [r7, #19]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d02f      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022c0:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022ce:	4928      	ldr	r1, [pc, #160]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022de:	d10d      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3304      	adds	r3, #4
 80022e4:	2102      	movs	r1, #2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f844 	bl	8002374 <RCCEx_PLLSAI1_Config>
 80022ec:	4603      	mov	r3, r0
 80022ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d014      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022f6:	7cfb      	ldrb	r3, [r7, #19]
 80022f8:	74bb      	strb	r3, [r7, #18]
 80022fa:	e011      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002304:	d10c      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3320      	adds	r3, #32
 800230a:	2102      	movs	r1, #2
 800230c:	4618      	mov	r0, r3
 800230e:	f000 f925 	bl	800255c <RCCEx_PLLSAI2_Config>
 8002312:	4603      	mov	r3, r0
 8002314:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002316:	7cfb      	ldrb	r3, [r7, #19]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800231c:	7cfb      	ldrb	r3, [r7, #19]
 800231e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00a      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800232c:	4b10      	ldr	r3, [pc, #64]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800233a:	490d      	ldr	r1, [pc, #52]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002354:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800235e:	4904      	ldr	r1, [pc, #16]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002366:	7cbb      	ldrb	r3, [r7, #18]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000

08002374 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002382:	4b75      	ldr	r3, [pc, #468]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d018      	beq.n	80023c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800238e:	4b72      	ldr	r3, [pc, #456]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 0203 	and.w	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d10d      	bne.n	80023ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
       ||
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d009      	beq.n	80023ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023a6:	4b6c      	ldr	r3, [pc, #432]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
       ||
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d047      	beq.n	800244a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	e044      	b.n	800244a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d018      	beq.n	80023fa <RCCEx_PLLSAI1_Config+0x86>
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d825      	bhi.n	8002418 <RCCEx_PLLSAI1_Config+0xa4>
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d002      	beq.n	80023d6 <RCCEx_PLLSAI1_Config+0x62>
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d009      	beq.n	80023e8 <RCCEx_PLLSAI1_Config+0x74>
 80023d4:	e020      	b.n	8002418 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023d6:	4b60      	ldr	r3, [pc, #384]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d11d      	bne.n	800241e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e6:	e01a      	b.n	800241e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023e8:	4b5b      	ldr	r3, [pc, #364]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d116      	bne.n	8002422 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f8:	e013      	b.n	8002422 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023fa:	4b57      	ldr	r3, [pc, #348]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10f      	bne.n	8002426 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002406:	4b54      	ldr	r3, [pc, #336]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002416:	e006      	b.n	8002426 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
      break;
 800241c:	e004      	b.n	8002428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800241e:	bf00      	nop
 8002420:	e002      	b.n	8002428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002422:	bf00      	nop
 8002424:	e000      	b.n	8002428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002426:	bf00      	nop
    }

    if(status == HAL_OK)
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10d      	bne.n	800244a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800242e:	4b4a      	ldr	r3, [pc, #296]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6819      	ldr	r1, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	430b      	orrs	r3, r1
 8002444:	4944      	ldr	r1, [pc, #272]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002446:	4313      	orrs	r3, r2
 8002448:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d17d      	bne.n	800254c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002450:	4b41      	ldr	r3, [pc, #260]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a40      	ldr	r2, [pc, #256]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002456:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800245a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800245c:	f7fe fb36 	bl	8000acc <HAL_GetTick>
 8002460:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002462:	e009      	b.n	8002478 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002464:	f7fe fb32 	bl	8000acc <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d902      	bls.n	8002478 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	73fb      	strb	r3, [r7, #15]
        break;
 8002476:	e005      	b.n	8002484 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002478:	4b37      	ldr	r3, [pc, #220]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1ef      	bne.n	8002464 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d160      	bne.n	800254c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d111      	bne.n	80024b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002490:	4b31      	ldr	r3, [pc, #196]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6892      	ldr	r2, [r2, #8]
 80024a0:	0211      	lsls	r1, r2, #8
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68d2      	ldr	r2, [r2, #12]
 80024a6:	0912      	lsrs	r2, r2, #4
 80024a8:	0452      	lsls	r2, r2, #17
 80024aa:	430a      	orrs	r2, r1
 80024ac:	492a      	ldr	r1, [pc, #168]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	610b      	str	r3, [r1, #16]
 80024b2:	e027      	b.n	8002504 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d112      	bne.n	80024e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024ba:	4b27      	ldr	r3, [pc, #156]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6892      	ldr	r2, [r2, #8]
 80024ca:	0211      	lsls	r1, r2, #8
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6912      	ldr	r2, [r2, #16]
 80024d0:	0852      	lsrs	r2, r2, #1
 80024d2:	3a01      	subs	r2, #1
 80024d4:	0552      	lsls	r2, r2, #21
 80024d6:	430a      	orrs	r2, r1
 80024d8:	491f      	ldr	r1, [pc, #124]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	610b      	str	r3, [r1, #16]
 80024de:	e011      	b.n	8002504 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024e0:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6892      	ldr	r2, [r2, #8]
 80024f0:	0211      	lsls	r1, r2, #8
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6952      	ldr	r2, [r2, #20]
 80024f6:	0852      	lsrs	r2, r2, #1
 80024f8:	3a01      	subs	r2, #1
 80024fa:	0652      	lsls	r2, r2, #25
 80024fc:	430a      	orrs	r2, r1
 80024fe:	4916      	ldr	r1, [pc, #88]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002500:	4313      	orrs	r3, r2
 8002502:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002504:	4b14      	ldr	r3, [pc, #80]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a13      	ldr	r2, [pc, #76]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800250e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002510:	f7fe fadc 	bl	8000acc <HAL_GetTick>
 8002514:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002516:	e009      	b.n	800252c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002518:	f7fe fad8 	bl	8000acc <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d902      	bls.n	800252c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	73fb      	strb	r3, [r7, #15]
          break;
 800252a:	e005      	b.n	8002538 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800252c:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ef      	beq.n	8002518 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	4904      	ldr	r1, [pc, #16]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002548:	4313      	orrs	r3, r2
 800254a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800254c:	7bfb      	ldrb	r3, [r7, #15]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000

0800255c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800256a:	4b6a      	ldr	r3, [pc, #424]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d018      	beq.n	80025a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002576:	4b67      	ldr	r3, [pc, #412]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f003 0203 	and.w	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d10d      	bne.n	80025a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
       ||
 800258a:	2b00      	cmp	r3, #0
 800258c:	d009      	beq.n	80025a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800258e:	4b61      	ldr	r3, [pc, #388]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
       ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d047      	beq.n	8002632 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	e044      	b.n	8002632 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d018      	beq.n	80025e2 <RCCEx_PLLSAI2_Config+0x86>
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d825      	bhi.n	8002600 <RCCEx_PLLSAI2_Config+0xa4>
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d002      	beq.n	80025be <RCCEx_PLLSAI2_Config+0x62>
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d009      	beq.n	80025d0 <RCCEx_PLLSAI2_Config+0x74>
 80025bc:	e020      	b.n	8002600 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025be:	4b55      	ldr	r3, [pc, #340]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d11d      	bne.n	8002606 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ce:	e01a      	b.n	8002606 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025d0:	4b50      	ldr	r3, [pc, #320]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d116      	bne.n	800260a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e0:	e013      	b.n	800260a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025e2:	4b4c      	ldr	r3, [pc, #304]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10f      	bne.n	800260e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025ee:	4b49      	ldr	r3, [pc, #292]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025fe:	e006      	b.n	800260e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
      break;
 8002604:	e004      	b.n	8002610 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002606:	bf00      	nop
 8002608:	e002      	b.n	8002610 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800260a:	bf00      	nop
 800260c:	e000      	b.n	8002610 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800260e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10d      	bne.n	8002632 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002616:	4b3f      	ldr	r3, [pc, #252]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6819      	ldr	r1, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	3b01      	subs	r3, #1
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	430b      	orrs	r3, r1
 800262c:	4939      	ldr	r1, [pc, #228]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800262e:	4313      	orrs	r3, r2
 8002630:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d167      	bne.n	8002708 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002638:	4b36      	ldr	r3, [pc, #216]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a35      	ldr	r2, [pc, #212]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800263e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002642:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002644:	f7fe fa42 	bl	8000acc <HAL_GetTick>
 8002648:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800264a:	e009      	b.n	8002660 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800264c:	f7fe fa3e 	bl	8000acc <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d902      	bls.n	8002660 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	73fb      	strb	r3, [r7, #15]
        break;
 800265e:	e005      	b.n	800266c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002660:	4b2c      	ldr	r3, [pc, #176]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ef      	bne.n	800264c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d14a      	bne.n	8002708 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d111      	bne.n	800269c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002678:	4b26      	ldr	r3, [pc, #152]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6892      	ldr	r2, [r2, #8]
 8002688:	0211      	lsls	r1, r2, #8
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68d2      	ldr	r2, [r2, #12]
 800268e:	0912      	lsrs	r2, r2, #4
 8002690:	0452      	lsls	r2, r2, #17
 8002692:	430a      	orrs	r2, r1
 8002694:	491f      	ldr	r1, [pc, #124]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002696:	4313      	orrs	r3, r2
 8002698:	614b      	str	r3, [r1, #20]
 800269a:	e011      	b.n	80026c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800269c:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6892      	ldr	r2, [r2, #8]
 80026ac:	0211      	lsls	r1, r2, #8
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6912      	ldr	r2, [r2, #16]
 80026b2:	0852      	lsrs	r2, r2, #1
 80026b4:	3a01      	subs	r2, #1
 80026b6:	0652      	lsls	r2, r2, #25
 80026b8:	430a      	orrs	r2, r1
 80026ba:	4916      	ldr	r1, [pc, #88]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026c0:	4b14      	ldr	r3, [pc, #80]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a13      	ldr	r2, [pc, #76]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026cc:	f7fe f9fe 	bl	8000acc <HAL_GetTick>
 80026d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026d2:	e009      	b.n	80026e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026d4:	f7fe f9fa 	bl	8000acc <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d902      	bls.n	80026e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	73fb      	strb	r3, [r7, #15]
          break;
 80026e6:	e005      	b.n	80026f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0ef      	beq.n	80026d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	4904      	ldr	r1, [pc, #16]	; (8002714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002704:	4313      	orrs	r3, r2
 8002706:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002708:	7bfb      	ldrb	r3, [r7, #15]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000

08002718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e049      	b.n	80027be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d106      	bne.n	8002744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f841 	bl	80027c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3304      	adds	r3, #4
 8002754:	4619      	mov	r1, r3
 8002756:	4610      	mov	r0, r2
 8002758:	f000 f9f8 	bl	8002b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d001      	beq.n	80027f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e04f      	b.n	8002894 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a23      	ldr	r2, [pc, #140]	; (80028a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d01d      	beq.n	8002852 <HAL_TIM_Base_Start_IT+0x76>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281e:	d018      	beq.n	8002852 <HAL_TIM_Base_Start_IT+0x76>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a1f      	ldr	r2, [pc, #124]	; (80028a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d013      	beq.n	8002852 <HAL_TIM_Base_Start_IT+0x76>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a1e      	ldr	r2, [pc, #120]	; (80028a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d00e      	beq.n	8002852 <HAL_TIM_Base_Start_IT+0x76>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1c      	ldr	r2, [pc, #112]	; (80028ac <HAL_TIM_Base_Start_IT+0xd0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d009      	beq.n	8002852 <HAL_TIM_Base_Start_IT+0x76>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1b      	ldr	r2, [pc, #108]	; (80028b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d004      	beq.n	8002852 <HAL_TIM_Base_Start_IT+0x76>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a19      	ldr	r2, [pc, #100]	; (80028b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d115      	bne.n	800287e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	4b17      	ldr	r3, [pc, #92]	; (80028b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800285a:	4013      	ands	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b06      	cmp	r3, #6
 8002862:	d015      	beq.n	8002890 <HAL_TIM_Base_Start_IT+0xb4>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286a:	d011      	beq.n	8002890 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287c:	e008      	b.n	8002890 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 0201 	orr.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	e000      	b.n	8002892 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002890:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	40012c00 	.word	0x40012c00
 80028a4:	40000400 	.word	0x40000400
 80028a8:	40000800 	.word	0x40000800
 80028ac:	40000c00 	.word	0x40000c00
 80028b0:	40013400 	.word	0x40013400
 80028b4:	40014000 	.word	0x40014000
 80028b8:	00010007 	.word	0x00010007

080028bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d122      	bne.n	8002918 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d11b      	bne.n	8002918 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0202 	mvn.w	r2, #2
 80028e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f905 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 8002904:	e005      	b.n	8002912 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f8f7 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f908 	bl	8002b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b04      	cmp	r3, #4
 8002924:	d122      	bne.n	800296c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b04      	cmp	r3, #4
 8002932:	d11b      	bne.n	800296c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0204 	mvn.w	r2, #4
 800293c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2202      	movs	r2, #2
 8002942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f8db 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 8002958:	e005      	b.n	8002966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f8cd 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f8de 	bl	8002b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b08      	cmp	r3, #8
 8002978:	d122      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b08      	cmp	r3, #8
 8002986:	d11b      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0208 	mvn.w	r2, #8
 8002990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2204      	movs	r2, #4
 8002996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f8b1 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 80029ac:	e005      	b.n	80029ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f8a3 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f8b4 	bl	8002b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	d122      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d11b      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0210 	mvn.w	r2, #16
 80029e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2208      	movs	r2, #8
 80029ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f887 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 8002a00:	e005      	b.n	8002a0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f879 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f88a 	bl	8002b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d10e      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d107      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0201 	mvn.w	r2, #1
 8002a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fd fea4 	bl	8000788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4a:	2b80      	cmp	r3, #128	; 0x80
 8002a4c:	d10e      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a58:	2b80      	cmp	r3, #128	; 0x80
 8002a5a:	d107      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f914 	bl	8002c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a7a:	d10e      	bne.n	8002a9a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a86:	2b80      	cmp	r3, #128	; 0x80
 8002a88:	d107      	bne.n	8002a9a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f907 	bl	8002ca8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa4:	2b40      	cmp	r3, #64	; 0x40
 8002aa6:	d10e      	bne.n	8002ac6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab2:	2b40      	cmp	r3, #64	; 0x40
 8002ab4:	d107      	bne.n	8002ac6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f838 	bl	8002b36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d10e      	bne.n	8002af2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	d107      	bne.n	8002af2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f06f 0220 	mvn.w	r2, #32
 8002aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f8c7 	bl	8002c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a40      	ldr	r2, [pc, #256]	; (8002c60 <TIM_Base_SetConfig+0x114>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d013      	beq.n	8002b8c <TIM_Base_SetConfig+0x40>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6a:	d00f      	beq.n	8002b8c <TIM_Base_SetConfig+0x40>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a3d      	ldr	r2, [pc, #244]	; (8002c64 <TIM_Base_SetConfig+0x118>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00b      	beq.n	8002b8c <TIM_Base_SetConfig+0x40>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a3c      	ldr	r2, [pc, #240]	; (8002c68 <TIM_Base_SetConfig+0x11c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d007      	beq.n	8002b8c <TIM_Base_SetConfig+0x40>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a3b      	ldr	r2, [pc, #236]	; (8002c6c <TIM_Base_SetConfig+0x120>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d003      	beq.n	8002b8c <TIM_Base_SetConfig+0x40>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a3a      	ldr	r2, [pc, #232]	; (8002c70 <TIM_Base_SetConfig+0x124>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d108      	bne.n	8002b9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a2f      	ldr	r2, [pc, #188]	; (8002c60 <TIM_Base_SetConfig+0x114>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d01f      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d01b      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a2c      	ldr	r2, [pc, #176]	; (8002c64 <TIM_Base_SetConfig+0x118>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d017      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a2b      	ldr	r2, [pc, #172]	; (8002c68 <TIM_Base_SetConfig+0x11c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a2a      	ldr	r2, [pc, #168]	; (8002c6c <TIM_Base_SetConfig+0x120>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00f      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a29      	ldr	r2, [pc, #164]	; (8002c70 <TIM_Base_SetConfig+0x124>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00b      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a28      	ldr	r2, [pc, #160]	; (8002c74 <TIM_Base_SetConfig+0x128>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d007      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a27      	ldr	r2, [pc, #156]	; (8002c78 <TIM_Base_SetConfig+0x12c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d003      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a26      	ldr	r2, [pc, #152]	; (8002c7c <TIM_Base_SetConfig+0x130>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d108      	bne.n	8002bf8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a10      	ldr	r2, [pc, #64]	; (8002c60 <TIM_Base_SetConfig+0x114>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00f      	beq.n	8002c44 <TIM_Base_SetConfig+0xf8>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a12      	ldr	r2, [pc, #72]	; (8002c70 <TIM_Base_SetConfig+0x124>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00b      	beq.n	8002c44 <TIM_Base_SetConfig+0xf8>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a11      	ldr	r2, [pc, #68]	; (8002c74 <TIM_Base_SetConfig+0x128>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d007      	beq.n	8002c44 <TIM_Base_SetConfig+0xf8>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a10      	ldr	r2, [pc, #64]	; (8002c78 <TIM_Base_SetConfig+0x12c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d003      	beq.n	8002c44 <TIM_Base_SetConfig+0xf8>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a0f      	ldr	r2, [pc, #60]	; (8002c7c <TIM_Base_SetConfig+0x130>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d103      	bne.n	8002c4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	615a      	str	r2, [r3, #20]
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40012c00 	.word	0x40012c00
 8002c64:	40000400 	.word	0x40000400
 8002c68:	40000800 	.word	0x40000800
 8002c6c:	40000c00 	.word	0x40000c00
 8002c70:	40013400 	.word	0x40013400
 8002c74:	40014000 	.word	0x40014000
 8002c78:	40014400 	.word	0x40014400
 8002c7c:	40014800 	.word	0x40014800

08002c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e040      	b.n	8002d50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fd fd8e 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2224      	movs	r2, #36	; 0x24
 8002ce8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f8c0 	bl	8002e80 <UART_SetConfig>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e022      	b.n	8002d50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fb6c 	bl	80033f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0201 	orr.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 fbf3 	bl	8003534 <UART_CheckIdleState>
 8002d4e:	4603      	mov	r3, r0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08a      	sub	sp, #40	; 0x28
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d6c:	2b20      	cmp	r3, #32
 8002d6e:	f040 8082 	bne.w	8002e76 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <HAL_UART_Transmit+0x26>
 8002d78:	88fb      	ldrh	r3, [r7, #6]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e07a      	b.n	8002e78 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_UART_Transmit+0x38>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e073      	b.n	8002e78 <HAL_UART_Transmit+0x120>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2221      	movs	r2, #33	; 0x21
 8002da4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002da6:	f7fd fe91 	bl	8000acc <HAL_GetTick>
 8002daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	88fa      	ldrh	r2, [r7, #6]
 8002db0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	88fa      	ldrh	r2, [r7, #6]
 8002db8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc4:	d108      	bne.n	8002dd8 <HAL_UART_Transmit+0x80>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d104      	bne.n	8002dd8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	e003      	b.n	8002de0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002de8:	e02d      	b.n	8002e46 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2200      	movs	r2, #0
 8002df2:	2180      	movs	r1, #128	; 0x80
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 fbe6 	bl	80035c6 <UART_WaitOnFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e039      	b.n	8002e78 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10b      	bne.n	8002e22 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	881a      	ldrh	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e16:	b292      	uxth	r2, r2
 8002e18:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	e008      	b.n	8002e34 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	781a      	ldrb	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	b292      	uxth	r2, r2
 8002e2c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3301      	adds	r3, #1
 8002e32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1cb      	bne.n	8002dea <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2140      	movs	r1, #64	; 0x40
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 fbb2 	bl	80035c6 <UART_WaitOnFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e005      	b.n	8002e78 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e000      	b.n	8002e78 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002e76:	2302      	movs	r3, #2
  }
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3720      	adds	r7, #32
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e84:	b08a      	sub	sp, #40	; 0x28
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	4ba4      	ldr	r3, [pc, #656]	; (8003140 <UART_SetConfig+0x2c0>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a99      	ldr	r2, [pc, #612]	; (8003144 <UART_SetConfig+0x2c4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d004      	beq.n	8002eec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002efc:	430a      	orrs	r2, r1
 8002efe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a90      	ldr	r2, [pc, #576]	; (8003148 <UART_SetConfig+0x2c8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d126      	bne.n	8002f58 <UART_SetConfig+0xd8>
 8002f0a:	4b90      	ldr	r3, [pc, #576]	; (800314c <UART_SetConfig+0x2cc>)
 8002f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d81b      	bhi.n	8002f50 <UART_SetConfig+0xd0>
 8002f18:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <UART_SetConfig+0xa0>)
 8002f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1e:	bf00      	nop
 8002f20:	08002f31 	.word	0x08002f31
 8002f24:	08002f41 	.word	0x08002f41
 8002f28:	08002f39 	.word	0x08002f39
 8002f2c:	08002f49 	.word	0x08002f49
 8002f30:	2301      	movs	r3, #1
 8002f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f36:	e116      	b.n	8003166 <UART_SetConfig+0x2e6>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f3e:	e112      	b.n	8003166 <UART_SetConfig+0x2e6>
 8002f40:	2304      	movs	r3, #4
 8002f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f46:	e10e      	b.n	8003166 <UART_SetConfig+0x2e6>
 8002f48:	2308      	movs	r3, #8
 8002f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f4e:	e10a      	b.n	8003166 <UART_SetConfig+0x2e6>
 8002f50:	2310      	movs	r3, #16
 8002f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f56:	e106      	b.n	8003166 <UART_SetConfig+0x2e6>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a7c      	ldr	r2, [pc, #496]	; (8003150 <UART_SetConfig+0x2d0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d138      	bne.n	8002fd4 <UART_SetConfig+0x154>
 8002f62:	4b7a      	ldr	r3, [pc, #488]	; (800314c <UART_SetConfig+0x2cc>)
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f68:	f003 030c 	and.w	r3, r3, #12
 8002f6c:	2b0c      	cmp	r3, #12
 8002f6e:	d82d      	bhi.n	8002fcc <UART_SetConfig+0x14c>
 8002f70:	a201      	add	r2, pc, #4	; (adr r2, 8002f78 <UART_SetConfig+0xf8>)
 8002f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f76:	bf00      	nop
 8002f78:	08002fad 	.word	0x08002fad
 8002f7c:	08002fcd 	.word	0x08002fcd
 8002f80:	08002fcd 	.word	0x08002fcd
 8002f84:	08002fcd 	.word	0x08002fcd
 8002f88:	08002fbd 	.word	0x08002fbd
 8002f8c:	08002fcd 	.word	0x08002fcd
 8002f90:	08002fcd 	.word	0x08002fcd
 8002f94:	08002fcd 	.word	0x08002fcd
 8002f98:	08002fb5 	.word	0x08002fb5
 8002f9c:	08002fcd 	.word	0x08002fcd
 8002fa0:	08002fcd 	.word	0x08002fcd
 8002fa4:	08002fcd 	.word	0x08002fcd
 8002fa8:	08002fc5 	.word	0x08002fc5
 8002fac:	2300      	movs	r3, #0
 8002fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fb2:	e0d8      	b.n	8003166 <UART_SetConfig+0x2e6>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fba:	e0d4      	b.n	8003166 <UART_SetConfig+0x2e6>
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fc2:	e0d0      	b.n	8003166 <UART_SetConfig+0x2e6>
 8002fc4:	2308      	movs	r3, #8
 8002fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fca:	e0cc      	b.n	8003166 <UART_SetConfig+0x2e6>
 8002fcc:	2310      	movs	r3, #16
 8002fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fd2:	e0c8      	b.n	8003166 <UART_SetConfig+0x2e6>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a5e      	ldr	r2, [pc, #376]	; (8003154 <UART_SetConfig+0x2d4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d125      	bne.n	800302a <UART_SetConfig+0x1aa>
 8002fde:	4b5b      	ldr	r3, [pc, #364]	; (800314c <UART_SetConfig+0x2cc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fe8:	2b30      	cmp	r3, #48	; 0x30
 8002fea:	d016      	beq.n	800301a <UART_SetConfig+0x19a>
 8002fec:	2b30      	cmp	r3, #48	; 0x30
 8002fee:	d818      	bhi.n	8003022 <UART_SetConfig+0x1a2>
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d00a      	beq.n	800300a <UART_SetConfig+0x18a>
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d814      	bhi.n	8003022 <UART_SetConfig+0x1a2>
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d002      	beq.n	8003002 <UART_SetConfig+0x182>
 8002ffc:	2b10      	cmp	r3, #16
 8002ffe:	d008      	beq.n	8003012 <UART_SetConfig+0x192>
 8003000:	e00f      	b.n	8003022 <UART_SetConfig+0x1a2>
 8003002:	2300      	movs	r3, #0
 8003004:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003008:	e0ad      	b.n	8003166 <UART_SetConfig+0x2e6>
 800300a:	2302      	movs	r3, #2
 800300c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003010:	e0a9      	b.n	8003166 <UART_SetConfig+0x2e6>
 8003012:	2304      	movs	r3, #4
 8003014:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003018:	e0a5      	b.n	8003166 <UART_SetConfig+0x2e6>
 800301a:	2308      	movs	r3, #8
 800301c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003020:	e0a1      	b.n	8003166 <UART_SetConfig+0x2e6>
 8003022:	2310      	movs	r3, #16
 8003024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003028:	e09d      	b.n	8003166 <UART_SetConfig+0x2e6>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a4a      	ldr	r2, [pc, #296]	; (8003158 <UART_SetConfig+0x2d8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d125      	bne.n	8003080 <UART_SetConfig+0x200>
 8003034:	4b45      	ldr	r3, [pc, #276]	; (800314c <UART_SetConfig+0x2cc>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800303e:	2bc0      	cmp	r3, #192	; 0xc0
 8003040:	d016      	beq.n	8003070 <UART_SetConfig+0x1f0>
 8003042:	2bc0      	cmp	r3, #192	; 0xc0
 8003044:	d818      	bhi.n	8003078 <UART_SetConfig+0x1f8>
 8003046:	2b80      	cmp	r3, #128	; 0x80
 8003048:	d00a      	beq.n	8003060 <UART_SetConfig+0x1e0>
 800304a:	2b80      	cmp	r3, #128	; 0x80
 800304c:	d814      	bhi.n	8003078 <UART_SetConfig+0x1f8>
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <UART_SetConfig+0x1d8>
 8003052:	2b40      	cmp	r3, #64	; 0x40
 8003054:	d008      	beq.n	8003068 <UART_SetConfig+0x1e8>
 8003056:	e00f      	b.n	8003078 <UART_SetConfig+0x1f8>
 8003058:	2300      	movs	r3, #0
 800305a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800305e:	e082      	b.n	8003166 <UART_SetConfig+0x2e6>
 8003060:	2302      	movs	r3, #2
 8003062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003066:	e07e      	b.n	8003166 <UART_SetConfig+0x2e6>
 8003068:	2304      	movs	r3, #4
 800306a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306e:	e07a      	b.n	8003166 <UART_SetConfig+0x2e6>
 8003070:	2308      	movs	r3, #8
 8003072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003076:	e076      	b.n	8003166 <UART_SetConfig+0x2e6>
 8003078:	2310      	movs	r3, #16
 800307a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800307e:	e072      	b.n	8003166 <UART_SetConfig+0x2e6>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a35      	ldr	r2, [pc, #212]	; (800315c <UART_SetConfig+0x2dc>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d12a      	bne.n	80030e0 <UART_SetConfig+0x260>
 800308a:	4b30      	ldr	r3, [pc, #192]	; (800314c <UART_SetConfig+0x2cc>)
 800308c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003090:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003094:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003098:	d01a      	beq.n	80030d0 <UART_SetConfig+0x250>
 800309a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800309e:	d81b      	bhi.n	80030d8 <UART_SetConfig+0x258>
 80030a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a4:	d00c      	beq.n	80030c0 <UART_SetConfig+0x240>
 80030a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030aa:	d815      	bhi.n	80030d8 <UART_SetConfig+0x258>
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <UART_SetConfig+0x238>
 80030b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b4:	d008      	beq.n	80030c8 <UART_SetConfig+0x248>
 80030b6:	e00f      	b.n	80030d8 <UART_SetConfig+0x258>
 80030b8:	2300      	movs	r3, #0
 80030ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030be:	e052      	b.n	8003166 <UART_SetConfig+0x2e6>
 80030c0:	2302      	movs	r3, #2
 80030c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c6:	e04e      	b.n	8003166 <UART_SetConfig+0x2e6>
 80030c8:	2304      	movs	r3, #4
 80030ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ce:	e04a      	b.n	8003166 <UART_SetConfig+0x2e6>
 80030d0:	2308      	movs	r3, #8
 80030d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030d6:	e046      	b.n	8003166 <UART_SetConfig+0x2e6>
 80030d8:	2310      	movs	r3, #16
 80030da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030de:	e042      	b.n	8003166 <UART_SetConfig+0x2e6>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a17      	ldr	r2, [pc, #92]	; (8003144 <UART_SetConfig+0x2c4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d13a      	bne.n	8003160 <UART_SetConfig+0x2e0>
 80030ea:	4b18      	ldr	r3, [pc, #96]	; (800314c <UART_SetConfig+0x2cc>)
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030f8:	d01a      	beq.n	8003130 <UART_SetConfig+0x2b0>
 80030fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030fe:	d81b      	bhi.n	8003138 <UART_SetConfig+0x2b8>
 8003100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003104:	d00c      	beq.n	8003120 <UART_SetConfig+0x2a0>
 8003106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800310a:	d815      	bhi.n	8003138 <UART_SetConfig+0x2b8>
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <UART_SetConfig+0x298>
 8003110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003114:	d008      	beq.n	8003128 <UART_SetConfig+0x2a8>
 8003116:	e00f      	b.n	8003138 <UART_SetConfig+0x2b8>
 8003118:	2300      	movs	r3, #0
 800311a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800311e:	e022      	b.n	8003166 <UART_SetConfig+0x2e6>
 8003120:	2302      	movs	r3, #2
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003126:	e01e      	b.n	8003166 <UART_SetConfig+0x2e6>
 8003128:	2304      	movs	r3, #4
 800312a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800312e:	e01a      	b.n	8003166 <UART_SetConfig+0x2e6>
 8003130:	2308      	movs	r3, #8
 8003132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003136:	e016      	b.n	8003166 <UART_SetConfig+0x2e6>
 8003138:	2310      	movs	r3, #16
 800313a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800313e:	e012      	b.n	8003166 <UART_SetConfig+0x2e6>
 8003140:	efff69f3 	.word	0xefff69f3
 8003144:	40008000 	.word	0x40008000
 8003148:	40013800 	.word	0x40013800
 800314c:	40021000 	.word	0x40021000
 8003150:	40004400 	.word	0x40004400
 8003154:	40004800 	.word	0x40004800
 8003158:	40004c00 	.word	0x40004c00
 800315c:	40005000 	.word	0x40005000
 8003160:	2310      	movs	r3, #16
 8003162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a9f      	ldr	r2, [pc, #636]	; (80033e8 <UART_SetConfig+0x568>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d17a      	bne.n	8003266 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003174:	2b08      	cmp	r3, #8
 8003176:	d824      	bhi.n	80031c2 <UART_SetConfig+0x342>
 8003178:	a201      	add	r2, pc, #4	; (adr r2, 8003180 <UART_SetConfig+0x300>)
 800317a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317e:	bf00      	nop
 8003180:	080031a5 	.word	0x080031a5
 8003184:	080031c3 	.word	0x080031c3
 8003188:	080031ad 	.word	0x080031ad
 800318c:	080031c3 	.word	0x080031c3
 8003190:	080031b3 	.word	0x080031b3
 8003194:	080031c3 	.word	0x080031c3
 8003198:	080031c3 	.word	0x080031c3
 800319c:	080031c3 	.word	0x080031c3
 80031a0:	080031bb 	.word	0x080031bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a4:	f7fe fd3e 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 80031a8:	61f8      	str	r0, [r7, #28]
        break;
 80031aa:	e010      	b.n	80031ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031ac:	4b8f      	ldr	r3, [pc, #572]	; (80033ec <UART_SetConfig+0x56c>)
 80031ae:	61fb      	str	r3, [r7, #28]
        break;
 80031b0:	e00d      	b.n	80031ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031b2:	f7fe fc9f 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 80031b6:	61f8      	str	r0, [r7, #28]
        break;
 80031b8:	e009      	b.n	80031ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031be:	61fb      	str	r3, [r7, #28]
        break;
 80031c0:	e005      	b.n	80031ce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 80fb 	beq.w	80033cc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	4413      	add	r3, r2
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d305      	bcc.n	80031f2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031ec:	69fa      	ldr	r2, [r7, #28]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d903      	bls.n	80031fa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031f8:	e0e8      	b.n	80033cc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	2200      	movs	r2, #0
 80031fe:	461c      	mov	r4, r3
 8003200:	4615      	mov	r5, r2
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	022b      	lsls	r3, r5, #8
 800320c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003210:	0222      	lsls	r2, r4, #8
 8003212:	68f9      	ldr	r1, [r7, #12]
 8003214:	6849      	ldr	r1, [r1, #4]
 8003216:	0849      	lsrs	r1, r1, #1
 8003218:	2000      	movs	r0, #0
 800321a:	4688      	mov	r8, r1
 800321c:	4681      	mov	r9, r0
 800321e:	eb12 0a08 	adds.w	sl, r2, r8
 8003222:	eb43 0b09 	adc.w	fp, r3, r9
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	603b      	str	r3, [r7, #0]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003234:	4650      	mov	r0, sl
 8003236:	4659      	mov	r1, fp
 8003238:	f7fc ffca 	bl	80001d0 <__aeabi_uldivmod>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4613      	mov	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800324a:	d308      	bcc.n	800325e <UART_SetConfig+0x3de>
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003252:	d204      	bcs.n	800325e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	60da      	str	r2, [r3, #12]
 800325c:	e0b6      	b.n	80033cc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003264:	e0b2      	b.n	80033cc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800326e:	d15e      	bne.n	800332e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003270:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003274:	2b08      	cmp	r3, #8
 8003276:	d828      	bhi.n	80032ca <UART_SetConfig+0x44a>
 8003278:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <UART_SetConfig+0x400>)
 800327a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327e:	bf00      	nop
 8003280:	080032a5 	.word	0x080032a5
 8003284:	080032ad 	.word	0x080032ad
 8003288:	080032b5 	.word	0x080032b5
 800328c:	080032cb 	.word	0x080032cb
 8003290:	080032bb 	.word	0x080032bb
 8003294:	080032cb 	.word	0x080032cb
 8003298:	080032cb 	.word	0x080032cb
 800329c:	080032cb 	.word	0x080032cb
 80032a0:	080032c3 	.word	0x080032c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032a4:	f7fe fcbe 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 80032a8:	61f8      	str	r0, [r7, #28]
        break;
 80032aa:	e014      	b.n	80032d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032ac:	f7fe fcd0 	bl	8001c50 <HAL_RCC_GetPCLK2Freq>
 80032b0:	61f8      	str	r0, [r7, #28]
        break;
 80032b2:	e010      	b.n	80032d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032b4:	4b4d      	ldr	r3, [pc, #308]	; (80033ec <UART_SetConfig+0x56c>)
 80032b6:	61fb      	str	r3, [r7, #28]
        break;
 80032b8:	e00d      	b.n	80032d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ba:	f7fe fc1b 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 80032be:	61f8      	str	r0, [r7, #28]
        break;
 80032c0:	e009      	b.n	80032d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032c6:	61fb      	str	r3, [r7, #28]
        break;
 80032c8:	e005      	b.n	80032d6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d077      	beq.n	80033cc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	005a      	lsls	r2, r3, #1
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	441a      	add	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	2b0f      	cmp	r3, #15
 80032f6:	d916      	bls.n	8003326 <UART_SetConfig+0x4a6>
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032fe:	d212      	bcs.n	8003326 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	b29b      	uxth	r3, r3
 8003304:	f023 030f 	bic.w	r3, r3, #15
 8003308:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	085b      	lsrs	r3, r3, #1
 800330e:	b29b      	uxth	r3, r3
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	b29a      	uxth	r2, r3
 8003316:	8afb      	ldrh	r3, [r7, #22]
 8003318:	4313      	orrs	r3, r2
 800331a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	8afa      	ldrh	r2, [r7, #22]
 8003322:	60da      	str	r2, [r3, #12]
 8003324:	e052      	b.n	80033cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800332c:	e04e      	b.n	80033cc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800332e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003332:	2b08      	cmp	r3, #8
 8003334:	d827      	bhi.n	8003386 <UART_SetConfig+0x506>
 8003336:	a201      	add	r2, pc, #4	; (adr r2, 800333c <UART_SetConfig+0x4bc>)
 8003338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333c:	08003361 	.word	0x08003361
 8003340:	08003369 	.word	0x08003369
 8003344:	08003371 	.word	0x08003371
 8003348:	08003387 	.word	0x08003387
 800334c:	08003377 	.word	0x08003377
 8003350:	08003387 	.word	0x08003387
 8003354:	08003387 	.word	0x08003387
 8003358:	08003387 	.word	0x08003387
 800335c:	0800337f 	.word	0x0800337f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003360:	f7fe fc60 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 8003364:	61f8      	str	r0, [r7, #28]
        break;
 8003366:	e014      	b.n	8003392 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003368:	f7fe fc72 	bl	8001c50 <HAL_RCC_GetPCLK2Freq>
 800336c:	61f8      	str	r0, [r7, #28]
        break;
 800336e:	e010      	b.n	8003392 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003370:	4b1e      	ldr	r3, [pc, #120]	; (80033ec <UART_SetConfig+0x56c>)
 8003372:	61fb      	str	r3, [r7, #28]
        break;
 8003374:	e00d      	b.n	8003392 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003376:	f7fe fbbd 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 800337a:	61f8      	str	r0, [r7, #28]
        break;
 800337c:	e009      	b.n	8003392 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800337e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003382:	61fb      	str	r3, [r7, #28]
        break;
 8003384:	e005      	b.n	8003392 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003390:	bf00      	nop
    }

    if (pclk != 0U)
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d019      	beq.n	80033cc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	085a      	lsrs	r2, r3, #1
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	441a      	add	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	2b0f      	cmp	r3, #15
 80033b0:	d909      	bls.n	80033c6 <UART_SetConfig+0x546>
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b8:	d205      	bcs.n	80033c6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	b29a      	uxth	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60da      	str	r2, [r3, #12]
 80033c4:	e002      	b.n	80033cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80033d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3728      	adds	r7, #40	; 0x28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033e6:	bf00      	nop
 80033e8:	40008000 	.word	0x40008000
 80033ec:	00f42400 	.word	0x00f42400

080033f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d01a      	beq.n	8003506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ee:	d10a      	bne.n	8003506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
  }
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af02      	add	r7, sp, #8
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003544:	f7fd fac2 	bl	8000acc <HAL_GetTick>
 8003548:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b08      	cmp	r3, #8
 8003556:	d10e      	bne.n	8003576 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003558:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f82d 	bl	80035c6 <UART_WaitOnFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e023      	b.n	80035be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b04      	cmp	r3, #4
 8003582:	d10e      	bne.n	80035a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f817 	bl	80035c6 <UART_WaitOnFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e00d      	b.n	80035be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b09c      	sub	sp, #112	; 0x70
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	603b      	str	r3, [r7, #0]
 80035d2:	4613      	mov	r3, r2
 80035d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d6:	e0a5      	b.n	8003724 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	f000 80a1 	beq.w	8003724 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e2:	f7fd fa73 	bl	8000acc <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d302      	bcc.n	80035f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80035f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d13e      	bne.n	8003676 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003600:	e853 3f00 	ldrex	r3, [r3]
 8003604:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003608:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800360c:	667b      	str	r3, [r7, #100]	; 0x64
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003616:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003618:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800361c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800361e:	e841 2300 	strex	r3, r2, [r1]
 8003622:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1e6      	bne.n	80035f8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3308      	adds	r3, #8
 8003630:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800363a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	663b      	str	r3, [r7, #96]	; 0x60
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	3308      	adds	r3, #8
 8003648:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800364a:	64ba      	str	r2, [r7, #72]	; 0x48
 800364c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003650:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003652:	e841 2300 	strex	r3, r2, [r1]
 8003656:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1e5      	bne.n	800362a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e067      	b.n	8003746 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d04f      	beq.n	8003724 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800368e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003692:	d147      	bne.n	8003724 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800369c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a6:	e853 3f00 	ldrex	r3, [r3]
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	461a      	mov	r2, r3
 80036ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036bc:	637b      	str	r3, [r7, #52]	; 0x34
 80036be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036c4:	e841 2300 	strex	r3, r2, [r1]
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e6      	bne.n	800369e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3308      	adds	r3, #8
 80036d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	e853 3f00 	ldrex	r3, [r3]
 80036de:	613b      	str	r3, [r7, #16]
   return(result);
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3308      	adds	r3, #8
 80036ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036f0:	623a      	str	r2, [r7, #32]
 80036f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f4:	69f9      	ldr	r1, [r7, #28]
 80036f6:	6a3a      	ldr	r2, [r7, #32]
 80036f8:	e841 2300 	strex	r3, r2, [r1]
 80036fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e5      	bne.n	80036d0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2220      	movs	r2, #32
 800370e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e010      	b.n	8003746 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69da      	ldr	r2, [r3, #28]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4013      	ands	r3, r2
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	429a      	cmp	r2, r3
 8003732:	bf0c      	ite	eq
 8003734:	2301      	moveq	r3, #1
 8003736:	2300      	movne	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	461a      	mov	r2, r3
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	429a      	cmp	r2, r3
 8003740:	f43f af4a 	beq.w	80035d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3770      	adds	r7, #112	; 0x70
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f103 0208 	add.w	r2, r3, #8
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f04f 32ff 	mov.w	r2, #4294967295
 8003766:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f103 0208 	add.w	r2, r3, #8
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f103 0208 	add.w	r2, r3, #8
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	601a      	str	r2, [r3, #0]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003806:	d103      	bne.n	8003810 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	e00c      	b.n	800382a <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3308      	adds	r3, #8
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	e002      	b.n	800381e <vListInsert+0x2e>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	429a      	cmp	r2, r3
 8003828:	d2f6      	bcs.n	8003818 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	601a      	str	r2, [r3, #0]
}
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003862:	b480      	push	{r7}
 8003864:	b085      	sub	sp, #20
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6892      	ldr	r2, [r2, #8]
 8003878:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6852      	ldr	r2, [r2, #4]
 8003882:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	429a      	cmp	r2, r3
 800388c:	d103      	bne.n	8003896 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	1e5a      	subs	r2, r3, #1
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10a      	bne.n	80038e2 <xQueueGenericReset+0x2a>
        __asm volatile
 80038cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	60bb      	str	r3, [r7, #8]
    }
 80038de:	bf00      	nop
 80038e0:	e7fe      	b.n	80038e0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80038e2:	f001 ff59 	bl	8005798 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ee:	68f9      	ldr	r1, [r7, #12]
 80038f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038f2:	fb01 f303 	mul.w	r3, r1, r3
 80038f6:	441a      	add	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003912:	3b01      	subs	r3, #1
 8003914:	68f9      	ldr	r1, [r7, #12]
 8003916:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003918:	fb01 f303 	mul.w	r3, r1, r3
 800391c:	441a      	add	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	22ff      	movs	r2, #255	; 0xff
 8003926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	22ff      	movs	r2, #255	; 0xff
 800392e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d114      	bne.n	8003962 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d01a      	beq.n	8003976 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	3310      	adds	r3, #16
 8003944:	4618      	mov	r0, r3
 8003946:	f001 f84d 	bl	80049e4 <xTaskRemoveFromEventList>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d012      	beq.n	8003976 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003950:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <xQueueGenericReset+0xcc>)
 8003952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	e009      	b.n	8003976 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3310      	adds	r3, #16
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff fef1 	bl	800374e <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3324      	adds	r3, #36	; 0x24
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff feec 	bl	800374e <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003976:	f001 ff3f 	bl	80057f8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800397a:	2301      	movs	r3, #1
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	e000ed04 	.word	0xe000ed04

08003988 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003988:	b580      	push	{r7, lr}
 800398a:	b08c      	sub	sp, #48	; 0x30
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	4613      	mov	r3, r2
 8003994:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10a      	bne.n	80039b2 <xQueueGenericCreate+0x2a>
        __asm volatile
 800399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	61bb      	str	r3, [r7, #24]
    }
 80039ae:	bf00      	nop
 80039b0:	e7fe      	b.n	80039b0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	fb02 f303 	mul.w	r3, r2, r3
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d006      	beq.n	80039d0 <xQueueGenericCreate+0x48>
 80039c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d101      	bne.n	80039d4 <xQueueGenericCreate+0x4c>
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <xQueueGenericCreate+0x4e>
 80039d4:	2300      	movs	r3, #0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <xQueueGenericCreate+0x68>
        __asm volatile
 80039da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	617b      	str	r3, [r7, #20]
    }
 80039ec:	bf00      	nop
 80039ee:	e7fe      	b.n	80039ee <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80039f6:	d90a      	bls.n	8003a0e <xQueueGenericCreate+0x86>
        __asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	613b      	str	r3, [r7, #16]
    }
 8003a0a:	bf00      	nop
 8003a0c:	e7fe      	b.n	8003a0c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	3350      	adds	r3, #80	; 0x50
 8003a12:	4618      	mov	r0, r3
 8003a14:	f001 ffe2 	bl	80059dc <pvPortMalloc>
 8003a18:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00d      	beq.n	8003a3c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	3350      	adds	r3, #80	; 0x50
 8003a28:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a2a:	79fa      	ldrb	r2, [r7, #7]
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	4613      	mov	r3, r2
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 f805 	bl	8003a46 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
    }
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3728      	adds	r7, #40	; 0x28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d103      	bne.n	8003a62 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	e002      	b.n	8003a68 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a74:	2101      	movs	r1, #1
 8003a76:	69b8      	ldr	r0, [r7, #24]
 8003a78:	f7ff ff1e 	bl	80038b8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08e      	sub	sp, #56	; 0x38
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10a      	bne.n	8003abe <xQueueGenericSend+0x32>
        __asm volatile
 8003aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003aba:	bf00      	nop
 8003abc:	e7fe      	b.n	8003abc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d103      	bne.n	8003acc <xQueueGenericSend+0x40>
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <xQueueGenericSend+0x44>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <xQueueGenericSend+0x46>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <xQueueGenericSend+0x60>
        __asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003ae8:	bf00      	nop
 8003aea:	e7fe      	b.n	8003aea <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d103      	bne.n	8003afa <xQueueGenericSend+0x6e>
 8003af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <xQueueGenericSend+0x72>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <xQueueGenericSend+0x74>
 8003afe:	2300      	movs	r3, #0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10a      	bne.n	8003b1a <xQueueGenericSend+0x8e>
        __asm volatile
 8003b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	623b      	str	r3, [r7, #32]
    }
 8003b16:	bf00      	nop
 8003b18:	e7fe      	b.n	8003b18 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b1a:	f001 f8ff 	bl	8004d1c <xTaskGetSchedulerState>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d102      	bne.n	8003b2a <xQueueGenericSend+0x9e>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <xQueueGenericSend+0xa2>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <xQueueGenericSend+0xa4>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10a      	bne.n	8003b4a <xQueueGenericSend+0xbe>
        __asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	61fb      	str	r3, [r7, #28]
    }
 8003b46:	bf00      	nop
 8003b48:	e7fe      	b.n	8003b48 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003b4a:	f001 fe25 	bl	8005798 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d302      	bcc.n	8003b60 <xQueueGenericSend+0xd4>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d129      	bne.n	8003bb4 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	68b9      	ldr	r1, [r7, #8]
 8003b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b66:	f000 fa19 	bl	8003f9c <prvCopyDataToQueue>
 8003b6a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d010      	beq.n	8003b96 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b76:	3324      	adds	r3, #36	; 0x24
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 ff33 	bl	80049e4 <xTaskRemoveFromEventList>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d013      	beq.n	8003bac <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003b84:	4b3f      	ldr	r3, [pc, #252]	; (8003c84 <xQueueGenericSend+0x1f8>)
 8003b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	e00a      	b.n	8003bac <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d007      	beq.n	8003bac <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003b9c:	4b39      	ldr	r3, [pc, #228]	; (8003c84 <xQueueGenericSend+0x1f8>)
 8003b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003bac:	f001 fe24 	bl	80057f8 <vPortExitCritical>
                return pdPASS;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e063      	b.n	8003c7c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d103      	bne.n	8003bc2 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003bba:	f001 fe1d 	bl	80057f8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e05c      	b.n	8003c7c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d106      	bne.n	8003bd6 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003bc8:	f107 0314 	add.w	r3, r7, #20
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 ff6b 	bl	8004aa8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003bd6:	f001 fe0f 	bl	80057f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003bda:	f000 fce5 	bl	80045a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003bde:	f001 fddb 	bl	8005798 <vPortEnterCritical>
 8003be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003be8:	b25b      	sxtb	r3, r3
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bee:	d103      	bne.n	8003bf8 <xQueueGenericSend+0x16c>
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bfe:	b25b      	sxtb	r3, r3
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c04:	d103      	bne.n	8003c0e <xQueueGenericSend+0x182>
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c0e:	f001 fdf3 	bl	80057f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c12:	1d3a      	adds	r2, r7, #4
 8003c14:	f107 0314 	add.w	r3, r7, #20
 8003c18:	4611      	mov	r1, r2
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 ff5a 	bl	8004ad4 <xTaskCheckForTimeOut>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d124      	bne.n	8003c70 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c28:	f000 fab0 	bl	800418c <prvIsQueueFull>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d018      	beq.n	8003c64 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c34:	3310      	adds	r3, #16
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	4611      	mov	r1, r2
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fe82 	bl	8004944 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c42:	f000 fa3b 	bl	80040bc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003c46:	f000 fcbd 	bl	80045c4 <xTaskResumeAll>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f47f af7c 	bne.w	8003b4a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003c52:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <xQueueGenericSend+0x1f8>)
 8003c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	f3bf 8f4f 	dsb	sy
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	e772      	b.n	8003b4a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c66:	f000 fa29 	bl	80040bc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003c6a:	f000 fcab 	bl	80045c4 <xTaskResumeAll>
 8003c6e:	e76c      	b.n	8003b4a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c72:	f000 fa23 	bl	80040bc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003c76:	f000 fca5 	bl	80045c4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003c7a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3738      	adds	r7, #56	; 0x38
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	e000ed04 	.word	0xe000ed04

08003c88 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b090      	sub	sp, #64	; 0x40
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10a      	bne.n	8003cb6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003cb2:	bf00      	nop
 8003cb4:	e7fe      	b.n	8003cb4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d103      	bne.n	8003cc4 <xQueueGenericSendFromISR+0x3c>
 8003cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <xQueueGenericSendFromISR+0x40>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <xQueueGenericSendFromISR+0x42>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10a      	bne.n	8003ce4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003ce0:	bf00      	nop
 8003ce2:	e7fe      	b.n	8003ce2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d103      	bne.n	8003cf2 <xQueueGenericSendFromISR+0x6a>
 8003cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <xQueueGenericSendFromISR+0x6e>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <xQueueGenericSendFromISR+0x70>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d00:	f383 8811 	msr	BASEPRI, r3
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	623b      	str	r3, [r7, #32]
    }
 8003d0e:	bf00      	nop
 8003d10:	e7fe      	b.n	8003d10 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d12:	f001 fe23 	bl	800595c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003d16:	f3ef 8211 	mrs	r2, BASEPRI
 8003d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	61fa      	str	r2, [r7, #28]
 8003d2c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003d2e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d30:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d302      	bcc.n	8003d44 <xQueueGenericSendFromISR+0xbc>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d13e      	bne.n	8003dc2 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	68b9      	ldr	r1, [r7, #8]
 8003d58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d5a:	f000 f91f 	bl	8003f9c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003d5e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d66:	d112      	bne.n	8003d8e <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d025      	beq.n	8003dbc <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d72:	3324      	adds	r3, #36	; 0x24
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 fe35 	bl	80049e4 <xTaskRemoveFromEventList>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01d      	beq.n	8003dbc <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d01a      	beq.n	8003dbc <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e016      	b.n	8003dbc <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003d8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003d92:	2b7f      	cmp	r3, #127	; 0x7f
 8003d94:	d10a      	bne.n	8003dac <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8003d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9a:	f383 8811 	msr	BASEPRI, r3
 8003d9e:	f3bf 8f6f 	isb	sy
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	617b      	str	r3, [r7, #20]
    }
 8003da8:	bf00      	nop
 8003daa:	e7fe      	b.n	8003daa <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003dac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003db0:	3301      	adds	r3, #1
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	b25a      	sxtb	r2, r3
 8003db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003dc0:	e001      	b.n	8003dc6 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003dd0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3740      	adds	r7, #64	; 0x40
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08c      	sub	sp, #48	; 0x30
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003de8:	2300      	movs	r3, #0
 8003dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <xQueueReceive+0x30>
        __asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	623b      	str	r3, [r7, #32]
    }
 8003e08:	bf00      	nop
 8003e0a:	e7fe      	b.n	8003e0a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d103      	bne.n	8003e1a <xQueueReceive+0x3e>
 8003e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <xQueueReceive+0x42>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <xQueueReceive+0x44>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10a      	bne.n	8003e3a <xQueueReceive+0x5e>
        __asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	61fb      	str	r3, [r7, #28]
    }
 8003e36:	bf00      	nop
 8003e38:	e7fe      	b.n	8003e38 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e3a:	f000 ff6f 	bl	8004d1c <xTaskGetSchedulerState>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d102      	bne.n	8003e4a <xQueueReceive+0x6e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <xQueueReceive+0x72>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <xQueueReceive+0x74>
 8003e4e:	2300      	movs	r3, #0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10a      	bne.n	8003e6a <xQueueReceive+0x8e>
        __asm volatile
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	61bb      	str	r3, [r7, #24]
    }
 8003e66:	bf00      	nop
 8003e68:	e7fe      	b.n	8003e68 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003e6a:	f001 fc95 	bl	8005798 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01f      	beq.n	8003eba <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e7a:	68b9      	ldr	r1, [r7, #8]
 8003e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e7e:	f000 f8f7 	bl	8004070 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	1e5a      	subs	r2, r3, #1
 8003e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00f      	beq.n	8003eb2 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	3310      	adds	r3, #16
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fda4 	bl	80049e4 <xTaskRemoveFromEventList>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d007      	beq.n	8003eb2 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003ea2:	4b3d      	ldr	r3, [pc, #244]	; (8003f98 <xQueueReceive+0x1bc>)
 8003ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003eb2:	f001 fca1 	bl	80057f8 <vPortExitCritical>
                return pdPASS;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e069      	b.n	8003f8e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d103      	bne.n	8003ec8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003ec0:	f001 fc9a 	bl	80057f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	e062      	b.n	8003f8e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003ece:	f107 0310 	add.w	r3, r7, #16
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fde8 	bl	8004aa8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003edc:	f001 fc8c 	bl	80057f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003ee0:	f000 fb62 	bl	80045a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003ee4:	f001 fc58 	bl	8005798 <vPortEnterCritical>
 8003ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eee:	b25b      	sxtb	r3, r3
 8003ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef4:	d103      	bne.n	8003efe <xQueueReceive+0x122>
 8003ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f04:	b25b      	sxtb	r3, r3
 8003f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0a:	d103      	bne.n	8003f14 <xQueueReceive+0x138>
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f14:	f001 fc70 	bl	80057f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f18:	1d3a      	adds	r2, r7, #4
 8003f1a:	f107 0310 	add.w	r3, r7, #16
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fdd7 	bl	8004ad4 <xTaskCheckForTimeOut>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d123      	bne.n	8003f74 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f2e:	f000 f917 	bl	8004160 <prvIsQueueEmpty>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d017      	beq.n	8003f68 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	3324      	adds	r3, #36	; 0x24
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fcff 	bl	8004944 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f48:	f000 f8b8 	bl	80040bc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003f4c:	f000 fb3a 	bl	80045c4 <xTaskResumeAll>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d189      	bne.n	8003e6a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003f56:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <xQueueReceive+0x1bc>)
 8003f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	e780      	b.n	8003e6a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f6a:	f000 f8a7 	bl	80040bc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003f6e:	f000 fb29 	bl	80045c4 <xTaskResumeAll>
 8003f72:	e77a      	b.n	8003e6a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f76:	f000 f8a1 	bl	80040bc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003f7a:	f000 fb23 	bl	80045c4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f80:	f000 f8ee 	bl	8004160 <prvIsQueueEmpty>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f43f af6f 	beq.w	8003e6a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003f8c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3730      	adds	r7, #48	; 0x30
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	e000ed04 	.word	0xe000ed04

08003f9c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10d      	bne.n	8003fd6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d14d      	bne.n	800405e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fec6 	bl	8004d58 <xTaskPriorityDisinherit>
 8003fcc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	e043      	b.n	800405e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d119      	bne.n	8004010 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6858      	ldr	r0, [r3, #4]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	f001 ff1a 	bl	8005e20 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	441a      	add	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	429a      	cmp	r2, r3
 8004004:	d32b      	bcc.n	800405e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	605a      	str	r2, [r3, #4]
 800400e:	e026      	b.n	800405e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	68d8      	ldr	r0, [r3, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	461a      	mov	r2, r3
 800401a:	68b9      	ldr	r1, [r7, #8]
 800401c:	f001 ff00 	bl	8005e20 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	425b      	negs	r3, r3
 800402a:	441a      	add	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d207      	bcs.n	800404c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	425b      	negs	r3, r3
 8004046:	441a      	add	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d105      	bne.n	800405e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	3b01      	subs	r3, #1
 800405c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004066:	697b      	ldr	r3, [r7, #20]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	2b00      	cmp	r3, #0
 8004080:	d018      	beq.n	80040b4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	441a      	add	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	429a      	cmp	r2, r3
 800409a:	d303      	bcc.n	80040a4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68d9      	ldr	r1, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	461a      	mov	r2, r3
 80040ae:	6838      	ldr	r0, [r7, #0]
 80040b0:	f001 feb6 	bl	8005e20 <memcpy>
    }
}
 80040b4:	bf00      	nop
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80040c4:	f001 fb68 	bl	8005798 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040ce:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80040d0:	e011      	b.n	80040f6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d012      	beq.n	8004100 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3324      	adds	r3, #36	; 0x24
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fc80 	bl	80049e4 <xTaskRemoveFromEventList>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80040ea:	f000 fd59 	bl	8004ba0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80040f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	dce9      	bgt.n	80040d2 <prvUnlockQueue+0x16>
 80040fe:	e000      	b.n	8004102 <prvUnlockQueue+0x46>
                        break;
 8004100:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	22ff      	movs	r2, #255	; 0xff
 8004106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800410a:	f001 fb75 	bl	80057f8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800410e:	f001 fb43 	bl	8005798 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004118:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800411a:	e011      	b.n	8004140 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d012      	beq.n	800414a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3310      	adds	r3, #16
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fc5b 	bl	80049e4 <xTaskRemoveFromEventList>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004134:	f000 fd34 	bl	8004ba0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004138:	7bbb      	ldrb	r3, [r7, #14]
 800413a:	3b01      	subs	r3, #1
 800413c:	b2db      	uxtb	r3, r3
 800413e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004144:	2b00      	cmp	r3, #0
 8004146:	dce9      	bgt.n	800411c <prvUnlockQueue+0x60>
 8004148:	e000      	b.n	800414c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800414a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	22ff      	movs	r2, #255	; 0xff
 8004150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004154:	f001 fb50 	bl	80057f8 <vPortExitCritical>
}
 8004158:	bf00      	nop
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004168:	f001 fb16 	bl	8005798 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	2b00      	cmp	r3, #0
 8004172:	d102      	bne.n	800417a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004174:	2301      	movs	r3, #1
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	e001      	b.n	800417e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800417e:	f001 fb3b 	bl	80057f8 <vPortExitCritical>

    return xReturn;
 8004182:	68fb      	ldr	r3, [r7, #12]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004194:	f001 fb00 	bl	8005798 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d102      	bne.n	80041aa <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80041a4:	2301      	movs	r3, #1
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	e001      	b.n	80041ae <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80041ae:	f001 fb23 	bl	80057f8 <vPortExitCritical>

    return xReturn;
 80041b2:	68fb      	ldr	r3, [r7, #12]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	e014      	b.n	80041f6 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80041cc:	4a0f      	ldr	r2, [pc, #60]	; (800420c <vQueueAddToRegistry+0x50>)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10b      	bne.n	80041f0 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80041d8:	490c      	ldr	r1, [pc, #48]	; (800420c <vQueueAddToRegistry+0x50>)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80041e2:	4a0a      	ldr	r2, [pc, #40]	; (800420c <vQueueAddToRegistry+0x50>)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	4413      	add	r3, r2
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80041ee:	e006      	b.n	80041fe <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3301      	adds	r3, #1
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b07      	cmp	r3, #7
 80041fa:	d9e7      	bls.n	80041cc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80041fc:	bf00      	nop
 80041fe:	bf00      	nop
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	20000104 	.word	0x20000104

08004210 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004220:	f001 faba 	bl	8005798 <vPortEnterCritical>
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800422a:	b25b      	sxtb	r3, r3
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004230:	d103      	bne.n	800423a <vQueueWaitForMessageRestricted+0x2a>
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004240:	b25b      	sxtb	r3, r3
 8004242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004246:	d103      	bne.n	8004250 <vQueueWaitForMessageRestricted+0x40>
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004250:	f001 fad2 	bl	80057f8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	2b00      	cmp	r3, #0
 800425a:	d106      	bne.n	800426a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	3324      	adds	r3, #36	; 0x24
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	4618      	mov	r0, r3
 8004266:	f000 fb91 	bl	800498c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800426a:	6978      	ldr	r0, [r7, #20]
 800426c:	f7ff ff26 	bl	80040bc <prvUnlockQueue>
    }
 8004270:	bf00      	nop
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004278:	b580      	push	{r7, lr}
 800427a:	b08c      	sub	sp, #48	; 0x30
 800427c:	af04      	add	r7, sp, #16
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	4613      	mov	r3, r2
 8004286:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004288:	88fb      	ldrh	r3, [r7, #6]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4618      	mov	r0, r3
 800428e:	f001 fba5 	bl	80059dc <pvPortMalloc>
 8004292:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00e      	beq.n	80042b8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800429a:	2058      	movs	r0, #88	; 0x58
 800429c:	f001 fb9e 	bl	80059dc <pvPortMalloc>
 80042a0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	631a      	str	r2, [r3, #48]	; 0x30
 80042ae:	e005      	b.n	80042bc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80042b0:	6978      	ldr	r0, [r7, #20]
 80042b2:	f001 fc73 	bl	8005b9c <vPortFree>
 80042b6:	e001      	b.n	80042bc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d013      	beq.n	80042ea <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042c2:	88fa      	ldrh	r2, [r7, #6]
 80042c4:	2300      	movs	r3, #0
 80042c6:	9303      	str	r3, [sp, #12]
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	9302      	str	r3, [sp, #8]
 80042cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ce:	9301      	str	r3, [sp, #4]
 80042d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68b9      	ldr	r1, [r7, #8]
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 f80e 	bl	80042fa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80042de:	69f8      	ldr	r0, [r7, #28]
 80042e0:	f000 f8a2 	bl	8004428 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80042e4:	2301      	movs	r3, #1
 80042e6:	61bb      	str	r3, [r7, #24]
 80042e8:	e002      	b.n	80042f0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042ea:	f04f 33ff 	mov.w	r3, #4294967295
 80042ee:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80042f0:	69bb      	ldr	r3, [r7, #24]
    }
 80042f2:	4618      	mov	r0, r3
 80042f4:	3720      	adds	r7, #32
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b088      	sub	sp, #32
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	607a      	str	r2, [r7, #4]
 8004306:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	461a      	mov	r2, r3
 8004312:	21a5      	movs	r1, #165	; 0xa5
 8004314:	f001 fd92 	bl	8005e3c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004322:	3b01      	subs	r3, #1
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	f023 0307 	bic.w	r3, r3, #7
 8004330:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <prvInitialiseNewTask+0x58>
        __asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	617b      	str	r3, [r7, #20]
    }
 800434e:	bf00      	nop
 8004350:	e7fe      	b.n	8004350 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01f      	beq.n	8004398 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004358:	2300      	movs	r3, #0
 800435a:	61fb      	str	r3, [r7, #28]
 800435c:	e012      	b.n	8004384 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	4413      	add	r3, r2
 8004364:	7819      	ldrb	r1, [r3, #0]
 8004366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	4413      	add	r3, r2
 800436c:	3334      	adds	r3, #52	; 0x34
 800436e:	460a      	mov	r2, r1
 8004370:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	4413      	add	r3, r2
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d006      	beq.n	800438c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	3301      	adds	r3, #1
 8004382:	61fb      	str	r3, [r7, #28]
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	2b09      	cmp	r3, #9
 8004388:	d9e9      	bls.n	800435e <prvInitialiseNewTask+0x64>
 800438a:	e000      	b.n	800438e <prvInitialiseNewTask+0x94>
            {
                break;
 800438c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004396:	e003      	b.n	80043a0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d901      	bls.n	80043aa <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043a6:	2304      	movs	r3, #4
 80043a8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80043aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ae:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80043b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043b4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80043b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b8:	2200      	movs	r2, #0
 80043ba:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043be:	3304      	adds	r3, #4
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff f9e4 	bl	800378e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	3318      	adds	r3, #24
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff f9df 	bl	800378e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043d4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	f1c3 0205 	rsb	r2, r3, #5
 80043dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043de:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80043e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e8:	3350      	adds	r3, #80	; 0x50
 80043ea:	2204      	movs	r2, #4
 80043ec:	2100      	movs	r1, #0
 80043ee:	4618      	mov	r0, r3
 80043f0:	f001 fd24 	bl	8005e3c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80043f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f6:	3354      	adds	r3, #84	; 0x54
 80043f8:	2201      	movs	r2, #1
 80043fa:	2100      	movs	r1, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f001 fd1d 	bl	8005e3c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	68f9      	ldr	r1, [r7, #12]
 8004406:	69b8      	ldr	r0, [r7, #24]
 8004408:	f001 f898 	bl	800553c <pxPortInitialiseStack>
 800440c:	4602      	mov	r2, r0
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800441c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800441e:	bf00      	nop
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004430:	f001 f9b2 	bl	8005798 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004434:	4b2c      	ldr	r3, [pc, #176]	; (80044e8 <prvAddNewTaskToReadyList+0xc0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	3301      	adds	r3, #1
 800443a:	4a2b      	ldr	r2, [pc, #172]	; (80044e8 <prvAddNewTaskToReadyList+0xc0>)
 800443c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800443e:	4b2b      	ldr	r3, [pc, #172]	; (80044ec <prvAddNewTaskToReadyList+0xc4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d109      	bne.n	800445a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004446:	4a29      	ldr	r2, [pc, #164]	; (80044ec <prvAddNewTaskToReadyList+0xc4>)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800444c:	4b26      	ldr	r3, [pc, #152]	; (80044e8 <prvAddNewTaskToReadyList+0xc0>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d110      	bne.n	8004476 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004454:	f000 fbc8 	bl	8004be8 <prvInitialiseTaskLists>
 8004458:	e00d      	b.n	8004476 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800445a:	4b25      	ldr	r3, [pc, #148]	; (80044f0 <prvAddNewTaskToReadyList+0xc8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d109      	bne.n	8004476 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004462:	4b22      	ldr	r3, [pc, #136]	; (80044ec <prvAddNewTaskToReadyList+0xc4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	429a      	cmp	r2, r3
 800446e:	d802      	bhi.n	8004476 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004470:	4a1e      	ldr	r2, [pc, #120]	; (80044ec <prvAddNewTaskToReadyList+0xc4>)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004476:	4b1f      	ldr	r3, [pc, #124]	; (80044f4 <prvAddNewTaskToReadyList+0xcc>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3301      	adds	r3, #1
 800447c:	4a1d      	ldr	r2, [pc, #116]	; (80044f4 <prvAddNewTaskToReadyList+0xcc>)
 800447e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004480:	4b1c      	ldr	r3, [pc, #112]	; (80044f4 <prvAddNewTaskToReadyList+0xcc>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	2201      	movs	r2, #1
 800448e:	409a      	lsls	r2, r3
 8004490:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <prvAddNewTaskToReadyList+0xd0>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4313      	orrs	r3, r2
 8004496:	4a18      	ldr	r2, [pc, #96]	; (80044f8 <prvAddNewTaskToReadyList+0xd0>)
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449e:	4613      	mov	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4a15      	ldr	r2, [pc, #84]	; (80044fc <prvAddNewTaskToReadyList+0xd4>)
 80044a8:	441a      	add	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3304      	adds	r3, #4
 80044ae:	4619      	mov	r1, r3
 80044b0:	4610      	mov	r0, r2
 80044b2:	f7ff f979 	bl	80037a8 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80044b6:	f001 f99f 	bl	80057f8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80044ba:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <prvAddNewTaskToReadyList+0xc8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00e      	beq.n	80044e0 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044c2:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <prvAddNewTaskToReadyList+0xc4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d207      	bcs.n	80044e0 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <prvAddNewTaskToReadyList+0xd8>)
 80044d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80044e0:	bf00      	nop
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	2000021c 	.word	0x2000021c
 80044ec:	20000144 	.word	0x20000144
 80044f0:	20000228 	.word	0x20000228
 80044f4:	20000238 	.word	0x20000238
 80044f8:	20000224 	.word	0x20000224
 80044fc:	20000148 	.word	0x20000148
 8004500:	e000ed04 	.word	0xe000ed04

08004504 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800450a:	4b20      	ldr	r3, [pc, #128]	; (800458c <vTaskStartScheduler+0x88>)
 800450c:	9301      	str	r3, [sp, #4]
 800450e:	2300      	movs	r3, #0
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	2300      	movs	r3, #0
 8004514:	2282      	movs	r2, #130	; 0x82
 8004516:	491e      	ldr	r1, [pc, #120]	; (8004590 <vTaskStartScheduler+0x8c>)
 8004518:	481e      	ldr	r0, [pc, #120]	; (8004594 <vTaskStartScheduler+0x90>)
 800451a:	f7ff fead 	bl	8004278 <xTaskCreate>
 800451e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d102      	bne.n	800452c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004526:	f000 fcf7 	bl	8004f18 <xTimerCreateTimerTask>
 800452a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d116      	bne.n	8004560 <vTaskStartScheduler+0x5c>
        __asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	60bb      	str	r3, [r7, #8]
    }
 8004544:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004546:	4b14      	ldr	r3, [pc, #80]	; (8004598 <vTaskStartScheduler+0x94>)
 8004548:	f04f 32ff 	mov.w	r2, #4294967295
 800454c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800454e:	4b13      	ldr	r3, [pc, #76]	; (800459c <vTaskStartScheduler+0x98>)
 8004550:	2201      	movs	r2, #1
 8004552:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004554:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <vTaskStartScheduler+0x9c>)
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800455a:	f001 f87b 	bl	8005654 <xPortStartScheduler>
 800455e:	e00e      	b.n	800457e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004566:	d10a      	bne.n	800457e <vTaskStartScheduler+0x7a>
        __asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	607b      	str	r3, [r7, #4]
    }
 800457a:	bf00      	nop
 800457c:	e7fe      	b.n	800457c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800457e:	4b09      	ldr	r3, [pc, #36]	; (80045a4 <vTaskStartScheduler+0xa0>)
 8004580:	681b      	ldr	r3, [r3, #0]
}
 8004582:	bf00      	nop
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20000240 	.word	0x20000240
 8004590:	08005eac 	.word	0x08005eac
 8004594:	08004bb9 	.word	0x08004bb9
 8004598:	2000023c 	.word	0x2000023c
 800459c:	20000228 	.word	0x20000228
 80045a0:	20000220 	.word	0x20000220
 80045a4:	2000000c 	.word	0x2000000c

080045a8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80045ac:	4b04      	ldr	r3, [pc, #16]	; (80045c0 <vTaskSuspendAll+0x18>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3301      	adds	r3, #1
 80045b2:	4a03      	ldr	r2, [pc, #12]	; (80045c0 <vTaskSuspendAll+0x18>)
 80045b4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80045b6:	bf00      	nop
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	20000244 	.word	0x20000244

080045c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80045ce:	2300      	movs	r3, #0
 80045d0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80045d2:	4b41      	ldr	r3, [pc, #260]	; (80046d8 <xTaskResumeAll+0x114>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10a      	bne.n	80045f0 <xTaskResumeAll+0x2c>
        __asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	603b      	str	r3, [r7, #0]
    }
 80045ec:	bf00      	nop
 80045ee:	e7fe      	b.n	80045ee <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80045f0:	f001 f8d2 	bl	8005798 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80045f4:	4b38      	ldr	r3, [pc, #224]	; (80046d8 <xTaskResumeAll+0x114>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	4a37      	ldr	r2, [pc, #220]	; (80046d8 <xTaskResumeAll+0x114>)
 80045fc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045fe:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <xTaskResumeAll+0x114>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d161      	bne.n	80046ca <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004606:	4b35      	ldr	r3, [pc, #212]	; (80046dc <xTaskResumeAll+0x118>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d05d      	beq.n	80046ca <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800460e:	e02e      	b.n	800466e <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004610:	4b33      	ldr	r3, [pc, #204]	; (80046e0 <xTaskResumeAll+0x11c>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	3318      	adds	r3, #24
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff f920 	bl	8003862 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3304      	adds	r3, #4
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff f91b 	bl	8003862 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	2201      	movs	r2, #1
 8004632:	409a      	lsls	r2, r3
 8004634:	4b2b      	ldr	r3, [pc, #172]	; (80046e4 <xTaskResumeAll+0x120>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4313      	orrs	r3, r2
 800463a:	4a2a      	ldr	r2, [pc, #168]	; (80046e4 <xTaskResumeAll+0x120>)
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004642:	4613      	mov	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4a27      	ldr	r2, [pc, #156]	; (80046e8 <xTaskResumeAll+0x124>)
 800464c:	441a      	add	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3304      	adds	r3, #4
 8004652:	4619      	mov	r1, r3
 8004654:	4610      	mov	r0, r2
 8004656:	f7ff f8a7 	bl	80037a8 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465e:	4b23      	ldr	r3, [pc, #140]	; (80046ec <xTaskResumeAll+0x128>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	429a      	cmp	r2, r3
 8004666:	d302      	bcc.n	800466e <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8004668:	4b21      	ldr	r3, [pc, #132]	; (80046f0 <xTaskResumeAll+0x12c>)
 800466a:	2201      	movs	r2, #1
 800466c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800466e:	4b1c      	ldr	r3, [pc, #112]	; (80046e0 <xTaskResumeAll+0x11c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1cc      	bne.n	8004610 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800467c:	f000 fb32 	bl	8004ce4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004680:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <xTaskResumeAll+0x130>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d010      	beq.n	80046ae <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800468c:	f000 f846 	bl	800471c <xTaskIncrementTick>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8004696:	4b16      	ldr	r3, [pc, #88]	; (80046f0 <xTaskResumeAll+0x12c>)
 8004698:	2201      	movs	r2, #1
 800469a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3b01      	subs	r3, #1
 80046a0:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f1      	bne.n	800468c <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80046a8:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <xTaskResumeAll+0x130>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80046ae:	4b10      	ldr	r3, [pc, #64]	; (80046f0 <xTaskResumeAll+0x12c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d009      	beq.n	80046ca <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80046b6:	2301      	movs	r3, #1
 80046b8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80046ba:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <xTaskResumeAll+0x134>)
 80046bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80046ca:	f001 f895 	bl	80057f8 <vPortExitCritical>

    return xAlreadyYielded;
 80046ce:	68bb      	ldr	r3, [r7, #8]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20000244 	.word	0x20000244
 80046dc:	2000021c 	.word	0x2000021c
 80046e0:	200001dc 	.word	0x200001dc
 80046e4:	20000224 	.word	0x20000224
 80046e8:	20000148 	.word	0x20000148
 80046ec:	20000144 	.word	0x20000144
 80046f0:	20000230 	.word	0x20000230
 80046f4:	2000022c 	.word	0x2000022c
 80046f8:	e000ed04 	.word	0xe000ed04

080046fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004702:	4b05      	ldr	r3, [pc, #20]	; (8004718 <xTaskGetTickCount+0x1c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004708:	687b      	ldr	r3, [r7, #4]
}
 800470a:	4618      	mov	r0, r3
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20000220 	.word	0x20000220

0800471c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004726:	4b4e      	ldr	r3, [pc, #312]	; (8004860 <xTaskIncrementTick+0x144>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	f040 808e 	bne.w	800484c <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004730:	4b4c      	ldr	r3, [pc, #304]	; (8004864 <xTaskIncrementTick+0x148>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3301      	adds	r3, #1
 8004736:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004738:	4a4a      	ldr	r2, [pc, #296]	; (8004864 <xTaskIncrementTick+0x148>)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d120      	bne.n	8004786 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004744:	4b48      	ldr	r3, [pc, #288]	; (8004868 <xTaskIncrementTick+0x14c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <xTaskIncrementTick+0x48>
        __asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	603b      	str	r3, [r7, #0]
    }
 8004760:	bf00      	nop
 8004762:	e7fe      	b.n	8004762 <xTaskIncrementTick+0x46>
 8004764:	4b40      	ldr	r3, [pc, #256]	; (8004868 <xTaskIncrementTick+0x14c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	4b40      	ldr	r3, [pc, #256]	; (800486c <xTaskIncrementTick+0x150>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a3e      	ldr	r2, [pc, #248]	; (8004868 <xTaskIncrementTick+0x14c>)
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	4a3e      	ldr	r2, [pc, #248]	; (800486c <xTaskIncrementTick+0x150>)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	4b3d      	ldr	r3, [pc, #244]	; (8004870 <xTaskIncrementTick+0x154>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3301      	adds	r3, #1
 800477e:	4a3c      	ldr	r2, [pc, #240]	; (8004870 <xTaskIncrementTick+0x154>)
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	f000 faaf 	bl	8004ce4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004786:	4b3b      	ldr	r3, [pc, #236]	; (8004874 <xTaskIncrementTick+0x158>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	429a      	cmp	r2, r3
 800478e:	d348      	bcc.n	8004822 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004790:	4b35      	ldr	r3, [pc, #212]	; (8004868 <xTaskIncrementTick+0x14c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d104      	bne.n	80047a4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800479a:	4b36      	ldr	r3, [pc, #216]	; (8004874 <xTaskIncrementTick+0x158>)
 800479c:	f04f 32ff 	mov.w	r2, #4294967295
 80047a0:	601a      	str	r2, [r3, #0]
                    break;
 80047a2:	e03e      	b.n	8004822 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047a4:	4b30      	ldr	r3, [pc, #192]	; (8004868 <xTaskIncrementTick+0x14c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d203      	bcs.n	80047c4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80047bc:	4a2d      	ldr	r2, [pc, #180]	; (8004874 <xTaskIncrementTick+0x158>)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047c2:	e02e      	b.n	8004822 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	3304      	adds	r3, #4
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff f84a 	bl	8003862 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d004      	beq.n	80047e0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	3318      	adds	r3, #24
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff f841 	bl	8003862 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	2201      	movs	r2, #1
 80047e6:	409a      	lsls	r2, r3
 80047e8:	4b23      	ldr	r3, [pc, #140]	; (8004878 <xTaskIncrementTick+0x15c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	4a22      	ldr	r2, [pc, #136]	; (8004878 <xTaskIncrementTick+0x15c>)
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f6:	4613      	mov	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4a1f      	ldr	r2, [pc, #124]	; (800487c <xTaskIncrementTick+0x160>)
 8004800:	441a      	add	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	3304      	adds	r3, #4
 8004806:	4619      	mov	r1, r3
 8004808:	4610      	mov	r0, r2
 800480a:	f7fe ffcd 	bl	80037a8 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004812:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <xTaskIncrementTick+0x164>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	429a      	cmp	r2, r3
 800481a:	d3b9      	bcc.n	8004790 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800481c:	2301      	movs	r3, #1
 800481e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004820:	e7b6      	b.n	8004790 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004822:	4b17      	ldr	r3, [pc, #92]	; (8004880 <xTaskIncrementTick+0x164>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004828:	4914      	ldr	r1, [pc, #80]	; (800487c <xTaskIncrementTick+0x160>)
 800482a:	4613      	mov	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d901      	bls.n	800483e <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 800483a:	2301      	movs	r3, #1
 800483c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800483e:	4b11      	ldr	r3, [pc, #68]	; (8004884 <xTaskIncrementTick+0x168>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d007      	beq.n	8004856 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8004846:	2301      	movs	r3, #1
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	e004      	b.n	8004856 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800484c:	4b0e      	ldr	r3, [pc, #56]	; (8004888 <xTaskIncrementTick+0x16c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3301      	adds	r3, #1
 8004852:	4a0d      	ldr	r2, [pc, #52]	; (8004888 <xTaskIncrementTick+0x16c>)
 8004854:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004856:	697b      	ldr	r3, [r7, #20]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	20000244 	.word	0x20000244
 8004864:	20000220 	.word	0x20000220
 8004868:	200001d4 	.word	0x200001d4
 800486c:	200001d8 	.word	0x200001d8
 8004870:	20000234 	.word	0x20000234
 8004874:	2000023c 	.word	0x2000023c
 8004878:	20000224 	.word	0x20000224
 800487c:	20000148 	.word	0x20000148
 8004880:	20000144 	.word	0x20000144
 8004884:	20000230 	.word	0x20000230
 8004888:	2000022c 	.word	0x2000022c

0800488c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004892:	4b27      	ldr	r3, [pc, #156]	; (8004930 <vTaskSwitchContext+0xa4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800489a:	4b26      	ldr	r3, [pc, #152]	; (8004934 <vTaskSwitchContext+0xa8>)
 800489c:	2201      	movs	r2, #1
 800489e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80048a0:	e03f      	b.n	8004922 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80048a2:	4b24      	ldr	r3, [pc, #144]	; (8004934 <vTaskSwitchContext+0xa8>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048a8:	4b23      	ldr	r3, [pc, #140]	; (8004938 <vTaskSwitchContext+0xac>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	fab3 f383 	clz	r3, r3
 80048b4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80048b6:	7afb      	ldrb	r3, [r7, #11]
 80048b8:	f1c3 031f 	rsb	r3, r3, #31
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	491f      	ldr	r1, [pc, #124]	; (800493c <vTaskSwitchContext+0xb0>)
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	4613      	mov	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10a      	bne.n	80048e8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	607b      	str	r3, [r7, #4]
    }
 80048e4:	bf00      	nop
 80048e6:	e7fe      	b.n	80048e6 <vTaskSwitchContext+0x5a>
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	4613      	mov	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4a12      	ldr	r2, [pc, #72]	; (800493c <vTaskSwitchContext+0xb0>)
 80048f4:	4413      	add	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	605a      	str	r2, [r3, #4]
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	3308      	adds	r3, #8
 800490a:	429a      	cmp	r2, r3
 800490c:	d104      	bne.n	8004918 <vTaskSwitchContext+0x8c>
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	605a      	str	r2, [r3, #4]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	4a08      	ldr	r2, [pc, #32]	; (8004940 <vTaskSwitchContext+0xb4>)
 8004920:	6013      	str	r3, [r2, #0]
}
 8004922:	bf00      	nop
 8004924:	371c      	adds	r7, #28
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	20000244 	.word	0x20000244
 8004934:	20000230 	.word	0x20000230
 8004938:	20000224 	.word	0x20000224
 800493c:	20000148 	.word	0x20000148
 8004940:	20000144 	.word	0x20000144

08004944 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10a      	bne.n	800496a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	60fb      	str	r3, [r7, #12]
    }
 8004966:	bf00      	nop
 8004968:	e7fe      	b.n	8004968 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800496a:	4b07      	ldr	r3, [pc, #28]	; (8004988 <vTaskPlaceOnEventList+0x44>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3318      	adds	r3, #24
 8004970:	4619      	mov	r1, r3
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fe ff3c 	bl	80037f0 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004978:	2101      	movs	r1, #1
 800497a:	6838      	ldr	r0, [r7, #0]
 800497c:	f000 fa66 	bl	8004e4c <prvAddCurrentTaskToDelayedList>
}
 8004980:	bf00      	nop
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	20000144 	.word	0x20000144

0800498c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	617b      	str	r3, [r7, #20]
    }
 80049b0:	bf00      	nop
 80049b2:	e7fe      	b.n	80049b2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049b4:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3318      	adds	r3, #24
 80049ba:	4619      	mov	r1, r3
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f7fe fef3 	bl	80037a8 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80049c8:	f04f 33ff 	mov.w	r3, #4294967295
 80049cc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	68b8      	ldr	r0, [r7, #8]
 80049d2:	f000 fa3b 	bl	8004e4c <prvAddCurrentTaskToDelayedList>
    }
 80049d6:	bf00      	nop
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20000144 	.word	0x20000144

080049e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10a      	bne.n	8004a10 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	60fb      	str	r3, [r7, #12]
    }
 8004a0c:	bf00      	nop
 8004a0e:	e7fe      	b.n	8004a0e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	3318      	adds	r3, #24
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fe ff24 	bl	8003862 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a1a:	4b1d      	ldr	r3, [pc, #116]	; (8004a90 <xTaskRemoveFromEventList+0xac>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d11c      	bne.n	8004a5c <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	3304      	adds	r3, #4
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fe ff1b 	bl	8003862 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	2201      	movs	r2, #1
 8004a32:	409a      	lsls	r2, r3
 8004a34:	4b17      	ldr	r3, [pc, #92]	; (8004a94 <xTaskRemoveFromEventList+0xb0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	4a16      	ldr	r2, [pc, #88]	; (8004a94 <xTaskRemoveFromEventList+0xb0>)
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4a13      	ldr	r2, [pc, #76]	; (8004a98 <xTaskRemoveFromEventList+0xb4>)
 8004a4c:	441a      	add	r2, r3
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	3304      	adds	r3, #4
 8004a52:	4619      	mov	r1, r3
 8004a54:	4610      	mov	r0, r2
 8004a56:	f7fe fea7 	bl	80037a8 <vListInsertEnd>
 8004a5a:	e005      	b.n	8004a68 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	3318      	adds	r3, #24
 8004a60:	4619      	mov	r1, r3
 8004a62:	480e      	ldr	r0, [pc, #56]	; (8004a9c <xTaskRemoveFromEventList+0xb8>)
 8004a64:	f7fe fea0 	bl	80037a8 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6c:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <xTaskRemoveFromEventList+0xbc>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d905      	bls.n	8004a82 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004a76:	2301      	movs	r3, #1
 8004a78:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <xTaskRemoveFromEventList+0xc0>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	e001      	b.n	8004a86 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004a86:	697b      	ldr	r3, [r7, #20]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20000244 	.word	0x20000244
 8004a94:	20000224 	.word	0x20000224
 8004a98:	20000148 	.word	0x20000148
 8004a9c:	200001dc 	.word	0x200001dc
 8004aa0:	20000144 	.word	0x20000144
 8004aa4:	20000230 	.word	0x20000230

08004aa8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ab0:	4b06      	ldr	r3, [pc, #24]	; (8004acc <vTaskInternalSetTimeOutState+0x24>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <vTaskInternalSetTimeOutState+0x28>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	605a      	str	r2, [r3, #4]
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	20000234 	.word	0x20000234
 8004ad0:	20000220 	.word	0x20000220

08004ad4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10a      	bne.n	8004afa <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	613b      	str	r3, [r7, #16]
    }
 8004af6:	bf00      	nop
 8004af8:	e7fe      	b.n	8004af8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10a      	bne.n	8004b16 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	60fb      	str	r3, [r7, #12]
    }
 8004b12:	bf00      	nop
 8004b14:	e7fe      	b.n	8004b14 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004b16:	f000 fe3f 	bl	8005798 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004b1a:	4b1f      	ldr	r3, [pc, #124]	; (8004b98 <xTaskCheckForTimeOut+0xc4>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b32:	d102      	bne.n	8004b3a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004b34:	2300      	movs	r3, #0
 8004b36:	61fb      	str	r3, [r7, #28]
 8004b38:	e026      	b.n	8004b88 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4b17      	ldr	r3, [pc, #92]	; (8004b9c <xTaskCheckForTimeOut+0xc8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d00a      	beq.n	8004b5c <xTaskCheckForTimeOut+0x88>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d305      	bcc.n	8004b5c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004b50:	2301      	movs	r3, #1
 8004b52:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	e015      	b.n	8004b88 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d20b      	bcs.n	8004b7e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	1ad2      	subs	r2, r2, r3
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff ff98 	bl	8004aa8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61fb      	str	r3, [r7, #28]
 8004b7c:	e004      	b.n	8004b88 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2200      	movs	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004b84:	2301      	movs	r3, #1
 8004b86:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004b88:	f000 fe36 	bl	80057f8 <vPortExitCritical>

    return xReturn;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3720      	adds	r7, #32
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20000220 	.word	0x20000220
 8004b9c:	20000234 	.word	0x20000234

08004ba0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004ba4:	4b03      	ldr	r3, [pc, #12]	; (8004bb4 <vTaskMissedYield+0x14>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
}
 8004baa:	bf00      	nop
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	20000230 	.word	0x20000230

08004bb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004bc0:	f000 f852 	bl	8004c68 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bc4:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <prvIdleTask+0x28>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d9f9      	bls.n	8004bc0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004bcc:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <prvIdleTask+0x2c>)
 8004bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004bdc:	e7f0      	b.n	8004bc0 <prvIdleTask+0x8>
 8004bde:	bf00      	nop
 8004be0:	20000148 	.word	0x20000148
 8004be4:	e000ed04 	.word	0xe000ed04

08004be8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bee:	2300      	movs	r3, #0
 8004bf0:	607b      	str	r3, [r7, #4]
 8004bf2:	e00c      	b.n	8004c0e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4a12      	ldr	r2, [pc, #72]	; (8004c48 <prvInitialiseTaskLists+0x60>)
 8004c00:	4413      	add	r3, r2
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fe fda3 	bl	800374e <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	607b      	str	r3, [r7, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d9ef      	bls.n	8004bf4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004c14:	480d      	ldr	r0, [pc, #52]	; (8004c4c <prvInitialiseTaskLists+0x64>)
 8004c16:	f7fe fd9a 	bl	800374e <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004c1a:	480d      	ldr	r0, [pc, #52]	; (8004c50 <prvInitialiseTaskLists+0x68>)
 8004c1c:	f7fe fd97 	bl	800374e <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004c20:	480c      	ldr	r0, [pc, #48]	; (8004c54 <prvInitialiseTaskLists+0x6c>)
 8004c22:	f7fe fd94 	bl	800374e <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004c26:	480c      	ldr	r0, [pc, #48]	; (8004c58 <prvInitialiseTaskLists+0x70>)
 8004c28:	f7fe fd91 	bl	800374e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004c2c:	480b      	ldr	r0, [pc, #44]	; (8004c5c <prvInitialiseTaskLists+0x74>)
 8004c2e:	f7fe fd8e 	bl	800374e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004c32:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <prvInitialiseTaskLists+0x78>)
 8004c34:	4a05      	ldr	r2, [pc, #20]	; (8004c4c <prvInitialiseTaskLists+0x64>)
 8004c36:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c38:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <prvInitialiseTaskLists+0x7c>)
 8004c3a:	4a05      	ldr	r2, [pc, #20]	; (8004c50 <prvInitialiseTaskLists+0x68>)
 8004c3c:	601a      	str	r2, [r3, #0]
}
 8004c3e:	bf00      	nop
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20000148 	.word	0x20000148
 8004c4c:	200001ac 	.word	0x200001ac
 8004c50:	200001c0 	.word	0x200001c0
 8004c54:	200001dc 	.word	0x200001dc
 8004c58:	200001f0 	.word	0x200001f0
 8004c5c:	20000208 	.word	0x20000208
 8004c60:	200001d4 	.word	0x200001d4
 8004c64:	200001d8 	.word	0x200001d8

08004c68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c6e:	e019      	b.n	8004ca4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004c70:	f000 fd92 	bl	8005798 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c74:	4b10      	ldr	r3, [pc, #64]	; (8004cb8 <prvCheckTasksWaitingTermination+0x50>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fe fdee 	bl	8003862 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004c86:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <prvCheckTasksWaitingTermination+0x54>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	4a0b      	ldr	r2, [pc, #44]	; (8004cbc <prvCheckTasksWaitingTermination+0x54>)
 8004c8e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <prvCheckTasksWaitingTermination+0x58>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	4a0a      	ldr	r2, [pc, #40]	; (8004cc0 <prvCheckTasksWaitingTermination+0x58>)
 8004c98:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004c9a:	f000 fdad 	bl	80057f8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f810 	bl	8004cc4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ca4:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <prvCheckTasksWaitingTermination+0x58>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e1      	bne.n	8004c70 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	200001f0 	.word	0x200001f0
 8004cbc:	2000021c 	.word	0x2000021c
 8004cc0:	20000204 	.word	0x20000204

08004cc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 ff63 	bl	8005b9c <vPortFree>
                vPortFree( pxTCB );
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 ff60 	bl	8005b9c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004cdc:	bf00      	nop
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ce8:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <prvResetNextTaskUnblockTime+0x30>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d104      	bne.n	8004cfc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004cf2:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <prvResetNextTaskUnblockTime+0x34>)
 8004cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004cfa:	e005      	b.n	8004d08 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004cfc:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <prvResetNextTaskUnblockTime+0x30>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a04      	ldr	r2, [pc, #16]	; (8004d18 <prvResetNextTaskUnblockTime+0x34>)
 8004d06:	6013      	str	r3, [r2, #0]
}
 8004d08:	bf00      	nop
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	200001d4 	.word	0x200001d4
 8004d18:	2000023c 	.word	0x2000023c

08004d1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004d22:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <xTaskGetSchedulerState+0x34>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d102      	bne.n	8004d30 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	607b      	str	r3, [r7, #4]
 8004d2e:	e008      	b.n	8004d42 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d30:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <xTaskGetSchedulerState+0x38>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d102      	bne.n	8004d3e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004d38:	2302      	movs	r3, #2
 8004d3a:	607b      	str	r3, [r7, #4]
 8004d3c:	e001      	b.n	8004d42 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004d42:	687b      	ldr	r3, [r7, #4]
    }
 8004d44:	4618      	mov	r0, r3
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	20000228 	.word	0x20000228
 8004d54:	20000244 	.word	0x20000244

08004d58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d063      	beq.n	8004e36 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004d6e:	4b34      	ldr	r3, [pc, #208]	; (8004e40 <xTaskPriorityDisinherit+0xe8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d00a      	beq.n	8004d8e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	60fb      	str	r3, [r7, #12]
    }
 8004d8a:	bf00      	nop
 8004d8c:	e7fe      	b.n	8004d8c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	60bb      	str	r3, [r7, #8]
    }
 8004da8:	bf00      	nop
 8004daa:	e7fe      	b.n	8004daa <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db0:	1e5a      	subs	r2, r3, #1
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d039      	beq.n	8004e36 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d135      	bne.n	8004e36 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe fd47 	bl	8003862 <uxListRemove>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10a      	bne.n	8004df0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dde:	2201      	movs	r2, #1
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	43da      	mvns	r2, r3
 8004de6:	4b17      	ldr	r3, [pc, #92]	; (8004e44 <xTaskPriorityDisinherit+0xec>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4013      	ands	r3, r2
 8004dec:	4a15      	ldr	r2, [pc, #84]	; (8004e44 <xTaskPriorityDisinherit+0xec>)
 8004dee:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	f1c3 0205 	rsb	r2, r3, #5
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	2201      	movs	r2, #1
 8004e0a:	409a      	lsls	r2, r3
 8004e0c:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <xTaskPriorityDisinherit+0xec>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	4a0c      	ldr	r2, [pc, #48]	; (8004e44 <xTaskPriorityDisinherit+0xec>)
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4a09      	ldr	r2, [pc, #36]	; (8004e48 <xTaskPriorityDisinherit+0xf0>)
 8004e24:	441a      	add	r2, r3
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	f7fe fcbb 	bl	80037a8 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004e32:	2301      	movs	r3, #1
 8004e34:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004e36:	697b      	ldr	r3, [r7, #20]
    }
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20000144 	.word	0x20000144
 8004e44:	20000224 	.word	0x20000224
 8004e48:	20000148 	.word	0x20000148

08004e4c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004e56:	4b29      	ldr	r3, [pc, #164]	; (8004efc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e5c:	4b28      	ldr	r3, [pc, #160]	; (8004f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3304      	adds	r3, #4
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fe fcfd 	bl	8003862 <uxListRemove>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10b      	bne.n	8004e86 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004e6e:	4b24      	ldr	r3, [pc, #144]	; (8004f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	2201      	movs	r2, #1
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	43da      	mvns	r2, r3
 8004e7c:	4b21      	ldr	r3, [pc, #132]	; (8004f04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4013      	ands	r3, r2
 8004e82:	4a20      	ldr	r2, [pc, #128]	; (8004f04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e84:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8c:	d10a      	bne.n	8004ea4 <prvAddCurrentTaskToDelayedList+0x58>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d007      	beq.n	8004ea4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e94:	4b1a      	ldr	r3, [pc, #104]	; (8004f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	481a      	ldr	r0, [pc, #104]	; (8004f08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004e9e:	f7fe fc83 	bl	80037a8 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004ea2:	e026      	b.n	8004ef2 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004eac:	4b14      	ldr	r3, [pc, #80]	; (8004f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d209      	bcs.n	8004ed0 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ebc:	4b13      	ldr	r3, [pc, #76]	; (8004f0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	4b0f      	ldr	r3, [pc, #60]	; (8004f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4610      	mov	r0, r2
 8004eca:	f7fe fc91 	bl	80037f0 <vListInsert>
}
 8004ece:	e010      	b.n	8004ef2 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ed0:	4b0f      	ldr	r3, [pc, #60]	; (8004f10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f7fe fc87 	bl	80037f0 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004ee2:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d202      	bcs.n	8004ef2 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8004eec:	4a09      	ldr	r2, [pc, #36]	; (8004f14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	6013      	str	r3, [r2, #0]
}
 8004ef2:	bf00      	nop
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	20000220 	.word	0x20000220
 8004f00:	20000144 	.word	0x20000144
 8004f04:	20000224 	.word	0x20000224
 8004f08:	20000208 	.word	0x20000208
 8004f0c:	200001d8 	.word	0x200001d8
 8004f10:	200001d4 	.word	0x200001d4
 8004f14:	2000023c 	.word	0x2000023c

08004f18 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004f22:	f000 fad5 	bl	80054d0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004f26:	4b11      	ldr	r3, [pc, #68]	; (8004f6c <xTimerCreateTimerTask+0x54>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00b      	beq.n	8004f46 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004f2e:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <xTimerCreateTimerTask+0x58>)
 8004f30:	9301      	str	r3, [sp, #4]
 8004f32:	2302      	movs	r3, #2
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	2300      	movs	r3, #0
 8004f38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004f3c:	490d      	ldr	r1, [pc, #52]	; (8004f74 <xTimerCreateTimerTask+0x5c>)
 8004f3e:	480e      	ldr	r0, [pc, #56]	; (8004f78 <xTimerCreateTimerTask+0x60>)
 8004f40:	f7ff f99a 	bl	8004278 <xTaskCreate>
 8004f44:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10a      	bne.n	8004f62 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	603b      	str	r3, [r7, #0]
    }
 8004f5e:	bf00      	nop
 8004f60:	e7fe      	b.n	8004f60 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004f62:	687b      	ldr	r3, [r7, #4]
    }
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20000278 	.word	0x20000278
 8004f70:	2000027c 	.word	0x2000027c
 8004f74:	08005eb4 	.word	0x08005eb4
 8004f78:	080050b1 	.word	0x080050b1

08004f7c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08a      	sub	sp, #40	; 0x28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10a      	bne.n	8004faa <xTimerGenericCommand+0x2e>
        __asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	623b      	str	r3, [r7, #32]
    }
 8004fa6:	bf00      	nop
 8004fa8:	e7fe      	b.n	8004fa8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004faa:	4b1a      	ldr	r3, [pc, #104]	; (8005014 <xTimerGenericCommand+0x98>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d02a      	beq.n	8005008 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b05      	cmp	r3, #5
 8004fc2:	dc18      	bgt.n	8004ff6 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004fc4:	f7ff feaa 	bl	8004d1c <xTaskGetSchedulerState>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d109      	bne.n	8004fe2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004fce:	4b11      	ldr	r3, [pc, #68]	; (8005014 <xTimerGenericCommand+0x98>)
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	f107 0114 	add.w	r1, r7, #20
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fda:	f7fe fd57 	bl	8003a8c <xQueueGenericSend>
 8004fde:	6278      	str	r0, [r7, #36]	; 0x24
 8004fe0:	e012      	b.n	8005008 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004fe2:	4b0c      	ldr	r3, [pc, #48]	; (8005014 <xTimerGenericCommand+0x98>)
 8004fe4:	6818      	ldr	r0, [r3, #0]
 8004fe6:	f107 0114 	add.w	r1, r7, #20
 8004fea:	2300      	movs	r3, #0
 8004fec:	2200      	movs	r2, #0
 8004fee:	f7fe fd4d 	bl	8003a8c <xQueueGenericSend>
 8004ff2:	6278      	str	r0, [r7, #36]	; 0x24
 8004ff4:	e008      	b.n	8005008 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ff6:	4b07      	ldr	r3, [pc, #28]	; (8005014 <xTimerGenericCommand+0x98>)
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	f107 0114 	add.w	r1, r7, #20
 8004ffe:	2300      	movs	r3, #0
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	f7fe fe41 	bl	8003c88 <xQueueGenericSendFromISR>
 8005006:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800500a:	4618      	mov	r0, r3
 800500c:	3728      	adds	r7, #40	; 0x28
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20000278 	.word	0x20000278

08005018 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af02      	add	r7, sp, #8
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005022:	4b22      	ldr	r3, [pc, #136]	; (80050ac <prvProcessExpiredTimer+0x94>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	3304      	adds	r3, #4
 8005030:	4618      	mov	r0, r3
 8005032:	f7fe fc16 	bl	8003862 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	d022      	beq.n	800508a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	699a      	ldr	r2, [r3, #24]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	18d1      	adds	r1, r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	6978      	ldr	r0, [r7, #20]
 8005052:	f000 f8d1 	bl	80051f8 <prvInsertTimerInActiveList>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01f      	beq.n	800509c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800505c:	2300      	movs	r3, #0
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	2300      	movs	r3, #0
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	2100      	movs	r1, #0
 8005066:	6978      	ldr	r0, [r7, #20]
 8005068:	f7ff ff88 	bl	8004f7c <xTimerGenericCommand>
 800506c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d113      	bne.n	800509c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	60fb      	str	r3, [r7, #12]
    }
 8005086:	bf00      	nop
 8005088:	e7fe      	b.n	8005088 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005090:	f023 0301 	bic.w	r3, r3, #1
 8005094:	b2da      	uxtb	r2, r3
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	6978      	ldr	r0, [r7, #20]
 80050a2:	4798      	blx	r3
    }
 80050a4:	bf00      	nop
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	20000270 	.word	0x20000270

080050b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050b8:	f107 0308 	add.w	r3, r7, #8
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 f857 	bl	8005170 <prvGetNextExpireTime>
 80050c2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4619      	mov	r1, r3
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 f803 	bl	80050d4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80050ce:	f000 f8d5 	bl	800527c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050d2:	e7f1      	b.n	80050b8 <prvTimerTask+0x8>

080050d4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80050de:	f7ff fa63 	bl	80045a8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050e2:	f107 0308 	add.w	r3, r7, #8
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 f866 	bl	80051b8 <prvSampleTimeNow>
 80050ec:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d130      	bne.n	8005156 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10a      	bne.n	8005110 <prvProcessTimerOrBlockTask+0x3c>
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d806      	bhi.n	8005110 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005102:	f7ff fa5f 	bl	80045c4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005106:	68f9      	ldr	r1, [r7, #12]
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff ff85 	bl	8005018 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800510e:	e024      	b.n	800515a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d008      	beq.n	8005128 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005116:	4b13      	ldr	r3, [pc, #76]	; (8005164 <prvProcessTimerOrBlockTask+0x90>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <prvProcessTimerOrBlockTask+0x50>
 8005120:	2301      	movs	r3, #1
 8005122:	e000      	b.n	8005126 <prvProcessTimerOrBlockTask+0x52>
 8005124:	2300      	movs	r3, #0
 8005126:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005128:	4b0f      	ldr	r3, [pc, #60]	; (8005168 <prvProcessTimerOrBlockTask+0x94>)
 800512a:	6818      	ldr	r0, [r3, #0]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	4619      	mov	r1, r3
 8005136:	f7ff f86b 	bl	8004210 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800513a:	f7ff fa43 	bl	80045c4 <xTaskResumeAll>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10a      	bne.n	800515a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005144:	4b09      	ldr	r3, [pc, #36]	; (800516c <prvProcessTimerOrBlockTask+0x98>)
 8005146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	f3bf 8f6f 	isb	sy
    }
 8005154:	e001      	b.n	800515a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005156:	f7ff fa35 	bl	80045c4 <xTaskResumeAll>
    }
 800515a:	bf00      	nop
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20000274 	.word	0x20000274
 8005168:	20000278 	.word	0x20000278
 800516c:	e000ed04 	.word	0xe000ed04

08005170 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005178:	4b0e      	ldr	r3, [pc, #56]	; (80051b4 <prvGetNextExpireTime+0x44>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <prvGetNextExpireTime+0x16>
 8005182:	2201      	movs	r2, #1
 8005184:	e000      	b.n	8005188 <prvGetNextExpireTime+0x18>
 8005186:	2200      	movs	r2, #0
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d105      	bne.n	80051a0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005194:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <prvGetNextExpireTime+0x44>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	e001      	b.n	80051a4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80051a4:	68fb      	ldr	r3, [r7, #12]
    }
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	20000270 	.word	0x20000270

080051b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80051c0:	f7ff fa9c 	bl	80046fc <xTaskGetTickCount>
 80051c4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80051c6:	4b0b      	ldr	r3, [pc, #44]	; (80051f4 <prvSampleTimeNow+0x3c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d205      	bcs.n	80051dc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80051d0:	f000 f91a 	bl	8005408 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	e002      	b.n	80051e2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80051e2:	4a04      	ldr	r2, [pc, #16]	; (80051f4 <prvSampleTimeNow+0x3c>)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80051e8:	68fb      	ldr	r3, [r7, #12]
    }
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	20000280 	.word	0x20000280

080051f8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005206:	2300      	movs	r3, #0
 8005208:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	429a      	cmp	r2, r3
 800521c:	d812      	bhi.n	8005244 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	1ad2      	subs	r2, r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	429a      	cmp	r2, r3
 800522a:	d302      	bcc.n	8005232 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800522c:	2301      	movs	r3, #1
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	e01b      	b.n	800526a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005232:	4b10      	ldr	r3, [pc, #64]	; (8005274 <prvInsertTimerInActiveList+0x7c>)
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3304      	adds	r3, #4
 800523a:	4619      	mov	r1, r3
 800523c:	4610      	mov	r0, r2
 800523e:	f7fe fad7 	bl	80037f0 <vListInsert>
 8005242:	e012      	b.n	800526a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	429a      	cmp	r2, r3
 800524a:	d206      	bcs.n	800525a <prvInsertTimerInActiveList+0x62>
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	429a      	cmp	r2, r3
 8005252:	d302      	bcc.n	800525a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005254:	2301      	movs	r3, #1
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e007      	b.n	800526a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800525a:	4b07      	ldr	r3, [pc, #28]	; (8005278 <prvInsertTimerInActiveList+0x80>)
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3304      	adds	r3, #4
 8005262:	4619      	mov	r1, r3
 8005264:	4610      	mov	r0, r2
 8005266:	f7fe fac3 	bl	80037f0 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800526a:	697b      	ldr	r3, [r7, #20]
    }
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20000274 	.word	0x20000274
 8005278:	20000270 	.word	0x20000270

0800527c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800527c:	b580      	push	{r7, lr}
 800527e:	b08c      	sub	sp, #48	; 0x30
 8005280:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005282:	e0ae      	b.n	80053e2 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	f2c0 80aa 	blt.w	80053e0 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	3304      	adds	r3, #4
 800529c:	4618      	mov	r0, r3
 800529e:	f7fe fae0 	bl	8003862 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052a2:	1d3b      	adds	r3, r7, #4
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff ff87 	bl	80051b8 <prvSampleTimeNow>
 80052aa:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b09      	cmp	r3, #9
 80052b0:	f200 8097 	bhi.w	80053e2 <prvProcessReceivedCommands+0x166>
 80052b4:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <prvProcessReceivedCommands+0x40>)
 80052b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ba:	bf00      	nop
 80052bc:	080052e5 	.word	0x080052e5
 80052c0:	080052e5 	.word	0x080052e5
 80052c4:	080052e5 	.word	0x080052e5
 80052c8:	08005359 	.word	0x08005359
 80052cc:	0800536d 	.word	0x0800536d
 80052d0:	080053b7 	.word	0x080053b7
 80052d4:	080052e5 	.word	0x080052e5
 80052d8:	080052e5 	.word	0x080052e5
 80052dc:	08005359 	.word	0x08005359
 80052e0:	0800536d 	.word	0x0800536d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052ea:	f043 0301 	orr.w	r3, r3, #1
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	18d1      	adds	r1, r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6a3a      	ldr	r2, [r7, #32]
 8005302:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005304:	f7ff ff78 	bl	80051f8 <prvInsertTimerInActiveList>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d069      	beq.n	80053e2 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005314:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	d05e      	beq.n	80053e2 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	441a      	add	r2, r3
 800532c:	2300      	movs	r3, #0
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	2300      	movs	r3, #0
 8005332:	2100      	movs	r1, #0
 8005334:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005336:	f7ff fe21 	bl	8004f7c <xTimerGenericCommand>
 800533a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d14f      	bne.n	80053e2 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	61bb      	str	r3, [r7, #24]
    }
 8005354:	bf00      	nop
 8005356:	e7fe      	b.n	8005356 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800535e:	f023 0301 	bic.w	r3, r3, #1
 8005362:	b2da      	uxtb	r2, r3
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800536a:	e03a      	b.n	80053e2 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005372:	f043 0301 	orr.w	r3, r3, #1
 8005376:	b2da      	uxtb	r2, r3
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	617b      	str	r3, [r7, #20]
    }
 800539e:	bf00      	nop
 80053a0:	e7fe      	b.n	80053a0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	18d1      	adds	r1, r2, r3
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	6a3a      	ldr	r2, [r7, #32]
 80053ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053b0:	f7ff ff22 	bl	80051f8 <prvInsertTimerInActiveList>
                        break;
 80053b4:	e015      	b.n	80053e2 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d103      	bne.n	80053cc <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80053c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053c6:	f000 fbe9 	bl	8005b9c <vPortFree>
 80053ca:	e00a      	b.n	80053e2 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053d2:	f023 0301 	bic.w	r3, r3, #1
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80053de:	e000      	b.n	80053e2 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80053e0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053e2:	4b08      	ldr	r3, [pc, #32]	; (8005404 <prvProcessReceivedCommands+0x188>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f107 0108 	add.w	r1, r7, #8
 80053ea:	2200      	movs	r2, #0
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fe fcf5 	bl	8003ddc <xQueueReceive>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f47f af45 	bne.w	8005284 <prvProcessReceivedCommands+0x8>
        }
    }
 80053fa:	bf00      	nop
 80053fc:	bf00      	nop
 80053fe:	3728      	adds	r7, #40	; 0x28
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000278 	.word	0x20000278

08005408 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800540e:	e048      	b.n	80054a2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005410:	4b2d      	ldr	r3, [pc, #180]	; (80054c8 <prvSwitchTimerLists+0xc0>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800541a:	4b2b      	ldr	r3, [pc, #172]	; (80054c8 <prvSwitchTimerLists+0xc0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3304      	adds	r3, #4
 8005428:	4618      	mov	r0, r3
 800542a:	f7fe fa1a 	bl	8003862 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d02e      	beq.n	80054a2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4413      	add	r3, r2
 800544c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	429a      	cmp	r2, r3
 8005454:	d90e      	bls.n	8005474 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005462:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <prvSwitchTimerLists+0xc0>)
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	3304      	adds	r3, #4
 800546a:	4619      	mov	r1, r3
 800546c:	4610      	mov	r0, r2
 800546e:	f7fe f9bf 	bl	80037f0 <vListInsert>
 8005472:	e016      	b.n	80054a2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005474:	2300      	movs	r3, #0
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	2300      	movs	r3, #0
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	2100      	movs	r1, #0
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f7ff fd7c 	bl	8004f7c <xTimerGenericCommand>
 8005484:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10a      	bne.n	80054a2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	603b      	str	r3, [r7, #0]
    }
 800549e:	bf00      	nop
 80054a0:	e7fe      	b.n	80054a0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054a2:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <prvSwitchTimerLists+0xc0>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1b1      	bne.n	8005410 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80054ac:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <prvSwitchTimerLists+0xc0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80054b2:	4b06      	ldr	r3, [pc, #24]	; (80054cc <prvSwitchTimerLists+0xc4>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a04      	ldr	r2, [pc, #16]	; (80054c8 <prvSwitchTimerLists+0xc0>)
 80054b8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80054ba:	4a04      	ldr	r2, [pc, #16]	; (80054cc <prvSwitchTimerLists+0xc4>)
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	6013      	str	r3, [r2, #0]
    }
 80054c0:	bf00      	nop
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	20000270 	.word	0x20000270
 80054cc:	20000274 	.word	0x20000274

080054d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80054d4:	f000 f960 	bl	8005798 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80054d8:	4b12      	ldr	r3, [pc, #72]	; (8005524 <prvCheckForValidListAndQueue+0x54>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d11d      	bne.n	800551c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80054e0:	4811      	ldr	r0, [pc, #68]	; (8005528 <prvCheckForValidListAndQueue+0x58>)
 80054e2:	f7fe f934 	bl	800374e <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80054e6:	4811      	ldr	r0, [pc, #68]	; (800552c <prvCheckForValidListAndQueue+0x5c>)
 80054e8:	f7fe f931 	bl	800374e <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80054ec:	4b10      	ldr	r3, [pc, #64]	; (8005530 <prvCheckForValidListAndQueue+0x60>)
 80054ee:	4a0e      	ldr	r2, [pc, #56]	; (8005528 <prvCheckForValidListAndQueue+0x58>)
 80054f0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80054f2:	4b10      	ldr	r3, [pc, #64]	; (8005534 <prvCheckForValidListAndQueue+0x64>)
 80054f4:	4a0d      	ldr	r2, [pc, #52]	; (800552c <prvCheckForValidListAndQueue+0x5c>)
 80054f6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80054f8:	2200      	movs	r2, #0
 80054fa:	210c      	movs	r1, #12
 80054fc:	200a      	movs	r0, #10
 80054fe:	f7fe fa43 	bl	8003988 <xQueueGenericCreate>
 8005502:	4603      	mov	r3, r0
 8005504:	4a07      	ldr	r2, [pc, #28]	; (8005524 <prvCheckForValidListAndQueue+0x54>)
 8005506:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005508:	4b06      	ldr	r3, [pc, #24]	; (8005524 <prvCheckForValidListAndQueue+0x54>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005510:	4b04      	ldr	r3, [pc, #16]	; (8005524 <prvCheckForValidListAndQueue+0x54>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4908      	ldr	r1, [pc, #32]	; (8005538 <prvCheckForValidListAndQueue+0x68>)
 8005516:	4618      	mov	r0, r3
 8005518:	f7fe fe50 	bl	80041bc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800551c:	f000 f96c 	bl	80057f8 <vPortExitCritical>
    }
 8005520:	bf00      	nop
 8005522:	bd80      	pop	{r7, pc}
 8005524:	20000278 	.word	0x20000278
 8005528:	20000248 	.word	0x20000248
 800552c:	2000025c 	.word	0x2000025c
 8005530:	20000270 	.word	0x20000270
 8005534:	20000274 	.word	0x20000274
 8005538:	08005ebc 	.word	0x08005ebc

0800553c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3b04      	subs	r3, #4
 800554c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005554:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3b04      	subs	r3, #4
 800555a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f023 0201 	bic.w	r2, r3, #1
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3b04      	subs	r3, #4
 800556a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800556c:	4a0c      	ldr	r2, [pc, #48]	; (80055a0 <pxPortInitialiseStack+0x64>)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	3b14      	subs	r3, #20
 8005576:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3b04      	subs	r3, #4
 8005582:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f06f 0202 	mvn.w	r2, #2
 800558a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3b20      	subs	r3, #32
 8005590:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005592:	68fb      	ldr	r3, [r7, #12]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	080055a5 	.word	0x080055a5

080055a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80055aa:	2300      	movs	r3, #0
 80055ac:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80055ae:	4b12      	ldr	r3, [pc, #72]	; (80055f8 <prvTaskExitError+0x54>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b6:	d00a      	beq.n	80055ce <prvTaskExitError+0x2a>
        __asm volatile
 80055b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	60fb      	str	r3, [r7, #12]
    }
 80055ca:	bf00      	nop
 80055cc:	e7fe      	b.n	80055cc <prvTaskExitError+0x28>
        __asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	60bb      	str	r3, [r7, #8]
    }
 80055e0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80055e2:	bf00      	nop
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0fc      	beq.n	80055e4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80055ea:	bf00      	nop
 80055ec:	bf00      	nop
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	20000010 	.word	0x20000010
 80055fc:	00000000 	.word	0x00000000

08005600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005600:	4b07      	ldr	r3, [pc, #28]	; (8005620 <pxCurrentTCBConst2>)
 8005602:	6819      	ldr	r1, [r3, #0]
 8005604:	6808      	ldr	r0, [r1, #0]
 8005606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560a:	f380 8809 	msr	PSP, r0
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f04f 0000 	mov.w	r0, #0
 8005616:	f380 8811 	msr	BASEPRI, r0
 800561a:	4770      	bx	lr
 800561c:	f3af 8000 	nop.w

08005620 <pxCurrentTCBConst2>:
 8005620:	20000144 	.word	0x20000144
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop

08005628 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005628:	4808      	ldr	r0, [pc, #32]	; (800564c <prvPortStartFirstTask+0x24>)
 800562a:	6800      	ldr	r0, [r0, #0]
 800562c:	6800      	ldr	r0, [r0, #0]
 800562e:	f380 8808 	msr	MSP, r0
 8005632:	f04f 0000 	mov.w	r0, #0
 8005636:	f380 8814 	msr	CONTROL, r0
 800563a:	b662      	cpsie	i
 800563c:	b661      	cpsie	f
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	df00      	svc	0
 8005648:	bf00      	nop
 800564a:	0000      	.short	0x0000
 800564c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005650:	bf00      	nop
 8005652:	bf00      	nop

08005654 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800565a:	4b46      	ldr	r3, [pc, #280]	; (8005774 <xPortStartScheduler+0x120>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a46      	ldr	r2, [pc, #280]	; (8005778 <xPortStartScheduler+0x124>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d10a      	bne.n	800567a <xPortStartScheduler+0x26>
        __asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	613b      	str	r3, [r7, #16]
    }
 8005676:	bf00      	nop
 8005678:	e7fe      	b.n	8005678 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800567a:	4b3e      	ldr	r3, [pc, #248]	; (8005774 <xPortStartScheduler+0x120>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a3f      	ldr	r2, [pc, #252]	; (800577c <xPortStartScheduler+0x128>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d10a      	bne.n	800569a <xPortStartScheduler+0x46>
        __asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	60fb      	str	r3, [r7, #12]
    }
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800569a:	4b39      	ldr	r3, [pc, #228]	; (8005780 <xPortStartScheduler+0x12c>)
 800569c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	22ff      	movs	r2, #255	; 0xff
 80056aa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056b4:	78fb      	ldrb	r3, [r7, #3]
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	4b31      	ldr	r3, [pc, #196]	; (8005784 <xPortStartScheduler+0x130>)
 80056c0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056c2:	4b31      	ldr	r3, [pc, #196]	; (8005788 <xPortStartScheduler+0x134>)
 80056c4:	2207      	movs	r2, #7
 80056c6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056c8:	e009      	b.n	80056de <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80056ca:	4b2f      	ldr	r3, [pc, #188]	; (8005788 <xPortStartScheduler+0x134>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	4a2d      	ldr	r2, [pc, #180]	; (8005788 <xPortStartScheduler+0x134>)
 80056d2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056de:	78fb      	ldrb	r3, [r7, #3]
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e6:	2b80      	cmp	r3, #128	; 0x80
 80056e8:	d0ef      	beq.n	80056ca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056ea:	4b27      	ldr	r3, [pc, #156]	; (8005788 <xPortStartScheduler+0x134>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f1c3 0307 	rsb	r3, r3, #7
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d00a      	beq.n	800570c <xPortStartScheduler+0xb8>
        __asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	60bb      	str	r3, [r7, #8]
    }
 8005708:	bf00      	nop
 800570a:	e7fe      	b.n	800570a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800570c:	4b1e      	ldr	r3, [pc, #120]	; (8005788 <xPortStartScheduler+0x134>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	021b      	lsls	r3, r3, #8
 8005712:	4a1d      	ldr	r2, [pc, #116]	; (8005788 <xPortStartScheduler+0x134>)
 8005714:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005716:	4b1c      	ldr	r3, [pc, #112]	; (8005788 <xPortStartScheduler+0x134>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800571e:	4a1a      	ldr	r2, [pc, #104]	; (8005788 <xPortStartScheduler+0x134>)
 8005720:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	b2da      	uxtb	r2, r3
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800572a:	4b18      	ldr	r3, [pc, #96]	; (800578c <xPortStartScheduler+0x138>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a17      	ldr	r2, [pc, #92]	; (800578c <xPortStartScheduler+0x138>)
 8005730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005734:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005736:	4b15      	ldr	r3, [pc, #84]	; (800578c <xPortStartScheduler+0x138>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a14      	ldr	r2, [pc, #80]	; (800578c <xPortStartScheduler+0x138>)
 800573c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005740:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005742:	f000 f8db 	bl	80058fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005746:	4b12      	ldr	r3, [pc, #72]	; (8005790 <xPortStartScheduler+0x13c>)
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800574c:	f000 f8fa 	bl	8005944 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005750:	4b10      	ldr	r3, [pc, #64]	; (8005794 <xPortStartScheduler+0x140>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a0f      	ldr	r2, [pc, #60]	; (8005794 <xPortStartScheduler+0x140>)
 8005756:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800575a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800575c:	f7ff ff64 	bl	8005628 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005760:	f7ff f894 	bl	800488c <vTaskSwitchContext>
    prvTaskExitError();
 8005764:	f7ff ff1e 	bl	80055a4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	e000ed00 	.word	0xe000ed00
 8005778:	410fc271 	.word	0x410fc271
 800577c:	410fc270 	.word	0x410fc270
 8005780:	e000e400 	.word	0xe000e400
 8005784:	20000284 	.word	0x20000284
 8005788:	20000288 	.word	0x20000288
 800578c:	e000ed20 	.word	0xe000ed20
 8005790:	20000010 	.word	0x20000010
 8005794:	e000ef34 	.word	0xe000ef34

08005798 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
        __asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	607b      	str	r3, [r7, #4]
    }
 80057b0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80057b2:	4b0f      	ldr	r3, [pc, #60]	; (80057f0 <vPortEnterCritical+0x58>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3301      	adds	r3, #1
 80057b8:	4a0d      	ldr	r2, [pc, #52]	; (80057f0 <vPortEnterCritical+0x58>)
 80057ba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80057bc:	4b0c      	ldr	r3, [pc, #48]	; (80057f0 <vPortEnterCritical+0x58>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d10f      	bne.n	80057e4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80057c4:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <vPortEnterCritical+0x5c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <vPortEnterCritical+0x4c>
        __asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	603b      	str	r3, [r7, #0]
    }
 80057e0:	bf00      	nop
 80057e2:	e7fe      	b.n	80057e2 <vPortEnterCritical+0x4a>
    }
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	20000010 	.word	0x20000010
 80057f4:	e000ed04 	.word	0xe000ed04

080057f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80057fe:	4b12      	ldr	r3, [pc, #72]	; (8005848 <vPortExitCritical+0x50>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10a      	bne.n	800581c <vPortExitCritical+0x24>
        __asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	607b      	str	r3, [r7, #4]
    }
 8005818:	bf00      	nop
 800581a:	e7fe      	b.n	800581a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800581c:	4b0a      	ldr	r3, [pc, #40]	; (8005848 <vPortExitCritical+0x50>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3b01      	subs	r3, #1
 8005822:	4a09      	ldr	r2, [pc, #36]	; (8005848 <vPortExitCritical+0x50>)
 8005824:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005826:	4b08      	ldr	r3, [pc, #32]	; (8005848 <vPortExitCritical+0x50>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d105      	bne.n	800583a <vPortExitCritical+0x42>
 800582e:	2300      	movs	r3, #0
 8005830:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	f383 8811 	msr	BASEPRI, r3
    }
 8005838:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	20000010 	.word	0x20000010
 800584c:	00000000 	.word	0x00000000

08005850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005850:	f3ef 8009 	mrs	r0, PSP
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	4b15      	ldr	r3, [pc, #84]	; (80058b0 <pxCurrentTCBConst>)
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	f01e 0f10 	tst.w	lr, #16
 8005860:	bf08      	it	eq
 8005862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800586a:	6010      	str	r0, [r2, #0]
 800586c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005870:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005874:	f380 8811 	msr	BASEPRI, r0
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f7ff f804 	bl	800488c <vTaskSwitchContext>
 8005884:	f04f 0000 	mov.w	r0, #0
 8005888:	f380 8811 	msr	BASEPRI, r0
 800588c:	bc09      	pop	{r0, r3}
 800588e:	6819      	ldr	r1, [r3, #0]
 8005890:	6808      	ldr	r0, [r1, #0]
 8005892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005896:	f01e 0f10 	tst.w	lr, #16
 800589a:	bf08      	it	eq
 800589c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058a0:	f380 8809 	msr	PSP, r0
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	f3af 8000 	nop.w

080058b0 <pxCurrentTCBConst>:
 80058b0:	20000144 	.word	0x20000144
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop

080058b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
        __asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	607b      	str	r3, [r7, #4]
    }
 80058d0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80058d2:	f7fe ff23 	bl	800471c <xTaskIncrementTick>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80058dc:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <SysTick_Handler+0x40>)
 80058de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	2300      	movs	r3, #0
 80058e6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	f383 8811 	msr	BASEPRI, r3
    }
 80058ee:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80058f0:	bf00      	nop
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	e000ed04 	.word	0xe000ed04

080058fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005900:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <vPortSetupTimerInterrupt+0x34>)
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005906:	4b0b      	ldr	r3, [pc, #44]	; (8005934 <vPortSetupTimerInterrupt+0x38>)
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800590c:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <vPortSetupTimerInterrupt+0x3c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a0a      	ldr	r2, [pc, #40]	; (800593c <vPortSetupTimerInterrupt+0x40>)
 8005912:	fba2 2303 	umull	r2, r3, r2, r3
 8005916:	099b      	lsrs	r3, r3, #6
 8005918:	4a09      	ldr	r2, [pc, #36]	; (8005940 <vPortSetupTimerInterrupt+0x44>)
 800591a:	3b01      	subs	r3, #1
 800591c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800591e:	4b04      	ldr	r3, [pc, #16]	; (8005930 <vPortSetupTimerInterrupt+0x34>)
 8005920:	2207      	movs	r2, #7
 8005922:	601a      	str	r2, [r3, #0]
}
 8005924:	bf00      	nop
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	e000e010 	.word	0xe000e010
 8005934:	e000e018 	.word	0xe000e018
 8005938:	20000000 	.word	0x20000000
 800593c:	10624dd3 	.word	0x10624dd3
 8005940:	e000e014 	.word	0xe000e014

08005944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005944:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005954 <vPortEnableVFP+0x10>
 8005948:	6801      	ldr	r1, [r0, #0]
 800594a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800594e:	6001      	str	r1, [r0, #0]
 8005950:	4770      	bx	lr
 8005952:	0000      	.short	0x0000
 8005954:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005958:	bf00      	nop
 800595a:	bf00      	nop

0800595c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005962:	f3ef 8305 	mrs	r3, IPSR
 8005966:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2b0f      	cmp	r3, #15
 800596c:	d914      	bls.n	8005998 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800596e:	4a17      	ldr	r2, [pc, #92]	; (80059cc <vPortValidateInterruptPriority+0x70>)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4413      	add	r3, r2
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005978:	4b15      	ldr	r3, [pc, #84]	; (80059d0 <vPortValidateInterruptPriority+0x74>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	7afa      	ldrb	r2, [r7, #11]
 800597e:	429a      	cmp	r2, r3
 8005980:	d20a      	bcs.n	8005998 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	607b      	str	r3, [r7, #4]
    }
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005998:	4b0e      	ldr	r3, [pc, #56]	; (80059d4 <vPortValidateInterruptPriority+0x78>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059a0:	4b0d      	ldr	r3, [pc, #52]	; (80059d8 <vPortValidateInterruptPriority+0x7c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d90a      	bls.n	80059be <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	603b      	str	r3, [r7, #0]
    }
 80059ba:	bf00      	nop
 80059bc:	e7fe      	b.n	80059bc <vPortValidateInterruptPriority+0x60>
    }
 80059be:	bf00      	nop
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	e000e3f0 	.word	0xe000e3f0
 80059d0:	20000284 	.word	0x20000284
 80059d4:	e000ed0c 	.word	0xe000ed0c
 80059d8:	20000288 	.word	0x20000288

080059dc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08a      	sub	sp, #40	; 0x28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80059e4:	2300      	movs	r3, #0
 80059e6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80059e8:	f7fe fdde 	bl	80045a8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80059ec:	4b65      	ldr	r3, [pc, #404]	; (8005b84 <pvPortMalloc+0x1a8>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80059f4:	f000 f934 	bl	8005c60 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80059f8:	4b63      	ldr	r3, [pc, #396]	; (8005b88 <pvPortMalloc+0x1ac>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4013      	ands	r3, r2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f040 80a7 	bne.w	8005b54 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d02d      	beq.n	8005a68 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005a0c:	2208      	movs	r2, #8
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d227      	bcs.n	8005a68 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005a18:	2208      	movs	r2, #8
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d021      	beq.n	8005a6e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f023 0307 	bic.w	r3, r3, #7
 8005a30:	3308      	adds	r3, #8
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d214      	bcs.n	8005a62 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f023 0307 	bic.w	r3, r3, #7
 8005a3e:	3308      	adds	r3, #8
 8005a40:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d010      	beq.n	8005a6e <pvPortMalloc+0x92>
        __asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	617b      	str	r3, [r7, #20]
    }
 8005a5e:	bf00      	nop
 8005a60:	e7fe      	b.n	8005a60 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005a62:	2300      	movs	r3, #0
 8005a64:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a66:	e002      	b.n	8005a6e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	607b      	str	r3, [r7, #4]
 8005a6c:	e000      	b.n	8005a70 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a6e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d06e      	beq.n	8005b54 <pvPortMalloc+0x178>
 8005a76:	4b45      	ldr	r3, [pc, #276]	; (8005b8c <pvPortMalloc+0x1b0>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d869      	bhi.n	8005b54 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005a80:	4b43      	ldr	r3, [pc, #268]	; (8005b90 <pvPortMalloc+0x1b4>)
 8005a82:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005a84:	4b42      	ldr	r3, [pc, #264]	; (8005b90 <pvPortMalloc+0x1b4>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a8a:	e004      	b.n	8005a96 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d903      	bls.n	8005aa8 <pvPortMalloc+0xcc>
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1f1      	bne.n	8005a8c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005aa8:	4b36      	ldr	r3, [pc, #216]	; (8005b84 <pvPortMalloc+0x1a8>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d050      	beq.n	8005b54 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2208      	movs	r2, #8
 8005ab8:	4413      	add	r3, r2
 8005aba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	1ad2      	subs	r2, r2, r3
 8005acc:	2308      	movs	r3, #8
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d91f      	bls.n	8005b14 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4413      	add	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <pvPortMalloc+0x120>
        __asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	613b      	str	r3, [r7, #16]
    }
 8005af8:	bf00      	nop
 8005afa:	e7fe      	b.n	8005afa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	1ad2      	subs	r2, r2, r3
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b0e:	69b8      	ldr	r0, [r7, #24]
 8005b10:	f000 f908 	bl	8005d24 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b14:	4b1d      	ldr	r3, [pc, #116]	; (8005b8c <pvPortMalloc+0x1b0>)
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	4a1b      	ldr	r2, [pc, #108]	; (8005b8c <pvPortMalloc+0x1b0>)
 8005b20:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b22:	4b1a      	ldr	r3, [pc, #104]	; (8005b8c <pvPortMalloc+0x1b0>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	4b1b      	ldr	r3, [pc, #108]	; (8005b94 <pvPortMalloc+0x1b8>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d203      	bcs.n	8005b36 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b2e:	4b17      	ldr	r3, [pc, #92]	; (8005b8c <pvPortMalloc+0x1b0>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a18      	ldr	r2, [pc, #96]	; (8005b94 <pvPortMalloc+0x1b8>)
 8005b34:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	4b13      	ldr	r3, [pc, #76]	; (8005b88 <pvPortMalloc+0x1ac>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005b4a:	4b13      	ldr	r3, [pc, #76]	; (8005b98 <pvPortMalloc+0x1bc>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	4a11      	ldr	r2, [pc, #68]	; (8005b98 <pvPortMalloc+0x1bc>)
 8005b52:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005b54:	f7fe fd36 	bl	80045c4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <pvPortMalloc+0x19c>
        __asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	60fb      	str	r3, [r7, #12]
    }
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <pvPortMalloc+0x19a>
    return pvReturn;
 8005b78:	69fb      	ldr	r3, [r7, #28]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3728      	adds	r7, #40	; 0x28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20012e94 	.word	0x20012e94
 8005b88:	20012ea8 	.word	0x20012ea8
 8005b8c:	20012e98 	.word	0x20012e98
 8005b90:	20012e8c 	.word	0x20012e8c
 8005b94:	20012e9c 	.word	0x20012e9c
 8005b98:	20012ea0 	.word	0x20012ea0

08005b9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d04d      	beq.n	8005c4a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005bae:	2308      	movs	r3, #8
 8005bb0:	425b      	negs	r3, r3
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	4b24      	ldr	r3, [pc, #144]	; (8005c54 <vPortFree+0xb8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10a      	bne.n	8005be0 <vPortFree+0x44>
        __asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	60fb      	str	r3, [r7, #12]
    }
 8005bdc:	bf00      	nop
 8005bde:	e7fe      	b.n	8005bde <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00a      	beq.n	8005bfe <vPortFree+0x62>
        __asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	60bb      	str	r3, [r7, #8]
    }
 8005bfa:	bf00      	nop
 8005bfc:	e7fe      	b.n	8005bfc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	4b14      	ldr	r3, [pc, #80]	; (8005c54 <vPortFree+0xb8>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4013      	ands	r3, r2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01e      	beq.n	8005c4a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d11a      	bne.n	8005c4a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	4b0e      	ldr	r3, [pc, #56]	; (8005c54 <vPortFree+0xb8>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	43db      	mvns	r3, r3
 8005c1e:	401a      	ands	r2, r3
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005c24:	f7fe fcc0 	bl	80045a8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <vPortFree+0xbc>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4413      	add	r3, r2
 8005c32:	4a09      	ldr	r2, [pc, #36]	; (8005c58 <vPortFree+0xbc>)
 8005c34:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c36:	6938      	ldr	r0, [r7, #16]
 8005c38:	f000 f874 	bl	8005d24 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005c3c:	4b07      	ldr	r3, [pc, #28]	; (8005c5c <vPortFree+0xc0>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3301      	adds	r3, #1
 8005c42:	4a06      	ldr	r2, [pc, #24]	; (8005c5c <vPortFree+0xc0>)
 8005c44:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005c46:	f7fe fcbd 	bl	80045c4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005c4a:	bf00      	nop
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	20012ea8 	.word	0x20012ea8
 8005c58:	20012e98 	.word	0x20012e98
 8005c5c:	20012ea4 	.word	0x20012ea4

08005c60 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c66:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005c6a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005c6c:	4b27      	ldr	r3, [pc, #156]	; (8005d0c <prvHeapInit+0xac>)
 8005c6e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00c      	beq.n	8005c94 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3307      	adds	r3, #7
 8005c7e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0307 	bic.w	r3, r3, #7
 8005c86:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	4a1f      	ldr	r2, [pc, #124]	; (8005d0c <prvHeapInit+0xac>)
 8005c90:	4413      	add	r3, r2
 8005c92:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c98:	4a1d      	ldr	r2, [pc, #116]	; (8005d10 <prvHeapInit+0xb0>)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005c9e:	4b1c      	ldr	r3, [pc, #112]	; (8005d10 <prvHeapInit+0xb0>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	4413      	add	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005cac:	2208      	movs	r2, #8
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	1a9b      	subs	r3, r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 0307 	bic.w	r3, r3, #7
 8005cba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4a15      	ldr	r2, [pc, #84]	; (8005d14 <prvHeapInit+0xb4>)
 8005cc0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005cc2:	4b14      	ldr	r3, [pc, #80]	; (8005d14 <prvHeapInit+0xb4>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005cca:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <prvHeapInit+0xb4>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	1ad2      	subs	r2, r2, r3
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ce0:	4b0c      	ldr	r3, [pc, #48]	; (8005d14 <prvHeapInit+0xb4>)
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	4a0a      	ldr	r2, [pc, #40]	; (8005d18 <prvHeapInit+0xb8>)
 8005cee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	4a09      	ldr	r2, [pc, #36]	; (8005d1c <prvHeapInit+0xbc>)
 8005cf6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cf8:	4b09      	ldr	r3, [pc, #36]	; (8005d20 <prvHeapInit+0xc0>)
 8005cfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cfe:	601a      	str	r2, [r3, #0]
}
 8005d00:	bf00      	nop
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	2000028c 	.word	0x2000028c
 8005d10:	20012e8c 	.word	0x20012e8c
 8005d14:	20012e94 	.word	0x20012e94
 8005d18:	20012e9c 	.word	0x20012e9c
 8005d1c:	20012e98 	.word	0x20012e98
 8005d20:	20012ea8 	.word	0x20012ea8

08005d24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d2c:	4b28      	ldr	r3, [pc, #160]	; (8005dd0 <prvInsertBlockIntoFreeList+0xac>)
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	e002      	b.n	8005d38 <prvInsertBlockIntoFreeList+0x14>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d8f7      	bhi.n	8005d32 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d108      	bne.n	8005d66 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	441a      	add	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	441a      	add	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d118      	bne.n	8005dac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	4b15      	ldr	r3, [pc, #84]	; (8005dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d00d      	beq.n	8005da2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	441a      	add	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	e008      	b.n	8005db4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005da2:	4b0c      	ldr	r3, [pc, #48]	; (8005dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	e003      	b.n	8005db4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d002      	beq.n	8005dc2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005dc2:	bf00      	nop
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	20012e8c 	.word	0x20012e8c
 8005dd4:	20012e94 	.word	0x20012e94

08005dd8 <__libc_init_array>:
 8005dd8:	b570      	push	{r4, r5, r6, lr}
 8005dda:	4d0d      	ldr	r5, [pc, #52]	; (8005e10 <__libc_init_array+0x38>)
 8005ddc:	4c0d      	ldr	r4, [pc, #52]	; (8005e14 <__libc_init_array+0x3c>)
 8005dde:	1b64      	subs	r4, r4, r5
 8005de0:	10a4      	asrs	r4, r4, #2
 8005de2:	2600      	movs	r6, #0
 8005de4:	42a6      	cmp	r6, r4
 8005de6:	d109      	bne.n	8005dfc <__libc_init_array+0x24>
 8005de8:	4d0b      	ldr	r5, [pc, #44]	; (8005e18 <__libc_init_array+0x40>)
 8005dea:	4c0c      	ldr	r4, [pc, #48]	; (8005e1c <__libc_init_array+0x44>)
 8005dec:	f000 f82e 	bl	8005e4c <_init>
 8005df0:	1b64      	subs	r4, r4, r5
 8005df2:	10a4      	asrs	r4, r4, #2
 8005df4:	2600      	movs	r6, #0
 8005df6:	42a6      	cmp	r6, r4
 8005df8:	d105      	bne.n	8005e06 <__libc_init_array+0x2e>
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
 8005dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e00:	4798      	blx	r3
 8005e02:	3601      	adds	r6, #1
 8005e04:	e7ee      	b.n	8005de4 <__libc_init_array+0xc>
 8005e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e0a:	4798      	blx	r3
 8005e0c:	3601      	adds	r6, #1
 8005e0e:	e7f2      	b.n	8005df6 <__libc_init_array+0x1e>
 8005e10:	08005f14 	.word	0x08005f14
 8005e14:	08005f14 	.word	0x08005f14
 8005e18:	08005f14 	.word	0x08005f14
 8005e1c:	08005f18 	.word	0x08005f18

08005e20 <memcpy>:
 8005e20:	440a      	add	r2, r1
 8005e22:	4291      	cmp	r1, r2
 8005e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e28:	d100      	bne.n	8005e2c <memcpy+0xc>
 8005e2a:	4770      	bx	lr
 8005e2c:	b510      	push	{r4, lr}
 8005e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e36:	4291      	cmp	r1, r2
 8005e38:	d1f9      	bne.n	8005e2e <memcpy+0xe>
 8005e3a:	bd10      	pop	{r4, pc}

08005e3c <memset>:
 8005e3c:	4402      	add	r2, r0
 8005e3e:	4603      	mov	r3, r0
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d100      	bne.n	8005e46 <memset+0xa>
 8005e44:	4770      	bx	lr
 8005e46:	f803 1b01 	strb.w	r1, [r3], #1
 8005e4a:	e7f9      	b.n	8005e40 <memset+0x4>

08005e4c <_init>:
 8005e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4e:	bf00      	nop
 8005e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e52:	bc08      	pop	{r3}
 8005e54:	469e      	mov	lr, r3
 8005e56:	4770      	bx	lr

08005e58 <_fini>:
 8005e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5a:	bf00      	nop
 8005e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5e:	bc08      	pop	{r3}
 8005e60:	469e      	mov	lr, r3
 8005e62:	4770      	bx	lr
