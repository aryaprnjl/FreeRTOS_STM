
basic_segger_integrate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007328  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  080074b8  080074b8  000174b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007670  08007670  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08007670  08007670  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007670  08007670  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007670  08007670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007674  08007674  00017674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144a0  20000078  080076f0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014518  080076f0  00024518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157d3  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f7f  00000000  00000000  0003587b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00038800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001320  00000000  00000000  00039ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d8d  00000000  00000000  0003afc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016dfb  00000000  00000000  00063d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb850  00000000  00000000  0007ab50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001763a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a18  00000000  00000000  001763f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080074a0 	.word	0x080074a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080074a0 	.word	0x080074a0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f30 	.word	0x20012f30
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fa57 	bl	80007c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f851 	bl	80003c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031e:	f000 f8a1 	bl	8000464 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1<<0);
 8000322:	4b20      	ldr	r3, [pc, #128]	; (80003a4 <main+0x94>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a1f      	ldr	r2, [pc, #124]	; (80003a4 <main+0x94>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 800032e:	f004 fb41 	bl	80049b4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000332:	f005 fe09 	bl	8005f48 <SEGGER_SYSVIEW_Start>
  status  = xTaskCreate(task1_handler, "Task1", 200, "Hello from RTOS T1", 2, &task1_handle);
 8000336:	f107 0308 	add.w	r3, r7, #8
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	2302      	movs	r3, #2
 800033e:	9300      	str	r3, [sp, #0]
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <main+0x98>)
 8000342:	22c8      	movs	r2, #200	; 0xc8
 8000344:	4919      	ldr	r1, [pc, #100]	; (80003ac <main+0x9c>)
 8000346:	481a      	ldr	r0, [pc, #104]	; (80003b0 <main+0xa0>)
 8000348:	f002 fc82 	bl	8002c50 <xTaskCreate>
 800034c:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	2b01      	cmp	r3, #1
 8000352:	d00a      	beq.n	800036a <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000358:	f383 8811 	msr	BASEPRI, r3
 800035c:	f3bf 8f6f 	isb	sy
 8000360:	f3bf 8f4f 	dsb	sy
 8000364:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000366:	bf00      	nop
 8000368:	e7fe      	b.n	8000368 <main+0x58>
  status = xTaskCreate(task2_handler, "Task2", 200, "Hello from RTOS T2", 2, &task2_handle);
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	9301      	str	r3, [sp, #4]
 800036e:	2302      	movs	r3, #2
 8000370:	9300      	str	r3, [sp, #0]
 8000372:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <main+0xa4>)
 8000374:	22c8      	movs	r2, #200	; 0xc8
 8000376:	4910      	ldr	r1, [pc, #64]	; (80003b8 <main+0xa8>)
 8000378:	4810      	ldr	r0, [pc, #64]	; (80003bc <main+0xac>)
 800037a:	f002 fc69 	bl	8002c50 <xTaskCreate>
 800037e:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	2b01      	cmp	r3, #1
 8000384:	d00a      	beq.n	800039c <main+0x8c>
        __asm volatile
 8000386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800038a:	f383 8811 	msr	BASEPRI, r3
 800038e:	f3bf 8f6f 	isb	sy
 8000392:	f3bf 8f4f 	dsb	sy
 8000396:	60fb      	str	r3, [r7, #12]
    }
 8000398:	bf00      	nop
 800039a:	e7fe      	b.n	800039a <main+0x8a>
  vTaskStartScheduler();
 800039c:	f002 fdbc 	bl	8002f18 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <main+0x90>
 80003a2:	bf00      	nop
 80003a4:	e0001000 	.word	0xe0001000
 80003a8:	080074b8 	.word	0x080074b8
 80003ac:	080074cc 	.word	0x080074cc
 80003b0:	08000555 	.word	0x08000555
 80003b4:	080074d4 	.word	0x080074d4
 80003b8:	080074e8 	.word	0x080074e8
 80003bc:	0800057d 	.word	0x0800057d

080003c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b096      	sub	sp, #88	; 0x58
 80003c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c6:	f107 0314 	add.w	r3, r7, #20
 80003ca:	2244      	movs	r2, #68	; 0x44
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f006 fbdc 	bl	8006b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d4:	463b      	mov	r3, r7
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003e6:	f000 fce1 	bl	8000dac <HAL_PWREx_ControlVoltageScaling>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003f0:	f000 f8ea 	bl	80005c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f4:	2302      	movs	r3, #2
 80003f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003fe:	2310      	movs	r3, #16
 8000400:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000402:	2302      	movs	r3, #2
 8000404:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000406:	2302      	movs	r3, #2
 8000408:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800040a:	2301      	movs	r3, #1
 800040c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800040e:	230a      	movs	r3, #10
 8000410:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000412:	2307      	movs	r3, #7
 8000414:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000416:	2302      	movs	r3, #2
 8000418:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800041a:	2302      	movs	r3, #2
 800041c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041e:	f107 0314 	add.w	r3, r7, #20
 8000422:	4618      	mov	r0, r3
 8000424:	f000 fd18 	bl	8000e58 <HAL_RCC_OscConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800042e:	f000 f8cb 	bl	80005c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000432:	230f      	movs	r3, #15
 8000434:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000436:	2303      	movs	r3, #3
 8000438:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000446:	463b      	mov	r3, r7
 8000448:	2104      	movs	r1, #4
 800044a:	4618      	mov	r0, r3
 800044c:	f001 f8e0 	bl	8001610 <HAL_RCC_ClockConfig>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000456:	f000 f8b7 	bl	80005c8 <Error_Handler>
  }
}
 800045a:	bf00      	nop
 800045c:	3758      	adds	r7, #88	; 0x58
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b08a      	sub	sp, #40	; 0x28
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 0314 	add.w	r3, r7, #20
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
 8000478:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047a:	4b34      	ldr	r3, [pc, #208]	; (800054c <MX_GPIO_Init+0xe8>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	4a33      	ldr	r2, [pc, #204]	; (800054c <MX_GPIO_Init+0xe8>)
 8000480:	f043 0304 	orr.w	r3, r3, #4
 8000484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000486:	4b31      	ldr	r3, [pc, #196]	; (800054c <MX_GPIO_Init+0xe8>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048a:	f003 0304 	and.w	r3, r3, #4
 800048e:	613b      	str	r3, [r7, #16]
 8000490:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000492:	4b2e      	ldr	r3, [pc, #184]	; (800054c <MX_GPIO_Init+0xe8>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000496:	4a2d      	ldr	r2, [pc, #180]	; (800054c <MX_GPIO_Init+0xe8>)
 8000498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800049c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800049e:	4b2b      	ldr	r3, [pc, #172]	; (800054c <MX_GPIO_Init+0xe8>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	4b28      	ldr	r3, [pc, #160]	; (800054c <MX_GPIO_Init+0xe8>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ae:	4a27      	ldr	r2, [pc, #156]	; (800054c <MX_GPIO_Init+0xe8>)
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b6:	4b25      	ldr	r3, [pc, #148]	; (800054c <MX_GPIO_Init+0xe8>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c2:	4b22      	ldr	r3, [pc, #136]	; (800054c <MX_GPIO_Init+0xe8>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c6:	4a21      	ldr	r2, [pc, #132]	; (800054c <MX_GPIO_Init+0xe8>)
 80004c8:	f043 0302 	orr.w	r3, r3, #2
 80004cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ce:	4b1f      	ldr	r3, [pc, #124]	; (800054c <MX_GPIO_Init+0xe8>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d2:	f003 0302 	and.w	r3, r3, #2
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	2120      	movs	r1, #32
 80004de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e2:	f000 fc3d 	bl	8000d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80004f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	4619      	mov	r1, r3
 80004fc:	4814      	ldr	r0, [pc, #80]	; (8000550 <MX_GPIO_Init+0xec>)
 80004fe:	f000 fa85 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000502:	230c      	movs	r3, #12
 8000504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000506:	2302      	movs	r3, #2
 8000508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800050e:	2303      	movs	r3, #3
 8000510:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000512:	2307      	movs	r3, #7
 8000514:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	4619      	mov	r1, r3
 800051c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000520:	f000 fa74 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000524:	2320      	movs	r3, #32
 8000526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	2301      	movs	r3, #1
 800052a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	2300      	movs	r3, #0
 8000532:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	4619      	mov	r1, r3
 800053a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053e:	f000 fa65 	bl	8000a0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000542:	bf00      	nop
 8000544:	3728      	adds	r7, #40	; 0x28
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000
 8000550:	48000800 	.word	0x48000800

08000554 <task1_handler>:

/* USER CODE BEGIN 4 */
void task1_handler(void *parameter)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b09c      	sub	sp, #112	; 0x70
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1){
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
		//printf("%s\n",(char*)parameter);
		snprintf(msg,100,"%s\n",(char*)parameter);
 800055c:	f107 000c 	add.w	r0, r7, #12
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4a05      	ldr	r2, [pc, #20]	; (8000578 <task1_handler+0x24>)
 8000564:	2164      	movs	r1, #100	; 0x64
 8000566:	f006 fb19 	bl	8006b9c <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 800056a:	f107 030c 	add.w	r3, r7, #12
 800056e:	4618      	mov	r0, r3
 8000570:	f006 fa5a 	bl	8006a28 <SEGGER_SYSVIEW_PrintfTarget>
		snprintf(msg,100,"%s\n",(char*)parameter);
 8000574:	e7f2      	b.n	800055c <task1_handler+0x8>
 8000576:	bf00      	nop
 8000578:	080074f0 	.word	0x080074f0

0800057c <task2_handler>:
		//HAL_Delay(500);
	}
}

void task2_handler(void *parameter)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b09c      	sub	sp, #112	; 0x70
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		//printf("%s\n",(char*)parameter);
		snprintf(msg,100,"%s\n",(char*)parameter);
 8000584:	f107 000c 	add.w	r0, r7, #12
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <task2_handler+0x24>)
 800058c:	2164      	movs	r1, #100	; 0x64
 800058e:	f006 fb05 	bl	8006b9c <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	4618      	mov	r0, r3
 8000598:	f006 fa46 	bl	8006a28 <SEGGER_SYSVIEW_PrintfTarget>
		snprintf(msg,100,"%s\n",(char*)parameter);
 800059c:	e7f2      	b.n	8000584 <task2_handler+0x8>
 800059e:	bf00      	nop
 80005a0:	080074f0 	.word	0x080074f0

080005a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d101      	bne.n	80005ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005b6:	f000 f927 	bl	8000808 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40001000 	.word	0x40001000

080005c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005cc:	b672      	cpsid	i
}
 80005ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <Error_Handler+0x8>
	...

080005d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <HAL_MspInit+0x44>)
 80005dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <HAL_MspInit+0x44>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6613      	str	r3, [r2, #96]	; 0x60
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <HAL_MspInit+0x44>)
 80005e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <HAL_MspInit+0x44>)
 80005f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <HAL_MspInit+0x44>)
 80005f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fc:	6593      	str	r3, [r2, #88]	; 0x58
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_MspInit+0x44>)
 8000600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800060a:	f003 fe25 	bl	8004258 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000

0800061c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08e      	sub	sp, #56	; 0x38
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000624:	2300      	movs	r3, #0
 8000626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800062a:	4b34      	ldr	r3, [pc, #208]	; (80006fc <HAL_InitTick+0xe0>)
 800062c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800062e:	4a33      	ldr	r2, [pc, #204]	; (80006fc <HAL_InitTick+0xe0>)
 8000630:	f043 0310 	orr.w	r3, r3, #16
 8000634:	6593      	str	r3, [r2, #88]	; 0x58
 8000636:	4b31      	ldr	r3, [pc, #196]	; (80006fc <HAL_InitTick+0xe0>)
 8000638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800063a:	f003 0310 	and.w	r3, r3, #16
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000642:	f107 0210 	add.w	r2, r7, #16
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4611      	mov	r1, r2
 800064c:	4618      	mov	r0, r3
 800064e:	f001 f98d 	bl	800196c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000652:	6a3b      	ldr	r3, [r7, #32]
 8000654:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000658:	2b00      	cmp	r3, #0
 800065a:	d103      	bne.n	8000664 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800065c:	f001 f970 	bl	8001940 <HAL_RCC_GetPCLK1Freq>
 8000660:	6378      	str	r0, [r7, #52]	; 0x34
 8000662:	e004      	b.n	800066e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000664:	f001 f96c 	bl	8001940 <HAL_RCC_GetPCLK1Freq>
 8000668:	4603      	mov	r3, r0
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800066e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000670:	4a23      	ldr	r2, [pc, #140]	; (8000700 <HAL_InitTick+0xe4>)
 8000672:	fba2 2303 	umull	r2, r3, r2, r3
 8000676:	0c9b      	lsrs	r3, r3, #18
 8000678:	3b01      	subs	r3, #1
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <HAL_InitTick+0xe8>)
 800067e:	4a22      	ldr	r2, [pc, #136]	; (8000708 <HAL_InitTick+0xec>)
 8000680:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000682:	4b20      	ldr	r3, [pc, #128]	; (8000704 <HAL_InitTick+0xe8>)
 8000684:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000688:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800068a:	4a1e      	ldr	r2, [pc, #120]	; (8000704 <HAL_InitTick+0xe8>)
 800068c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800068e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000690:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <HAL_InitTick+0xe8>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000696:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <HAL_InitTick+0xe8>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069c:	4b19      	ldr	r3, [pc, #100]	; (8000704 <HAL_InitTick+0xe8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80006a2:	4818      	ldr	r0, [pc, #96]	; (8000704 <HAL_InitTick+0xe8>)
 80006a4:	f001 f9f4 	bl	8001a90 <HAL_TIM_Base_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80006ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d11b      	bne.n	80006ee <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80006b6:	4813      	ldr	r0, [pc, #76]	; (8000704 <HAL_InitTick+0xe8>)
 80006b8:	f001 fa4c 	bl	8001b54 <HAL_TIM_Base_Start_IT>
 80006bc:	4603      	mov	r3, r0
 80006be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80006c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d111      	bne.n	80006ee <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006ca:	2036      	movs	r0, #54	; 0x36
 80006cc:	f000 f990 	bl	80009f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b0f      	cmp	r3, #15
 80006d4:	d808      	bhi.n	80006e8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80006d6:	2200      	movs	r2, #0
 80006d8:	6879      	ldr	r1, [r7, #4]
 80006da:	2036      	movs	r0, #54	; 0x36
 80006dc:	f000 f96c 	bl	80009b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006e0:	4a0a      	ldr	r2, [pc, #40]	; (800070c <HAL_InitTick+0xf0>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	e002      	b.n	80006ee <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80006e8:	2301      	movs	r3, #1
 80006ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3738      	adds	r7, #56	; 0x38
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000
 8000700:	431bde83 	.word	0x431bde83
 8000704:	20000094 	.word	0x20000094
 8000708:	40001000 	.word	0x40001000
 800070c:	20000004 	.word	0x20000004

08000710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <NMI_Handler+0x4>

08000716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <HardFault_Handler+0x4>

0800071c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <MemManage_Handler+0x4>

08000722 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <BusFault_Handler+0x4>

08000728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <UsageFault_Handler+0x4>

0800072e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000740:	4802      	ldr	r0, [pc, #8]	; (800074c <TIM6_DAC_IRQHandler+0x10>)
 8000742:	f001 fa77 	bl	8001c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000094 	.word	0x20000094

08000750 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <SystemInit+0x20>)
 8000756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075a:	4a05      	ldr	r2, [pc, #20]	; (8000770 <SystemInit+0x20>)
 800075c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000778:	f7ff ffea 	bl	8000750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800077e:	490d      	ldr	r1, [pc, #52]	; (80007b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000780:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <LoopForever+0xe>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000784:	e002      	b.n	800078c <LoopCopyDataInit>

08000786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078a:	3304      	adds	r3, #4

0800078c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800078c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000790:	d3f9      	bcc.n	8000786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000794:	4c0a      	ldr	r4, [pc, #40]	; (80007c0 <LoopForever+0x16>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000798:	e001      	b.n	800079e <LoopFillZerobss>

0800079a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800079c:	3204      	adds	r2, #4

0800079e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a0:	d3fb      	bcc.n	800079a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007a2:	f006 f9b1 	bl	8006b08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007a6:	f7ff fdb3 	bl	8000310 <main>

080007aa <LoopForever>:

LoopForever:
    b LoopForever
 80007aa:	e7fe      	b.n	80007aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80007b8:	08007678 	.word	0x08007678
  ldr r2, =_sbss
 80007bc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80007c0:	20014518 	.word	0x20014518

080007c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC1_2_IRQHandler>
	...

080007c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007ce:	2300      	movs	r3, #0
 80007d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <HAL_Init+0x3c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <HAL_Init+0x3c>)
 80007d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007de:	2003      	movs	r0, #3
 80007e0:	f000 f8df 	bl	80009a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007e4:	200f      	movs	r0, #15
 80007e6:	f7ff ff19 	bl	800061c <HAL_InitTick>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d002      	beq.n	80007f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80007f0:	2301      	movs	r3, #1
 80007f2:	71fb      	strb	r3, [r7, #7]
 80007f4:	e001      	b.n	80007fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007f6:	f7ff feed 	bl	80005d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007fa:	79fb      	ldrb	r3, [r7, #7]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40022000 	.word	0x40022000

08000808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_IncTick+0x20>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_IncTick+0x24>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_IncTick+0x24>)
 800081a:	6013      	str	r3, [r2, #0]
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	20000008 	.word	0x20000008
 800082c:	200000e0 	.word	0x200000e0

08000830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return uwTick;
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <HAL_GetTick+0x14>)
 8000836:	681b      	ldr	r3, [r3, #0]
}
 8000838:	4618      	mov	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	200000e0 	.word	0x200000e0

08000848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <__NVIC_SetPriorityGrouping+0x44>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085e:	68ba      	ldr	r2, [r7, #8]
 8000860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000864:	4013      	ands	r3, r2
 8000866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800087a:	4a04      	ldr	r2, [pc, #16]	; (800088c <__NVIC_SetPriorityGrouping+0x44>)
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	60d3      	str	r3, [r2, #12]
}
 8000880:	bf00      	nop
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	0a1b      	lsrs	r3, r3, #8
 800089a:	f003 0307 	and.w	r3, r3, #7
}
 800089e:	4618      	mov	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db0b      	blt.n	80008d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	f003 021f 	and.w	r2, r3, #31
 80008c4:	4907      	ldr	r1, [pc, #28]	; (80008e4 <__NVIC_EnableIRQ+0x38>)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	095b      	lsrs	r3, r3, #5
 80008cc:	2001      	movs	r0, #1
 80008ce:	fa00 f202 	lsl.w	r2, r0, r2
 80008d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000e100 	.word	0xe000e100

080008e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	6039      	str	r1, [r7, #0]
 80008f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	db0a      	blt.n	8000912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	490c      	ldr	r1, [pc, #48]	; (8000934 <__NVIC_SetPriority+0x4c>)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	0112      	lsls	r2, r2, #4
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	440b      	add	r3, r1
 800090c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000910:	e00a      	b.n	8000928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4908      	ldr	r1, [pc, #32]	; (8000938 <__NVIC_SetPriority+0x50>)
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	f003 030f 	and.w	r3, r3, #15
 800091e:	3b04      	subs	r3, #4
 8000920:	0112      	lsls	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	440b      	add	r3, r1
 8000926:	761a      	strb	r2, [r3, #24]
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000e100 	.word	0xe000e100
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800093c:	b480      	push	{r7}
 800093e:	b089      	sub	sp, #36	; 0x24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	f1c3 0307 	rsb	r3, r3, #7
 8000956:	2b04      	cmp	r3, #4
 8000958:	bf28      	it	cs
 800095a:	2304      	movcs	r3, #4
 800095c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3304      	adds	r3, #4
 8000962:	2b06      	cmp	r3, #6
 8000964:	d902      	bls.n	800096c <NVIC_EncodePriority+0x30>
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	3b03      	subs	r3, #3
 800096a:	e000      	b.n	800096e <NVIC_EncodePriority+0x32>
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	f04f 32ff 	mov.w	r2, #4294967295
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43da      	mvns	r2, r3
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	401a      	ands	r2, r3
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000984:	f04f 31ff 	mov.w	r1, #4294967295
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	fa01 f303 	lsl.w	r3, r1, r3
 800098e:	43d9      	mvns	r1, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000994:	4313      	orrs	r3, r2
         );
}
 8000996:	4618      	mov	r0, r3
 8000998:	3724      	adds	r7, #36	; 0x24
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ff4c 	bl	8000848 <__NVIC_SetPriorityGrouping>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
 80009c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009ca:	f7ff ff61 	bl	8000890 <__NVIC_GetPriorityGrouping>
 80009ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	68b9      	ldr	r1, [r7, #8]
 80009d4:	6978      	ldr	r0, [r7, #20]
 80009d6:	f7ff ffb1 	bl	800093c <NVIC_EncodePriority>
 80009da:	4602      	mov	r2, r0
 80009dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e0:	4611      	mov	r1, r2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ff80 	bl	80008e8 <__NVIC_SetPriority>
}
 80009e8:	bf00      	nop
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff54 	bl	80008ac <__NVIC_EnableIRQ>
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b087      	sub	sp, #28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a1a:	e17f      	b.n	8000d1c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	2101      	movs	r1, #1
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	fa01 f303 	lsl.w	r3, r1, r3
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f000 8171 	beq.w	8000d16 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 0303 	and.w	r3, r3, #3
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d005      	beq.n	8000a4c <HAL_GPIO_Init+0x40>
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f003 0303 	and.w	r3, r3, #3
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d130      	bne.n	8000aae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	2203      	movs	r2, #3
 8000a58:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4013      	ands	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	68da      	ldr	r2, [r3, #12]
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a82:	2201      	movs	r2, #1
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	091b      	lsrs	r3, r3, #4
 8000a98:	f003 0201 	and.w	r2, r3, #1
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f003 0303 	and.w	r3, r3, #3
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	d118      	bne.n	8000aec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4013      	ands	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	08db      	lsrs	r3, r3, #3
 8000ad6:	f003 0201 	and.w	r2, r3, #1
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 0303 	and.w	r3, r3, #3
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	d017      	beq.n	8000b28 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	2203      	movs	r2, #3
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	689a      	ldr	r2, [r3, #8]
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d123      	bne.n	8000b7c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	08da      	lsrs	r2, r3, #3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3208      	adds	r2, #8
 8000b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	f003 0307 	and.w	r3, r3, #7
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	220f      	movs	r2, #15
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	691a      	ldr	r2, [r3, #16]
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	08da      	lsrs	r2, r3, #3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	3208      	adds	r2, #8
 8000b76:	6939      	ldr	r1, [r7, #16]
 8000b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	2203      	movs	r2, #3
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 0203 	and.w	r2, r3, #3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f000 80ac 	beq.w	8000d16 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4b5f      	ldr	r3, [pc, #380]	; (8000d3c <HAL_GPIO_Init+0x330>)
 8000bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc2:	4a5e      	ldr	r2, [pc, #376]	; (8000d3c <HAL_GPIO_Init+0x330>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bca:	4b5c      	ldr	r3, [pc, #368]	; (8000d3c <HAL_GPIO_Init+0x330>)
 8000bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bd6:	4a5a      	ldr	r2, [pc, #360]	; (8000d40 <HAL_GPIO_Init+0x334>)
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	3302      	adds	r3, #2
 8000bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	f003 0303 	and.w	r3, r3, #3
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	220f      	movs	r2, #15
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c00:	d025      	beq.n	8000c4e <HAL_GPIO_Init+0x242>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a4f      	ldr	r2, [pc, #316]	; (8000d44 <HAL_GPIO_Init+0x338>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d01f      	beq.n	8000c4a <HAL_GPIO_Init+0x23e>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a4e      	ldr	r2, [pc, #312]	; (8000d48 <HAL_GPIO_Init+0x33c>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d019      	beq.n	8000c46 <HAL_GPIO_Init+0x23a>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a4d      	ldr	r2, [pc, #308]	; (8000d4c <HAL_GPIO_Init+0x340>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d013      	beq.n	8000c42 <HAL_GPIO_Init+0x236>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a4c      	ldr	r2, [pc, #304]	; (8000d50 <HAL_GPIO_Init+0x344>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d00d      	beq.n	8000c3e <HAL_GPIO_Init+0x232>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a4b      	ldr	r2, [pc, #300]	; (8000d54 <HAL_GPIO_Init+0x348>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d007      	beq.n	8000c3a <HAL_GPIO_Init+0x22e>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a4a      	ldr	r2, [pc, #296]	; (8000d58 <HAL_GPIO_Init+0x34c>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d101      	bne.n	8000c36 <HAL_GPIO_Init+0x22a>
 8000c32:	2306      	movs	r3, #6
 8000c34:	e00c      	b.n	8000c50 <HAL_GPIO_Init+0x244>
 8000c36:	2307      	movs	r3, #7
 8000c38:	e00a      	b.n	8000c50 <HAL_GPIO_Init+0x244>
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	e008      	b.n	8000c50 <HAL_GPIO_Init+0x244>
 8000c3e:	2304      	movs	r3, #4
 8000c40:	e006      	b.n	8000c50 <HAL_GPIO_Init+0x244>
 8000c42:	2303      	movs	r3, #3
 8000c44:	e004      	b.n	8000c50 <HAL_GPIO_Init+0x244>
 8000c46:	2302      	movs	r3, #2
 8000c48:	e002      	b.n	8000c50 <HAL_GPIO_Init+0x244>
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e000      	b.n	8000c50 <HAL_GPIO_Init+0x244>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	f002 0203 	and.w	r2, r2, #3
 8000c56:	0092      	lsls	r2, r2, #2
 8000c58:	4093      	lsls	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c60:	4937      	ldr	r1, [pc, #220]	; (8000d40 <HAL_GPIO_Init+0x334>)
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	089b      	lsrs	r3, r3, #2
 8000c66:	3302      	adds	r3, #2
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c6e:	4b3b      	ldr	r3, [pc, #236]	; (8000d5c <HAL_GPIO_Init+0x350>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c92:	4a32      	ldr	r2, [pc, #200]	; (8000d5c <HAL_GPIO_Init+0x350>)
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c98:	4b30      	ldr	r3, [pc, #192]	; (8000d5c <HAL_GPIO_Init+0x350>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d003      	beq.n	8000cbc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cbc:	4a27      	ldr	r2, [pc, #156]	; (8000d5c <HAL_GPIO_Init+0x350>)
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000cc2:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <HAL_GPIO_Init+0x350>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ce6:	4a1d      	ldr	r2, [pc, #116]	; (8000d5c <HAL_GPIO_Init+0x350>)
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <HAL_GPIO_Init+0x350>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d003      	beq.n	8000d10 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d10:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <HAL_GPIO_Init+0x350>)
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	fa22 f303 	lsr.w	r3, r2, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f47f ae78 	bne.w	8000a1c <HAL_GPIO_Init+0x10>
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	371c      	adds	r7, #28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010000 	.word	0x40010000
 8000d44:	48000400 	.word	0x48000400
 8000d48:	48000800 	.word	0x48000800
 8000d4c:	48000c00 	.word	0x48000c00
 8000d50:	48001000 	.word	0x48001000
 8000d54:	48001400 	.word	0x48001400
 8000d58:	48001800 	.word	0x48001800
 8000d5c:	40010400 	.word	0x40010400

08000d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	807b      	strh	r3, [r7, #2]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d70:	787b      	ldrb	r3, [r7, #1]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d76:	887a      	ldrh	r2, [r7, #2]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d7c:	e002      	b.n	8000d84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d7e:	887a      	ldrh	r2, [r7, #2]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40007000 	.word	0x40007000

08000dac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dba:	d130      	bne.n	8000e1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dc8:	d038      	beq.n	8000e3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dca:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dd2:	4a1e      	ldr	r2, [pc, #120]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000dda:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2232      	movs	r2, #50	; 0x32
 8000de0:	fb02 f303 	mul.w	r3, r2, r3
 8000de4:	4a1b      	ldr	r2, [pc, #108]	; (8000e54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000de6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dea:	0c9b      	lsrs	r3, r3, #18
 8000dec:	3301      	adds	r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df0:	e002      	b.n	8000df8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e04:	d102      	bne.n	8000e0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1f2      	bne.n	8000df2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e18:	d110      	bne.n	8000e3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e00f      	b.n	8000e3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e2a:	d007      	beq.n	8000e3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e34:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40007000 	.word	0x40007000
 8000e50:	20000000 	.word	0x20000000
 8000e54:	431bde83 	.word	0x431bde83

08000e58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e3ca      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e6a:	4b97      	ldr	r3, [pc, #604]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f003 030c 	and.w	r3, r3, #12
 8000e72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e74:	4b94      	ldr	r3, [pc, #592]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0310 	and.w	r3, r3, #16
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 80e4 	beq.w	8001054 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d007      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x4a>
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	2b0c      	cmp	r3, #12
 8000e96:	f040 808b 	bne.w	8000fb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	f040 8087 	bne.w	8000fb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ea2:	4b89      	ldr	r3, [pc, #548]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d005      	beq.n	8000eba <HAL_RCC_OscConfig+0x62>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e3a2      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a1a      	ldr	r2, [r3, #32]
 8000ebe:	4b82      	ldr	r3, [pc, #520]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0308 	and.w	r3, r3, #8
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d004      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x7c>
 8000eca:	4b7f      	ldr	r3, [pc, #508]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ed2:	e005      	b.n	8000ee0 <HAL_RCC_OscConfig+0x88>
 8000ed4:	4b7c      	ldr	r3, [pc, #496]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d223      	bcs.n	8000f2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fd71 	bl	80019d0 <RCC_SetFlashLatencyFromMSIRange>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e383      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ef8:	4b73      	ldr	r3, [pc, #460]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a72      	ldr	r2, [pc, #456]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000efe:	f043 0308 	orr.w	r3, r3, #8
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b70      	ldr	r3, [pc, #448]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	496d      	ldr	r1, [pc, #436]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f16:	4b6c      	ldr	r3, [pc, #432]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	021b      	lsls	r3, r3, #8
 8000f24:	4968      	ldr	r1, [pc, #416]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f26:	4313      	orrs	r3, r2
 8000f28:	604b      	str	r3, [r1, #4]
 8000f2a:	e025      	b.n	8000f78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f2c:	4b66      	ldr	r3, [pc, #408]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a65      	ldr	r2, [pc, #404]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f32:	f043 0308 	orr.w	r3, r3, #8
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b63      	ldr	r3, [pc, #396]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	4960      	ldr	r1, [pc, #384]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f46:	4313      	orrs	r3, r2
 8000f48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f4a:	4b5f      	ldr	r3, [pc, #380]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	495b      	ldr	r1, [pc, #364]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d109      	bne.n	8000f78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 fd31 	bl	80019d0 <RCC_SetFlashLatencyFromMSIRange>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e343      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f78:	f000 fc4a 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	4b52      	ldr	r3, [pc, #328]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	091b      	lsrs	r3, r3, #4
 8000f84:	f003 030f 	and.w	r3, r3, #15
 8000f88:	4950      	ldr	r1, [pc, #320]	; (80010cc <HAL_RCC_OscConfig+0x274>)
 8000f8a:	5ccb      	ldrb	r3, [r1, r3]
 8000f8c:	f003 031f 	and.w	r3, r3, #31
 8000f90:	fa22 f303 	lsr.w	r3, r2, r3
 8000f94:	4a4e      	ldr	r2, [pc, #312]	; (80010d0 <HAL_RCC_OscConfig+0x278>)
 8000f96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f98:	4b4e      	ldr	r3, [pc, #312]	; (80010d4 <HAL_RCC_OscConfig+0x27c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fb3d 	bl	800061c <HAL_InitTick>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d052      	beq.n	8001052 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	e327      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d032      	beq.n	800101e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fb8:	4b43      	ldr	r3, [pc, #268]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a42      	ldr	r2, [pc, #264]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fc34 	bl	8000830 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fc30 	bl	8000830 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e310      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fde:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f0      	beq.n	8000fcc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fea:	4b37      	ldr	r3, [pc, #220]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a36      	ldr	r2, [pc, #216]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	4b34      	ldr	r3, [pc, #208]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a1b      	ldr	r3, [r3, #32]
 8001002:	4931      	ldr	r1, [pc, #196]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001004:	4313      	orrs	r3, r2
 8001006:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001008:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	492c      	ldr	r1, [pc, #176]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]
 800101c:	e01a      	b.n	8001054 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800101e:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a29      	ldr	r2, [pc, #164]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001024:	f023 0301 	bic.w	r3, r3, #1
 8001028:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800102a:	f7ff fc01 	bl	8000830 <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001032:	f7ff fbfd 	bl	8000830 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e2dd      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001044:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1f0      	bne.n	8001032 <HAL_RCC_OscConfig+0x1da>
 8001050:	e000      	b.n	8001054 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001052:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d074      	beq.n	800114a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	2b08      	cmp	r3, #8
 8001064:	d005      	beq.n	8001072 <HAL_RCC_OscConfig+0x21a>
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	2b0c      	cmp	r3, #12
 800106a:	d10e      	bne.n	800108a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	2b03      	cmp	r3, #3
 8001070:	d10b      	bne.n	800108a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d064      	beq.n	8001148 <HAL_RCC_OscConfig+0x2f0>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d160      	bne.n	8001148 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e2ba      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001092:	d106      	bne.n	80010a2 <HAL_RCC_OscConfig+0x24a>
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 800109a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	e026      	b.n	80010f0 <HAL_RCC_OscConfig+0x298>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010aa:	d115      	bne.n	80010d8 <HAL_RCC_OscConfig+0x280>
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 80010b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a02      	ldr	r2, [pc, #8]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 80010be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	e014      	b.n	80010f0 <HAL_RCC_OscConfig+0x298>
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	080075d0 	.word	0x080075d0
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000004 	.word	0x20000004
 80010d8:	4ba0      	ldr	r3, [pc, #640]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a9f      	ldr	r2, [pc, #636]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80010de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b9d      	ldr	r3, [pc, #628]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a9c      	ldr	r2, [pc, #624]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80010ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d013      	beq.n	8001120 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f8:	f7ff fb9a 	bl	8000830 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001100:	f7ff fb96 	bl	8000830 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b64      	cmp	r3, #100	; 0x64
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e276      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001112:	4b92      	ldr	r3, [pc, #584]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f0      	beq.n	8001100 <HAL_RCC_OscConfig+0x2a8>
 800111e:	e014      	b.n	800114a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001120:	f7ff fb86 	bl	8000830 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001128:	f7ff fb82 	bl	8000830 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b64      	cmp	r3, #100	; 0x64
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e262      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800113a:	4b88      	ldr	r3, [pc, #544]	; (800135c <HAL_RCC_OscConfig+0x504>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f0      	bne.n	8001128 <HAL_RCC_OscConfig+0x2d0>
 8001146:	e000      	b.n	800114a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d060      	beq.n	8001218 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	2b04      	cmp	r3, #4
 800115a:	d005      	beq.n	8001168 <HAL_RCC_OscConfig+0x310>
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	2b0c      	cmp	r3, #12
 8001160:	d119      	bne.n	8001196 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d116      	bne.n	8001196 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001168:	4b7c      	ldr	r3, [pc, #496]	; (800135c <HAL_RCC_OscConfig+0x504>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <HAL_RCC_OscConfig+0x328>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e23f      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001180:	4b76      	ldr	r3, [pc, #472]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	061b      	lsls	r3, r3, #24
 800118e:	4973      	ldr	r1, [pc, #460]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001194:	e040      	b.n	8001218 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d023      	beq.n	80011e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800119e:	4b6f      	ldr	r3, [pc, #444]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a6e      	ldr	r2, [pc, #440]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80011a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011aa:	f7ff fb41 	bl	8000830 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b2:	f7ff fb3d 	bl	8000830 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e21d      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011c4:	4b65      	ldr	r3, [pc, #404]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0f0      	beq.n	80011b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d0:	4b62      	ldr	r3, [pc, #392]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	061b      	lsls	r3, r3, #24
 80011de:	495f      	ldr	r1, [pc, #380]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	604b      	str	r3, [r1, #4]
 80011e4:	e018      	b.n	8001218 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e6:	4b5d      	ldr	r3, [pc, #372]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a5c      	ldr	r2, [pc, #368]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80011ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f2:	f7ff fb1d 	bl	8000830 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fa:	f7ff fb19 	bl	8000830 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e1f9      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800120c:	4b53      	ldr	r3, [pc, #332]	; (800135c <HAL_RCC_OscConfig+0x504>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f0      	bne.n	80011fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	2b00      	cmp	r3, #0
 8001222:	d03c      	beq.n	800129e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d01c      	beq.n	8001266 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800122c:	4b4b      	ldr	r3, [pc, #300]	; (800135c <HAL_RCC_OscConfig+0x504>)
 800122e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001232:	4a4a      	ldr	r2, [pc, #296]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123c:	f7ff faf8 	bl	8000830 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001244:	f7ff faf4 	bl	8000830 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e1d4      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001256:	4b41      	ldr	r3, [pc, #260]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0ef      	beq.n	8001244 <HAL_RCC_OscConfig+0x3ec>
 8001264:	e01b      	b.n	800129e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001266:	4b3d      	ldr	r3, [pc, #244]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800126c:	4a3b      	ldr	r2, [pc, #236]	; (800135c <HAL_RCC_OscConfig+0x504>)
 800126e:	f023 0301 	bic.w	r3, r3, #1
 8001272:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001276:	f7ff fadb 	bl	8000830 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800127e:	f7ff fad7 	bl	8000830 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e1b7      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001290:	4b32      	ldr	r3, [pc, #200]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1ef      	bne.n	800127e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 80a6 	beq.w	80013f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012b0:	4b2a      	ldr	r3, [pc, #168]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80012b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10d      	bne.n	80012d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80012be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c0:	4a26      	ldr	r2, [pc, #152]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80012c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c6:	6593      	str	r3, [r2, #88]	; 0x58
 80012c8:	4b24      	ldr	r3, [pc, #144]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80012ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012d4:	2301      	movs	r3, #1
 80012d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <HAL_RCC_OscConfig+0x508>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d118      	bne.n	8001316 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <HAL_RCC_OscConfig+0x508>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a1d      	ldr	r2, [pc, #116]	; (8001360 <HAL_RCC_OscConfig+0x508>)
 80012ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f0:	f7ff fa9e 	bl	8000830 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f8:	f7ff fa9a 	bl	8000830 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e17a      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_RCC_OscConfig+0x508>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d108      	bne.n	8001330 <HAL_RCC_OscConfig+0x4d8>
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001324:	4a0d      	ldr	r2, [pc, #52]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800132e:	e029      	b.n	8001384 <HAL_RCC_OscConfig+0x52c>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	2b05      	cmp	r3, #5
 8001336:	d115      	bne.n	8001364 <HAL_RCC_OscConfig+0x50c>
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_RCC_OscConfig+0x504>)
 800133a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800133e:	4a07      	ldr	r2, [pc, #28]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <HAL_RCC_OscConfig+0x504>)
 800134a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800134e:	4a03      	ldr	r2, [pc, #12]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001358:	e014      	b.n	8001384 <HAL_RCC_OscConfig+0x52c>
 800135a:	bf00      	nop
 800135c:	40021000 	.word	0x40021000
 8001360:	40007000 	.word	0x40007000
 8001364:	4b9c      	ldr	r3, [pc, #624]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800136a:	4a9b      	ldr	r2, [pc, #620]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001374:	4b98      	ldr	r3, [pc, #608]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800137a:	4a97      	ldr	r2, [pc, #604]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800137c:	f023 0304 	bic.w	r3, r3, #4
 8001380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d016      	beq.n	80013ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138c:	f7ff fa50 	bl	8000830 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001392:	e00a      	b.n	80013aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001394:	f7ff fa4c 	bl	8000830 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e12a      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013aa:	4b8b      	ldr	r3, [pc, #556]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80013ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0ed      	beq.n	8001394 <HAL_RCC_OscConfig+0x53c>
 80013b8:	e015      	b.n	80013e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ba:	f7ff fa39 	bl	8000830 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013c0:	e00a      	b.n	80013d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c2:	f7ff fa35 	bl	8000830 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e113      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013d8:	4b7f      	ldr	r3, [pc, #508]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80013da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1ed      	bne.n	80013c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013e6:	7ffb      	ldrb	r3, [r7, #31]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d105      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ec:	4b7a      	ldr	r3, [pc, #488]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80013ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f0:	4a79      	ldr	r2, [pc, #484]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80013f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80fe 	beq.w	80015fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	2b02      	cmp	r3, #2
 8001408:	f040 80d0 	bne.w	80015ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800140c:	4b72      	ldr	r3, [pc, #456]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f003 0203 	and.w	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141c:	429a      	cmp	r2, r3
 800141e:	d130      	bne.n	8001482 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	3b01      	subs	r3, #1
 800142c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800142e:	429a      	cmp	r2, r3
 8001430:	d127      	bne.n	8001482 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800143e:	429a      	cmp	r2, r3
 8001440:	d11f      	bne.n	8001482 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800144c:	2a07      	cmp	r2, #7
 800144e:	bf14      	ite	ne
 8001450:	2201      	movne	r2, #1
 8001452:	2200      	moveq	r2, #0
 8001454:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001456:	4293      	cmp	r3, r2
 8001458:	d113      	bne.n	8001482 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001464:	085b      	lsrs	r3, r3, #1
 8001466:	3b01      	subs	r3, #1
 8001468:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800146a:	429a      	cmp	r2, r3
 800146c:	d109      	bne.n	8001482 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	085b      	lsrs	r3, r3, #1
 800147a:	3b01      	subs	r3, #1
 800147c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800147e:	429a      	cmp	r2, r3
 8001480:	d06e      	beq.n	8001560 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	2b0c      	cmp	r3, #12
 8001486:	d069      	beq.n	800155c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001488:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d105      	bne.n	80014a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001494:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e0ad      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014a4:	4b4c      	ldr	r3, [pc, #304]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a4b      	ldr	r2, [pc, #300]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80014aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014b0:	f7ff f9be 	bl	8000830 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff f9ba 	bl	8000830 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e09a      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ca:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014d6:	4b40      	ldr	r3, [pc, #256]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	4b40      	ldr	r3, [pc, #256]	; (80015dc <HAL_RCC_OscConfig+0x784>)
 80014dc:	4013      	ands	r3, r2
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014e6:	3a01      	subs	r2, #1
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	4311      	orrs	r1, r2
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014f0:	0212      	lsls	r2, r2, #8
 80014f2:	4311      	orrs	r1, r2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014f8:	0852      	lsrs	r2, r2, #1
 80014fa:	3a01      	subs	r2, #1
 80014fc:	0552      	lsls	r2, r2, #21
 80014fe:	4311      	orrs	r1, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001504:	0852      	lsrs	r2, r2, #1
 8001506:	3a01      	subs	r2, #1
 8001508:	0652      	lsls	r2, r2, #25
 800150a:	4311      	orrs	r1, r2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001510:	0912      	lsrs	r2, r2, #4
 8001512:	0452      	lsls	r2, r2, #17
 8001514:	430a      	orrs	r2, r1
 8001516:	4930      	ldr	r1, [pc, #192]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001518:	4313      	orrs	r3, r2
 800151a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800151c:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a2d      	ldr	r2, [pc, #180]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001526:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001528:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	4a2a      	ldr	r2, [pc, #168]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800152e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001532:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001534:	f7ff f97c 	bl	8000830 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153c:	f7ff f978 	bl	8000830 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e058      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800155a:	e050      	b.n	80015fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e04f      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001560:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d148      	bne.n	80015fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001576:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	4a16      	ldr	r2, [pc, #88]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800157e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001582:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001584:	f7ff f954 	bl	8000830 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158c:	f7ff f950 	bl	8000830 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e030      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x734>
 80015aa:	e028      	b.n	80015fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2b0c      	cmp	r3, #12
 80015b0:	d023      	beq.n	80015fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80015b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015be:	f7ff f937 	bl	8000830 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c4:	e00c      	b.n	80015e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff f933 	bl	8000830 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d905      	bls.n	80015e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e013      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
 80015d8:	40021000 	.word	0x40021000
 80015dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_RCC_OscConfig+0x7b0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1ec      	bne.n	80015c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_RCC_OscConfig+0x7b0>)
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	4905      	ldr	r1, [pc, #20]	; (8001608 <HAL_RCC_OscConfig+0x7b0>)
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_RCC_OscConfig+0x7b4>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	60cb      	str	r3, [r1, #12]
 80015f8:	e001      	b.n	80015fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000
 800160c:	feeefffc 	.word	0xfeeefffc

08001610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0e7      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001624:	4b75      	ldr	r3, [pc, #468]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d910      	bls.n	8001654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b72      	ldr	r3, [pc, #456]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 0207 	bic.w	r2, r3, #7
 800163a:	4970      	ldr	r1, [pc, #448]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001642:	4b6e      	ldr	r3, [pc, #440]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0cf      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d010      	beq.n	8001682 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	4b66      	ldr	r3, [pc, #408]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800166c:	429a      	cmp	r2, r3
 800166e:	d908      	bls.n	8001682 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001670:	4b63      	ldr	r3, [pc, #396]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	4960      	ldr	r1, [pc, #384]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d04c      	beq.n	8001728 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b03      	cmp	r3, #3
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001696:	4b5a      	ldr	r3, [pc, #360]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d121      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e0a6      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d107      	bne.n	80016be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ae:	4b54      	ldr	r3, [pc, #336]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d115      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e09a      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016c6:	4b4e      	ldr	r3, [pc, #312]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d109      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e08e      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d6:	4b4a      	ldr	r3, [pc, #296]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e086      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016e6:	4b46      	ldr	r3, [pc, #280]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f023 0203 	bic.w	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4943      	ldr	r1, [pc, #268]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016f8:	f7ff f89a 	bl	8000830 <HAL_GetTick>
 80016fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fe:	e00a      	b.n	8001716 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001700:	f7ff f896 	bl	8000830 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	f241 3288 	movw	r2, #5000	; 0x1388
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e06e      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001716:	4b3a      	ldr	r3, [pc, #232]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 020c 	and.w	r2, r3, #12
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	429a      	cmp	r2, r3
 8001726:	d1eb      	bne.n	8001700 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d010      	beq.n	8001756 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	4b31      	ldr	r3, [pc, #196]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001740:	429a      	cmp	r2, r3
 8001742:	d208      	bcs.n	8001756 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001744:	4b2e      	ldr	r3, [pc, #184]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	492b      	ldr	r1, [pc, #172]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001756:	4b29      	ldr	r3, [pc, #164]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d210      	bcs.n	8001786 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001764:	4b25      	ldr	r3, [pc, #148]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 0207 	bic.w	r2, r3, #7
 800176c:	4923      	ldr	r1, [pc, #140]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001774:	4b21      	ldr	r3, [pc, #132]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d001      	beq.n	8001786 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e036      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	2b00      	cmp	r3, #0
 8001790:	d008      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	4918      	ldr	r1, [pc, #96]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d009      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4910      	ldr	r1, [pc, #64]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017c4:	f000 f824 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 80017c8:	4602      	mov	r2, r0
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	091b      	lsrs	r3, r3, #4
 80017d0:	f003 030f 	and.w	r3, r3, #15
 80017d4:	490b      	ldr	r1, [pc, #44]	; (8001804 <HAL_RCC_ClockConfig+0x1f4>)
 80017d6:	5ccb      	ldrb	r3, [r1, r3]
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
 80017e0:	4a09      	ldr	r2, [pc, #36]	; (8001808 <HAL_RCC_ClockConfig+0x1f8>)
 80017e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_RCC_ClockConfig+0x1fc>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe ff17 	bl	800061c <HAL_InitTick>
 80017ee:	4603      	mov	r3, r0
 80017f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80017f2:	7afb      	ldrb	r3, [r7, #11]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40022000 	.word	0x40022000
 8001800:	40021000 	.word	0x40021000
 8001804:	080075d0 	.word	0x080075d0
 8001808:	20000000 	.word	0x20000000
 800180c:	20000004 	.word	0x20000004

08001810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800181e:	4b3e      	ldr	r3, [pc, #248]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001828:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x34>
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	2b0c      	cmp	r3, #12
 800183c:	d121      	bne.n	8001882 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d11e      	bne.n	8001882 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001844:	4b34      	ldr	r3, [pc, #208]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d107      	bne.n	8001860 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001850:	4b31      	ldr	r3, [pc, #196]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 8001852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001856:	0a1b      	lsrs	r3, r3, #8
 8001858:	f003 030f 	and.w	r3, r3, #15
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	e005      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001860:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800186c:	4a2b      	ldr	r2, [pc, #172]	; (800191c <HAL_RCC_GetSysClockFreq+0x10c>)
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001874:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10d      	bne.n	8001898 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001880:	e00a      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	2b04      	cmp	r3, #4
 8001886:	d102      	bne.n	800188e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_RCC_GetSysClockFreq+0x110>)
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	e004      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	2b08      	cmp	r3, #8
 8001892:	d101      	bne.n	8001898 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001894:	4b23      	ldr	r3, [pc, #140]	; (8001924 <HAL_RCC_GetSysClockFreq+0x114>)
 8001896:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	2b0c      	cmp	r3, #12
 800189c:	d134      	bne.n	8001908 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800189e:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d003      	beq.n	80018b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d003      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0xac>
 80018b4:	e005      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <HAL_RCC_GetSysClockFreq+0x110>)
 80018b8:	617b      	str	r3, [r7, #20]
      break;
 80018ba:	e005      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_GetSysClockFreq+0x114>)
 80018be:	617b      	str	r3, [r7, #20]
      break;
 80018c0:	e002      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	617b      	str	r3, [r7, #20]
      break;
 80018c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	3301      	adds	r3, #1
 80018d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	0a1b      	lsrs	r3, r3, #8
 80018dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	fb03 f202 	mul.w	r2, r3, r2
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	0e5b      	lsrs	r3, r3, #25
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	3301      	adds	r3, #1
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001908:	69bb      	ldr	r3, [r7, #24]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	; 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	080075e8 	.word	0x080075e8
 8001920:	00f42400 	.word	0x00f42400
 8001924:	007a1200 	.word	0x007a1200

08001928 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <HAL_RCC_GetHCLKFreq+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000000 	.word	0x20000000

08001940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001944:	f7ff fff0 	bl	8001928 <HAL_RCC_GetHCLKFreq>
 8001948:	4602      	mov	r2, r0
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	0a1b      	lsrs	r3, r3, #8
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	4904      	ldr	r1, [pc, #16]	; (8001968 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001956:	5ccb      	ldrb	r3, [r1, r3]
 8001958:	f003 031f 	and.w	r3, r3, #31
 800195c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001960:	4618      	mov	r0, r3
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40021000 	.word	0x40021000
 8001968:	080075e0 	.word	0x080075e0

0800196c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	220f      	movs	r2, #15
 800197a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 0203 	and.w	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	08db      	lsrs	r3, r3, #3
 80019a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <HAL_RCC_GetClockConfig+0x60>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0207 	and.w	r2, r3, #7
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	601a      	str	r2, [r3, #0]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40022000 	.word	0x40022000

080019d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019dc:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019e8:	f7ff f9d2 	bl	8000d90 <HAL_PWREx_GetVoltageRange>
 80019ec:	6178      	str	r0, [r7, #20]
 80019ee:	e014      	b.n	8001a1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019f0:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f4:	4a24      	ldr	r2, [pc, #144]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fa:	6593      	str	r3, [r2, #88]	; 0x58
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a08:	f7ff f9c2 	bl	8000d90 <HAL_PWREx_GetVoltageRange>
 8001a0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	4a1d      	ldr	r2, [pc, #116]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a20:	d10b      	bne.n	8001a3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b80      	cmp	r3, #128	; 0x80
 8001a26:	d919      	bls.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2ba0      	cmp	r3, #160	; 0xa0
 8001a2c:	d902      	bls.n	8001a34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a2e:	2302      	movs	r3, #2
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	e013      	b.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a34:	2301      	movs	r3, #1
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	e010      	b.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b80      	cmp	r3, #128	; 0x80
 8001a3e:	d902      	bls.n	8001a46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a40:	2303      	movs	r3, #3
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	e00a      	b.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b80      	cmp	r3, #128	; 0x80
 8001a4a:	d102      	bne.n	8001a52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	e004      	b.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b70      	cmp	r3, #112	; 0x70
 8001a56:	d101      	bne.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a58:	2301      	movs	r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 0207 	bic.w	r2, r3, #7
 8001a64:	4909      	ldr	r1, [pc, #36]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d001      	beq.n	8001a7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40022000 	.word	0x40022000

08001a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e049      	b.n	8001b36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d106      	bne.n	8001abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f841 	bl	8001b3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3304      	adds	r3, #4
 8001acc:	4619      	mov	r1, r3
 8001ace:	4610      	mov	r0, r2
 8001ad0:	f000 f9f8 	bl	8001ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d001      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e04f      	b.n	8001c0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a23      	ldr	r2, [pc, #140]	; (8001c18 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d01d      	beq.n	8001bca <HAL_TIM_Base_Start_IT+0x76>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b96:	d018      	beq.n	8001bca <HAL_TIM_Base_Start_IT+0x76>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1f      	ldr	r2, [pc, #124]	; (8001c1c <HAL_TIM_Base_Start_IT+0xc8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d013      	beq.n	8001bca <HAL_TIM_Base_Start_IT+0x76>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a1e      	ldr	r2, [pc, #120]	; (8001c20 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d00e      	beq.n	8001bca <HAL_TIM_Base_Start_IT+0x76>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1c      	ldr	r2, [pc, #112]	; (8001c24 <HAL_TIM_Base_Start_IT+0xd0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d009      	beq.n	8001bca <HAL_TIM_Base_Start_IT+0x76>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a1b      	ldr	r2, [pc, #108]	; (8001c28 <HAL_TIM_Base_Start_IT+0xd4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d004      	beq.n	8001bca <HAL_TIM_Base_Start_IT+0x76>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a19      	ldr	r2, [pc, #100]	; (8001c2c <HAL_TIM_Base_Start_IT+0xd8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d115      	bne.n	8001bf6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <HAL_TIM_Base_Start_IT+0xdc>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b06      	cmp	r3, #6
 8001bda:	d015      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0xb4>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be2:	d011      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf4:	e008      	b.n	8001c08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f042 0201 	orr.w	r2, r2, #1
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	e000      	b.n	8001c0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40012c00 	.word	0x40012c00
 8001c1c:	40000400 	.word	0x40000400
 8001c20:	40000800 	.word	0x40000800
 8001c24:	40000c00 	.word	0x40000c00
 8001c28:	40013400 	.word	0x40013400
 8001c2c:	40014000 	.word	0x40014000
 8001c30:	00010007 	.word	0x00010007

08001c34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d122      	bne.n	8001c90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d11b      	bne.n	8001c90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f06f 0202 	mvn.w	r2, #2
 8001c60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f905 	bl	8001e86 <HAL_TIM_IC_CaptureCallback>
 8001c7c:	e005      	b.n	8001c8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8f7 	bl	8001e72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f908 	bl	8001e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d122      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d11b      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0204 	mvn.w	r2, #4
 8001cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f8db 	bl	8001e86 <HAL_TIM_IC_CaptureCallback>
 8001cd0:	e005      	b.n	8001cde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f8cd 	bl	8001e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f8de 	bl	8001e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d122      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d11b      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0208 	mvn.w	r2, #8
 8001d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2204      	movs	r2, #4
 8001d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f8b1 	bl	8001e86 <HAL_TIM_IC_CaptureCallback>
 8001d24:	e005      	b.n	8001d32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f8a3 	bl	8001e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f8b4 	bl	8001e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	2b10      	cmp	r3, #16
 8001d44:	d122      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	2b10      	cmp	r3, #16
 8001d52:	d11b      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0210 	mvn.w	r2, #16
 8001d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2208      	movs	r2, #8
 8001d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f887 	bl	8001e86 <HAL_TIM_IC_CaptureCallback>
 8001d78:	e005      	b.n	8001d86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f879 	bl	8001e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f88a 	bl	8001e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d10e      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d107      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0201 	mvn.w	r2, #1
 8001db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7fe fbf6 	bl	80005a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc2:	2b80      	cmp	r3, #128	; 0x80
 8001dc4:	d10e      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd0:	2b80      	cmp	r3, #128	; 0x80
 8001dd2:	d107      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f914 	bl	800200c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001df2:	d10e      	bne.n	8001e12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	2b80      	cmp	r3, #128	; 0x80
 8001e00:	d107      	bne.n	8001e12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f907 	bl	8002020 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1c:	2b40      	cmp	r3, #64	; 0x40
 8001e1e:	d10e      	bne.n	8001e3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2a:	2b40      	cmp	r3, #64	; 0x40
 8001e2c:	d107      	bne.n	8001e3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f838 	bl	8001eae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	f003 0320 	and.w	r3, r3, #32
 8001e48:	2b20      	cmp	r3, #32
 8001e4a:	d10e      	bne.n	8001e6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	2b20      	cmp	r3, #32
 8001e58:	d107      	bne.n	8001e6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f06f 0220 	mvn.w	r2, #32
 8001e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f8c7 	bl	8001ff8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a40      	ldr	r2, [pc, #256]	; (8001fd8 <TIM_Base_SetConfig+0x114>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d013      	beq.n	8001f04 <TIM_Base_SetConfig+0x40>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee2:	d00f      	beq.n	8001f04 <TIM_Base_SetConfig+0x40>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3d      	ldr	r2, [pc, #244]	; (8001fdc <TIM_Base_SetConfig+0x118>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d00b      	beq.n	8001f04 <TIM_Base_SetConfig+0x40>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a3c      	ldr	r2, [pc, #240]	; (8001fe0 <TIM_Base_SetConfig+0x11c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d007      	beq.n	8001f04 <TIM_Base_SetConfig+0x40>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a3b      	ldr	r2, [pc, #236]	; (8001fe4 <TIM_Base_SetConfig+0x120>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d003      	beq.n	8001f04 <TIM_Base_SetConfig+0x40>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a3a      	ldr	r2, [pc, #232]	; (8001fe8 <TIM_Base_SetConfig+0x124>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d108      	bne.n	8001f16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a2f      	ldr	r2, [pc, #188]	; (8001fd8 <TIM_Base_SetConfig+0x114>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d01f      	beq.n	8001f5e <TIM_Base_SetConfig+0x9a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f24:	d01b      	beq.n	8001f5e <TIM_Base_SetConfig+0x9a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a2c      	ldr	r2, [pc, #176]	; (8001fdc <TIM_Base_SetConfig+0x118>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d017      	beq.n	8001f5e <TIM_Base_SetConfig+0x9a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a2b      	ldr	r2, [pc, #172]	; (8001fe0 <TIM_Base_SetConfig+0x11c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d013      	beq.n	8001f5e <TIM_Base_SetConfig+0x9a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a2a      	ldr	r2, [pc, #168]	; (8001fe4 <TIM_Base_SetConfig+0x120>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00f      	beq.n	8001f5e <TIM_Base_SetConfig+0x9a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a29      	ldr	r2, [pc, #164]	; (8001fe8 <TIM_Base_SetConfig+0x124>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00b      	beq.n	8001f5e <TIM_Base_SetConfig+0x9a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a28      	ldr	r2, [pc, #160]	; (8001fec <TIM_Base_SetConfig+0x128>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d007      	beq.n	8001f5e <TIM_Base_SetConfig+0x9a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a27      	ldr	r2, [pc, #156]	; (8001ff0 <TIM_Base_SetConfig+0x12c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d003      	beq.n	8001f5e <TIM_Base_SetConfig+0x9a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a26      	ldr	r2, [pc, #152]	; (8001ff4 <TIM_Base_SetConfig+0x130>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d108      	bne.n	8001f70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a10      	ldr	r2, [pc, #64]	; (8001fd8 <TIM_Base_SetConfig+0x114>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d00f      	beq.n	8001fbc <TIM_Base_SetConfig+0xf8>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <TIM_Base_SetConfig+0x124>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00b      	beq.n	8001fbc <TIM_Base_SetConfig+0xf8>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a11      	ldr	r2, [pc, #68]	; (8001fec <TIM_Base_SetConfig+0x128>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d007      	beq.n	8001fbc <TIM_Base_SetConfig+0xf8>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a10      	ldr	r2, [pc, #64]	; (8001ff0 <TIM_Base_SetConfig+0x12c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d003      	beq.n	8001fbc <TIM_Base_SetConfig+0xf8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a0f      	ldr	r2, [pc, #60]	; (8001ff4 <TIM_Base_SetConfig+0x130>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d103      	bne.n	8001fc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	615a      	str	r2, [r3, #20]
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40012c00 	.word	0x40012c00
 8001fdc:	40000400 	.word	0x40000400
 8001fe0:	40000800 	.word	0x40000800
 8001fe4:	40000c00 	.word	0x40000c00
 8001fe8:	40013400 	.word	0x40013400
 8001fec:	40014000 	.word	0x40014000
 8001ff0:	40014400 	.word	0x40014400
 8001ff4:	40014800 	.word	0x40014800

08001ff8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f103 0208 	add.w	r2, r3, #8
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f103 0208 	add.w	r2, r3, #8
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f103 0208 	add.w	r2, r3, #8
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800208e:	b480      	push	{r7}
 8002090:	b085      	sub	sp, #20
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	601a      	str	r2, [r3, #0]
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80020d6:	b480      	push	{r7}
 80020d8:	b085      	sub	sp, #20
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d103      	bne.n	80020f6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	e00c      	b.n	8002110 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3308      	adds	r3, #8
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	e002      	b.n	8002104 <vListInsert+0x2e>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	429a      	cmp	r2, r3
 800210e:	d2f6      	bcs.n	80020fe <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	601a      	str	r2, [r3, #0]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6892      	ldr	r2, [r2, #8]
 800215e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6852      	ldr	r2, [r2, #4]
 8002168:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	429a      	cmp	r2, r3
 8002172:	d103      	bne.n	800217c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	1e5a      	subs	r2, r3, #1
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10a      	bne.n	80021c6 <xQueueGenericReset+0x2a>
        __asm volatile
 80021b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b4:	f383 8811 	msr	BASEPRI, r3
 80021b8:	f3bf 8f6f 	isb	sy
 80021bc:	f3bf 8f4f 	dsb	sy
 80021c0:	60bb      	str	r3, [r7, #8]
    }
 80021c2:	bf00      	nop
 80021c4:	e7fe      	b.n	80021c4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80021c6:	f002 f8c5 	bl	8004354 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d2:	68f9      	ldr	r1, [r7, #12]
 80021d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	441a      	add	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	3b01      	subs	r3, #1
 80021f8:	68f9      	ldr	r1, [r7, #12]
 80021fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	441a      	add	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	22ff      	movs	r2, #255	; 0xff
 800220a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	22ff      	movs	r2, #255	; 0xff
 8002212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d114      	bne.n	8002246 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d01a      	beq.n	800225a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3310      	adds	r3, #16
 8002228:	4618      	mov	r0, r3
 800222a:	f001 f91f 	bl	800346c <xTaskRemoveFromEventList>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d012      	beq.n	800225a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <xQueueGenericReset+0xcc>)
 8002236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	f3bf 8f4f 	dsb	sy
 8002240:	f3bf 8f6f 	isb	sy
 8002244:	e009      	b.n	800225a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3310      	adds	r3, #16
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fef2 	bl	8002034 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	3324      	adds	r3, #36	; 0x24
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff feed 	bl	8002034 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800225a:	f002 f8ab 	bl	80043b4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800225e:	2301      	movs	r3, #1
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	e000ed04 	.word	0xe000ed04

0800226c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	; 0x30
 8002270:	af02      	add	r7, sp, #8
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	4613      	mov	r3, r2
 8002278:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10a      	bne.n	8002296 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002284:	f383 8811 	msr	BASEPRI, r3
 8002288:	f3bf 8f6f 	isb	sy
 800228c:	f3bf 8f4f 	dsb	sy
 8002290:	61bb      	str	r3, [r7, #24]
    }
 8002292:	bf00      	nop
 8002294:	e7fe      	b.n	8002294 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	fb02 f303 	mul.w	r3, r2, r3
 800229e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d006      	beq.n	80022b4 <xQueueGenericCreate+0x48>
 80022a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d101      	bne.n	80022b8 <xQueueGenericCreate+0x4c>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <xQueueGenericCreate+0x4e>
 80022b8:	2300      	movs	r3, #0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10a      	bne.n	80022d4 <xQueueGenericCreate+0x68>
        __asm volatile
 80022be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c2:	f383 8811 	msr	BASEPRI, r3
 80022c6:	f3bf 8f6f 	isb	sy
 80022ca:	f3bf 8f4f 	dsb	sy
 80022ce:	617b      	str	r3, [r7, #20]
    }
 80022d0:	bf00      	nop
 80022d2:	e7fe      	b.n	80022d2 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80022da:	d90a      	bls.n	80022f2 <xQueueGenericCreate+0x86>
        __asm volatile
 80022dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e0:	f383 8811 	msr	BASEPRI, r3
 80022e4:	f3bf 8f6f 	isb	sy
 80022e8:	f3bf 8f4f 	dsb	sy
 80022ec:	613b      	str	r3, [r7, #16]
    }
 80022ee:	bf00      	nop
 80022f0:	e7fe      	b.n	80022f0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	3350      	adds	r3, #80	; 0x50
 80022f6:	4618      	mov	r0, r3
 80022f8:	f002 f950 	bl	800459c <pvPortMalloc>
 80022fc:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00d      	beq.n	8002320 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	3350      	adds	r3, #80	; 0x50
 800230c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800230e:	79fa      	ldrb	r2, [r7, #7]
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	4613      	mov	r3, r2
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f805 	bl	800232a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002320:	6a3b      	ldr	r3, [r7, #32]
    }
 8002322:	4618      	mov	r0, r3
 8002324:	3728      	adds	r7, #40	; 0x28
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d103      	bne.n	8002346 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	e002      	b.n	800234c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002358:	2101      	movs	r1, #1
 800235a:	69b8      	ldr	r0, [r7, #24]
 800235c:	f7ff ff1e 	bl	800219c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	68f9      	ldr	r1, [r7, #12]
 800236e:	2073      	movs	r0, #115	; 0x73
 8002370:	f003 fce2 	bl	8005d38 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b090      	sub	sp, #64	; 0x40
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800238a:	2300      	movs	r3, #0
 800238c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10a      	bne.n	80023ae <xQueueGenericSend+0x32>
        __asm volatile
 8002398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239c:	f383 8811 	msr	BASEPRI, r3
 80023a0:	f3bf 8f6f 	isb	sy
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80023aa:	bf00      	nop
 80023ac:	e7fe      	b.n	80023ac <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d103      	bne.n	80023bc <xQueueGenericSend+0x40>
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <xQueueGenericSend+0x44>
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <xQueueGenericSend+0x46>
 80023c0:	2300      	movs	r3, #0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10a      	bne.n	80023dc <xQueueGenericSend+0x60>
        __asm volatile
 80023c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ca:	f383 8811 	msr	BASEPRI, r3
 80023ce:	f3bf 8f6f 	isb	sy
 80023d2:	f3bf 8f4f 	dsb	sy
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80023d8:	bf00      	nop
 80023da:	e7fe      	b.n	80023da <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d103      	bne.n	80023ea <xQueueGenericSend+0x6e>
 80023e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <xQueueGenericSend+0x72>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <xQueueGenericSend+0x74>
 80023ee:	2300      	movs	r3, #0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10a      	bne.n	800240a <xQueueGenericSend+0x8e>
        __asm volatile
 80023f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f8:	f383 8811 	msr	BASEPRI, r3
 80023fc:	f3bf 8f6f 	isb	sy
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	623b      	str	r3, [r7, #32]
    }
 8002406:	bf00      	nop
 8002408:	e7fe      	b.n	8002408 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800240a:	f001 f9cf 	bl	80037ac <xTaskGetSchedulerState>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <xQueueGenericSend+0x9e>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <xQueueGenericSend+0xa2>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <xQueueGenericSend+0xa4>
 800241e:	2300      	movs	r3, #0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10a      	bne.n	800243a <xQueueGenericSend+0xbe>
        __asm volatile
 8002424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002428:	f383 8811 	msr	BASEPRI, r3
 800242c:	f3bf 8f6f 	isb	sy
 8002430:	f3bf 8f4f 	dsb	sy
 8002434:	61fb      	str	r3, [r7, #28]
    }
 8002436:	bf00      	nop
 8002438:	e7fe      	b.n	8002438 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800243a:	f001 ff8b 	bl	8004354 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002446:	429a      	cmp	r2, r3
 8002448:	d302      	bcc.n	8002450 <xQueueGenericSend+0xd4>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d136      	bne.n	80024be <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002452:	4618      	mov	r0, r3
 8002454:	f004 f9fc 	bl	8006850 <SEGGER_SYSVIEW_ShrinkId>
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	460b      	mov	r3, r1
 8002462:	4601      	mov	r1, r0
 8002464:	205a      	movs	r0, #90	; 0x5a
 8002466:	f003 fcdd 	bl	8005e24 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002470:	f000 fa78 	bl	8002964 <prvCopyDataToQueue>
 8002474:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	2b00      	cmp	r3, #0
 800247c:	d010      	beq.n	80024a0 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002480:	3324      	adds	r3, #36	; 0x24
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fff2 	bl	800346c <xTaskRemoveFromEventList>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d013      	beq.n	80024b6 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800248e:	4b4d      	ldr	r3, [pc, #308]	; (80025c4 <xQueueGenericSend+0x248>)
 8002490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	f3bf 8f4f 	dsb	sy
 800249a:	f3bf 8f6f 	isb	sy
 800249e:	e00a      	b.n	80024b6 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80024a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d007      	beq.n	80024b6 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80024a6:	4b47      	ldr	r3, [pc, #284]	; (80025c4 <xQueueGenericSend+0x248>)
 80024a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	f3bf 8f4f 	dsb	sy
 80024b2:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80024b6:	f001 ff7d 	bl	80043b4 <vPortExitCritical>
                return pdPASS;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e07d      	b.n	80025ba <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d110      	bne.n	80024e6 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80024c4:	f001 ff76 	bl	80043b4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80024c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ca:	4618      	mov	r0, r3
 80024cc:	f004 f9c0 	bl	8006850 <SEGGER_SYSVIEW_ShrinkId>
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	460b      	mov	r3, r1
 80024da:	4601      	mov	r1, r0
 80024dc:	205a      	movs	r0, #90	; 0x5a
 80024de:	f003 fca1 	bl	8005e24 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	e069      	b.n	80025ba <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80024e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d106      	bne.n	80024fa <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	4618      	mov	r0, r3
 80024f2:	f001 f821 	bl	8003538 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80024f6:	2301      	movs	r3, #1
 80024f8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80024fa:	f001 ff5b 	bl	80043b4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80024fe:	f000 fd6d 	bl	8002fdc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002502:	f001 ff27 	bl	8004354 <vPortEnterCritical>
 8002506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002508:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800250c:	b25b      	sxtb	r3, r3
 800250e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002512:	d103      	bne.n	800251c <xQueueGenericSend+0x1a0>
 8002514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800251c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002522:	b25b      	sxtb	r3, r3
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002528:	d103      	bne.n	8002532 <xQueueGenericSend+0x1b6>
 800252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002532:	f001 ff3f 	bl	80043b4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002536:	1d3a      	adds	r2, r7, #4
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f001 f810 	bl	8003564 <xTaskCheckForTimeOut>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d124      	bne.n	8002594 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800254a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800254c:	f000 fb02 	bl	8002b54 <prvIsQueueFull>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d018      	beq.n	8002588 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002558:	3310      	adds	r3, #16
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	4611      	mov	r1, r2
 800255e:	4618      	mov	r0, r3
 8002560:	f000 ff32 	bl	80033c8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002566:	f000 fa8d 	bl	8002a84 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800256a:	f000 fd45 	bl	8002ff8 <xTaskResumeAll>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	f47f af62 	bne.w	800243a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002576:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <xQueueGenericSend+0x248>)
 8002578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	f3bf 8f4f 	dsb	sy
 8002582:	f3bf 8f6f 	isb	sy
 8002586:	e758      	b.n	800243a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800258a:	f000 fa7b 	bl	8002a84 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800258e:	f000 fd33 	bl	8002ff8 <xTaskResumeAll>
 8002592:	e752      	b.n	800243a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002596:	f000 fa75 	bl	8002a84 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800259a:	f000 fd2d 	bl	8002ff8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	4618      	mov	r0, r3
 80025a2:	f004 f955 	bl	8006850 <SEGGER_SYSVIEW_ShrinkId>
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	460b      	mov	r3, r1
 80025b0:	4601      	mov	r1, r0
 80025b2:	205a      	movs	r0, #90	; 0x5a
 80025b4:	f003 fc36 	bl	8005e24 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80025b8:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3738      	adds	r7, #56	; 0x38
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	e000ed04 	.word	0xe000ed04

080025c8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b090      	sub	sp, #64	; 0x40
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80025da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10a      	bne.n	80025f6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80025e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80025f2:	bf00      	nop
 80025f4:	e7fe      	b.n	80025f4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d103      	bne.n	8002604 <xQueueGenericSendFromISR+0x3c>
 80025fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <xQueueGenericSendFromISR+0x40>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <xQueueGenericSendFromISR+0x42>
 8002608:	2300      	movs	r3, #0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10a      	bne.n	8002624 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800260e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002612:	f383 8811 	msr	BASEPRI, r3
 8002616:	f3bf 8f6f 	isb	sy
 800261a:	f3bf 8f4f 	dsb	sy
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002620:	bf00      	nop
 8002622:	e7fe      	b.n	8002622 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d103      	bne.n	8002632 <xQueueGenericSendFromISR+0x6a>
 800262a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <xQueueGenericSendFromISR+0x6e>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <xQueueGenericSendFromISR+0x70>
 8002636:	2300      	movs	r3, #0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10a      	bne.n	8002652 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800263c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002640:	f383 8811 	msr	BASEPRI, r3
 8002644:	f3bf 8f6f 	isb	sy
 8002648:	f3bf 8f4f 	dsb	sy
 800264c:	623b      	str	r3, [r7, #32]
    }
 800264e:	bf00      	nop
 8002650:	e7fe      	b.n	8002650 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002652:	f001 ff63 	bl	800451c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002656:	f3ef 8211 	mrs	r2, BASEPRI
 800265a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265e:	f383 8811 	msr	BASEPRI, r3
 8002662:	f3bf 8f6f 	isb	sy
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	61fa      	str	r2, [r7, #28]
 800266c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800266e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002670:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267a:	429a      	cmp	r2, r3
 800267c:	d302      	bcc.n	8002684 <xQueueGenericSendFromISR+0xbc>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d148      	bne.n	8002716 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002686:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800268a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002696:	4618      	mov	r0, r3
 8002698:	f004 f8da 	bl	8006850 <SEGGER_SYSVIEW_ShrinkId>
 800269c:	4601      	mov	r1, r0
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	461a      	mov	r2, r3
 80026a2:	2060      	movs	r0, #96	; 0x60
 80026a4:	f003 faee 	bl	8005c84 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026ae:	f000 f959 	bl	8002964 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80026b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80026b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ba:	d112      	bne.n	80026e2 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d025      	beq.n	8002710 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c6:	3324      	adds	r3, #36	; 0x24
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 fecf 	bl	800346c <xTaskRemoveFromEventList>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01d      	beq.n	8002710 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d01a      	beq.n	8002710 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	e016      	b.n	8002710 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80026e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80026e6:	2b7f      	cmp	r3, #127	; 0x7f
 80026e8:	d10a      	bne.n	8002700 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80026ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ee:	f383 8811 	msr	BASEPRI, r3
 80026f2:	f3bf 8f6f 	isb	sy
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	617b      	str	r3, [r7, #20]
    }
 80026fc:	bf00      	nop
 80026fe:	e7fe      	b.n	80026fe <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002700:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002704:	3301      	adds	r3, #1
 8002706:	b2db      	uxtb	r3, r3
 8002708:	b25a      	sxtb	r2, r3
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002710:	2301      	movs	r3, #1
 8002712:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002714:	e00b      	b.n	800272e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002718:	4618      	mov	r0, r3
 800271a:	f004 f899 	bl	8006850 <SEGGER_SYSVIEW_ShrinkId>
 800271e:	4601      	mov	r1, r0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	461a      	mov	r2, r3
 8002724:	2060      	movs	r0, #96	; 0x60
 8002726:	f003 faad 	bl	8005c84 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800272a:	2300      	movs	r3, #0
 800272c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800272e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002730:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002738:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800273a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800273c:	4618      	mov	r0, r3
 800273e:	3740      	adds	r7, #64	; 0x40
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b08f      	sub	sp, #60	; 0x3c
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002750:	2300      	movs	r3, #0
 8002752:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10a      	bne.n	8002774 <xQueueReceive+0x30>
        __asm volatile
 800275e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	f3bf 8f6f 	isb	sy
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	623b      	str	r3, [r7, #32]
    }
 8002770:	bf00      	nop
 8002772:	e7fe      	b.n	8002772 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d103      	bne.n	8002782 <xQueueReceive+0x3e>
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <xQueueReceive+0x42>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <xQueueReceive+0x44>
 8002786:	2300      	movs	r3, #0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10a      	bne.n	80027a2 <xQueueReceive+0x5e>
        __asm volatile
 800278c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002790:	f383 8811 	msr	BASEPRI, r3
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	61fb      	str	r3, [r7, #28]
    }
 800279e:	bf00      	nop
 80027a0:	e7fe      	b.n	80027a0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027a2:	f001 f803 	bl	80037ac <xTaskGetSchedulerState>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d102      	bne.n	80027b2 <xQueueReceive+0x6e>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <xQueueReceive+0x72>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <xQueueReceive+0x74>
 80027b6:	2300      	movs	r3, #0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10a      	bne.n	80027d2 <xQueueReceive+0x8e>
        __asm volatile
 80027bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c0:	f383 8811 	msr	BASEPRI, r3
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	61bb      	str	r3, [r7, #24]
    }
 80027ce:	bf00      	nop
 80027d0:	e7fe      	b.n	80027d0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80027d2:	f001 fdbf 	bl	8004354 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d02f      	beq.n	8002842 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027e6:	f000 f927 	bl	8002a38 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	4618      	mov	r0, r3
 80027ee:	f004 f82f 	bl	8006850 <SEGGER_SYSVIEW_ShrinkId>
 80027f2:	4604      	mov	r4, r0
 80027f4:	2000      	movs	r0, #0
 80027f6:	f004 f82b 	bl	8006850 <SEGGER_SYSVIEW_ShrinkId>
 80027fa:	4602      	mov	r2, r0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2101      	movs	r1, #1
 8002800:	9100      	str	r1, [sp, #0]
 8002802:	4621      	mov	r1, r4
 8002804:	205c      	movs	r0, #92	; 0x5c
 8002806:	f003 fb0d 	bl	8005e24 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	1e5a      	subs	r2, r3, #1
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00f      	beq.n	800283a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	3310      	adds	r3, #16
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fe24 	bl	800346c <xTaskRemoveFromEventList>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d007      	beq.n	800283a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800282a:	4b4d      	ldr	r3, [pc, #308]	; (8002960 <xQueueReceive+0x21c>)
 800282c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	f3bf 8f4f 	dsb	sy
 8002836:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800283a:	f001 fdbb 	bl	80043b4 <vPortExitCritical>
                return pdPASS;
 800283e:	2301      	movs	r3, #1
 8002840:	e08a      	b.n	8002958 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d113      	bne.n	8002870 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002848:	f001 fdb4 	bl	80043b4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800284c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284e:	4618      	mov	r0, r3
 8002850:	f003 fffe 	bl	8006850 <SEGGER_SYSVIEW_ShrinkId>
 8002854:	4604      	mov	r4, r0
 8002856:	2000      	movs	r0, #0
 8002858:	f003 fffa 	bl	8006850 <SEGGER_SYSVIEW_ShrinkId>
 800285c:	4602      	mov	r2, r0
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2101      	movs	r1, #1
 8002862:	9100      	str	r1, [sp, #0]
 8002864:	4621      	mov	r1, r4
 8002866:	205c      	movs	r0, #92	; 0x5c
 8002868:	f003 fadc 	bl	8005e24 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800286c:	2300      	movs	r3, #0
 800286e:	e073      	b.n	8002958 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002876:	f107 0310 	add.w	r3, r7, #16
 800287a:	4618      	mov	r0, r3
 800287c:	f000 fe5c 	bl	8003538 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002880:	2301      	movs	r3, #1
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002884:	f001 fd96 	bl	80043b4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002888:	f000 fba8 	bl	8002fdc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800288c:	f001 fd62 	bl	8004354 <vPortEnterCritical>
 8002890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002896:	b25b      	sxtb	r3, r3
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d103      	bne.n	80028a6 <xQueueReceive+0x162>
 800289e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ac:	b25b      	sxtb	r3, r3
 80028ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b2:	d103      	bne.n	80028bc <xQueueReceive+0x178>
 80028b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028bc:	f001 fd7a 	bl	80043b4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028c0:	1d3a      	adds	r2, r7, #4
 80028c2:	f107 0310 	add.w	r3, r7, #16
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fe4b 	bl	8003564 <xTaskCheckForTimeOut>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d124      	bne.n	800291e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028d6:	f000 f927 	bl	8002b28 <prvIsQueueEmpty>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d018      	beq.n	8002912 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	3324      	adds	r3, #36	; 0x24
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fd6d 	bl	80033c8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80028ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028f0:	f000 f8c8 	bl	8002a84 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80028f4:	f000 fb80 	bl	8002ff8 <xTaskResumeAll>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f47f af69 	bne.w	80027d2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002900:	4b17      	ldr	r3, [pc, #92]	; (8002960 <xQueueReceive+0x21c>)
 8002902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	e75f      	b.n	80027d2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002914:	f000 f8b6 	bl	8002a84 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002918:	f000 fb6e 	bl	8002ff8 <xTaskResumeAll>
 800291c:	e759      	b.n	80027d2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800291e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002920:	f000 f8b0 	bl	8002a84 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002924:	f000 fb68 	bl	8002ff8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800292a:	f000 f8fd 	bl	8002b28 <prvIsQueueEmpty>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	f43f af4e 	beq.w	80027d2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002938:	4618      	mov	r0, r3
 800293a:	f003 ff89 	bl	8006850 <SEGGER_SYSVIEW_ShrinkId>
 800293e:	4604      	mov	r4, r0
 8002940:	2000      	movs	r0, #0
 8002942:	f003 ff85 	bl	8006850 <SEGGER_SYSVIEW_ShrinkId>
 8002946:	4602      	mov	r2, r0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2101      	movs	r1, #1
 800294c:	9100      	str	r1, [sp, #0]
 800294e:	4621      	mov	r1, r4
 8002950:	205c      	movs	r0, #92	; 0x5c
 8002952:	f003 fa67 	bl	8005e24 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002956:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002958:	4618      	mov	r0, r3
 800295a:	3734      	adds	r7, #52	; 0x34
 800295c:	46bd      	mov	sp, r7
 800295e:	bd90      	pop	{r4, r7, pc}
 8002960:	e000ed04 	.word	0xe000ed04

08002964 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10d      	bne.n	800299e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d14d      	bne.n	8002a26 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 ff2a 	bl	80037e8 <xTaskPriorityDisinherit>
 8002994:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	e043      	b.n	8002a26 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d119      	bne.n	80029d8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6858      	ldr	r0, [r3, #4]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	461a      	mov	r2, r3
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	f004 f8de 	bl	8006b70 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	441a      	add	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d32b      	bcc.n	8002a26 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	e026      	b.n	8002a26 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	68d8      	ldr	r0, [r3, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	461a      	mov	r2, r3
 80029e2:	68b9      	ldr	r1, [r7, #8]
 80029e4:	f004 f8c4 	bl	8006b70 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	425b      	negs	r3, r3
 80029f2:	441a      	add	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d207      	bcs.n	8002a14 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	425b      	negs	r3, r3
 8002a0e:	441a      	add	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d105      	bne.n	8002a26 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002a2e:	697b      	ldr	r3, [r7, #20]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d018      	beq.n	8002a7c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	441a      	add	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d303      	bcc.n	8002a6c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68d9      	ldr	r1, [r3, #12]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	461a      	mov	r2, r3
 8002a76:	6838      	ldr	r0, [r7, #0]
 8002a78:	f004 f87a 	bl	8006b70 <memcpy>
    }
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002a8c:	f001 fc62 	bl	8004354 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a96:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a98:	e011      	b.n	8002abe <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d012      	beq.n	8002ac8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3324      	adds	r3, #36	; 0x24
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fce0 	bl	800346c <xTaskRemoveFromEventList>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002ab2:	f000 fdbd 	bl	8003630 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	dce9      	bgt.n	8002a9a <prvUnlockQueue+0x16>
 8002ac6:	e000      	b.n	8002aca <prvUnlockQueue+0x46>
                        break;
 8002ac8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	22ff      	movs	r2, #255	; 0xff
 8002ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002ad2:	f001 fc6f 	bl	80043b4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002ad6:	f001 fc3d 	bl	8004354 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ae0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ae2:	e011      	b.n	8002b08 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d012      	beq.n	8002b12 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3310      	adds	r3, #16
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fcbb 	bl	800346c <xTaskRemoveFromEventList>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002afc:	f000 fd98 	bl	8003630 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002b00:	7bbb      	ldrb	r3, [r7, #14]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	dce9      	bgt.n	8002ae4 <prvUnlockQueue+0x60>
 8002b10:	e000      	b.n	8002b14 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002b12:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	22ff      	movs	r2, #255	; 0xff
 8002b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002b1c:	f001 fc4a 	bl	80043b4 <vPortExitCritical>
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b30:	f001 fc10 	bl	8004354 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d102      	bne.n	8002b42 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	e001      	b.n	8002b46 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b46:	f001 fc35 	bl	80043b4 <vPortExitCritical>

    return xReturn;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b5c:	f001 fbfa 	bl	8004354 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d102      	bne.n	8002b72 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	e001      	b.n	8002b76 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b76:	f001 fc1d 	bl	80043b4 <vPortExitCritical>

    return xReturn;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	e01e      	b.n	8002bd2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b94:	4a13      	ldr	r2, [pc, #76]	; (8002be4 <vQueueAddToRegistry+0x60>)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d115      	bne.n	8002bcc <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ba0:	4910      	ldr	r1, [pc, #64]	; (8002be4 <vQueueAddToRegistry+0x60>)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002baa:	4a0e      	ldr	r2, [pc, #56]	; (8002be4 <vQueueAddToRegistry+0x60>)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f003 fe49 	bl	8006850 <SEGGER_SYSVIEW_ShrinkId>
 8002bbe:	4601      	mov	r1, r0
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2071      	movs	r0, #113	; 0x71
 8002bc6:	f003 f85d 	bl	8005c84 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002bca:	e006      	b.n	8002bda <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b07      	cmp	r3, #7
 8002bd6:	d9dd      	bls.n	8002b94 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200000e4 	.word	0x200000e4

08002be8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002bf8:	f001 fbac 	bl	8004354 <vPortEnterCritical>
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c02:	b25b      	sxtb	r3, r3
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d103      	bne.n	8002c12 <vQueueWaitForMessageRestricted+0x2a>
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c18:	b25b      	sxtb	r3, r3
 8002c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1e:	d103      	bne.n	8002c28 <vQueueWaitForMessageRestricted+0x40>
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c28:	f001 fbc4 	bl	80043b4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d106      	bne.n	8002c42 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	3324      	adds	r3, #36	; 0x24
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fbe7 	bl	8003410 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002c42:	6978      	ldr	r0, [r7, #20]
 8002c44:	f7ff ff1e 	bl	8002a84 <prvUnlockQueue>
    }
 8002c48:	bf00      	nop
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08c      	sub	sp, #48	; 0x30
 8002c54:	af04      	add	r7, sp, #16
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f001 fc99 	bl	800459c <pvPortMalloc>
 8002c6a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00e      	beq.n	8002c90 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c72:	2058      	movs	r0, #88	; 0x58
 8002c74:	f001 fc92 	bl	800459c <pvPortMalloc>
 8002c78:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
 8002c86:	e005      	b.n	8002c94 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002c88:	6978      	ldr	r0, [r7, #20]
 8002c8a:	f001 fd67 	bl	800475c <vPortFree>
 8002c8e:	e001      	b.n	8002c94 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d013      	beq.n	8002cc2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c9a:	88fa      	ldrh	r2, [r7, #6]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	9303      	str	r3, [sp, #12]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	9302      	str	r3, [sp, #8]
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 f80e 	bl	8002cd2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002cb6:	69f8      	ldr	r0, [r7, #28]
 8002cb8:	f000 f8a2 	bl	8002e00 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	e002      	b.n	8002cc8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002cc8:	69bb      	ldr	r3, [r7, #24]
    }
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3720      	adds	r7, #32
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b088      	sub	sp, #32
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	461a      	mov	r2, r3
 8002cea:	21a5      	movs	r1, #165	; 0xa5
 8002cec:	f003 ff4e 	bl	8006b8c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	f023 0307 	bic.w	r3, r3, #7
 8002d08:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	617b      	str	r3, [r7, #20]
    }
 8002d26:	bf00      	nop
 8002d28:	e7fe      	b.n	8002d28 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d01f      	beq.n	8002d70 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
 8002d34:	e012      	b.n	8002d5c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	7819      	ldrb	r1, [r3, #0]
 8002d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	4413      	add	r3, r2
 8002d44:	3334      	adds	r3, #52	; 0x34
 8002d46:	460a      	mov	r2, r1
 8002d48:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	4413      	add	r3, r2
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d006      	beq.n	8002d64 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	61fb      	str	r3, [r7, #28]
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	2b09      	cmp	r3, #9
 8002d60:	d9e9      	bls.n	8002d36 <prvInitialiseNewTask+0x64>
 8002d62:	e000      	b.n	8002d66 <prvInitialiseNewTask+0x94>
            {
                break;
 8002d64:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d6e:	e003      	b.n	8002d78 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d901      	bls.n	8002d82 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d7e:	2304      	movs	r3, #4
 8002d80:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d86:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d8c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d90:	2200      	movs	r2, #0
 8002d92:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d96:	3304      	adds	r3, #4
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff f96b 	bl	8002074 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	3318      	adds	r3, #24
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff f966 	bl	8002074 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dac:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db0:	f1c3 0205 	rsb	r2, r3, #5
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dbc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	3350      	adds	r3, #80	; 0x50
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f003 fee0 	bl	8006b8c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	3354      	adds	r3, #84	; 0x54
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f003 fed9 	bl	8006b8c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	68f9      	ldr	r1, [r7, #12]
 8002dde:	69b8      	ldr	r0, [r7, #24]
 8002de0:	f001 f90c 	bl	8003ffc <pxPortInitialiseStack>
 8002de4:	4602      	mov	r2, r0
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002df6:	bf00      	nop
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002e00:	b5b0      	push	{r4, r5, r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002e08:	f001 faa4 	bl	8004354 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002e0c:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <prvAddNewTaskToReadyList+0xfc>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3301      	adds	r3, #1
 8002e12:	4a3a      	ldr	r2, [pc, #232]	; (8002efc <prvAddNewTaskToReadyList+0xfc>)
 8002e14:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002e16:	4b3a      	ldr	r3, [pc, #232]	; (8002f00 <prvAddNewTaskToReadyList+0x100>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d109      	bne.n	8002e32 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002e1e:	4a38      	ldr	r2, [pc, #224]	; (8002f00 <prvAddNewTaskToReadyList+0x100>)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e24:	4b35      	ldr	r3, [pc, #212]	; (8002efc <prvAddNewTaskToReadyList+0xfc>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d110      	bne.n	8002e4e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002e2c:	f000 fc24 	bl	8003678 <prvInitialiseTaskLists>
 8002e30:	e00d      	b.n	8002e4e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002e32:	4b34      	ldr	r3, [pc, #208]	; (8002f04 <prvAddNewTaskToReadyList+0x104>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e3a:	4b31      	ldr	r3, [pc, #196]	; (8002f00 <prvAddNewTaskToReadyList+0x100>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d802      	bhi.n	8002e4e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002e48:	4a2d      	ldr	r2, [pc, #180]	; (8002f00 <prvAddNewTaskToReadyList+0x100>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002e4e:	4b2e      	ldr	r3, [pc, #184]	; (8002f08 <prvAddNewTaskToReadyList+0x108>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3301      	adds	r3, #1
 8002e54:	4a2c      	ldr	r2, [pc, #176]	; (8002f08 <prvAddNewTaskToReadyList+0x108>)
 8002e56:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e58:	4b2b      	ldr	r3, [pc, #172]	; (8002f08 <prvAddNewTaskToReadyList+0x108>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d016      	beq.n	8002e94 <prvAddNewTaskToReadyList+0x94>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f003 fbcb 	bl	8006604 <SEGGER_SYSVIEW_OnTaskCreate>
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	461d      	mov	r5, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	461c      	mov	r4, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	1ae3      	subs	r3, r4, r3
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	462b      	mov	r3, r5
 8002e90:	f001 fe30 	bl	8004af4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f003 fc38 	bl	800670c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <prvAddNewTaskToReadyList+0x10c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	4a18      	ldr	r2, [pc, #96]	; (8002f0c <prvAddNewTaskToReadyList+0x10c>)
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4a15      	ldr	r2, [pc, #84]	; (8002f10 <prvAddNewTaskToReadyList+0x110>)
 8002ebc:	441a      	add	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	f7ff f8e2 	bl	800208e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002eca:	f001 fa73 	bl	80043b4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002ece:	4b0d      	ldr	r3, [pc, #52]	; (8002f04 <prvAddNewTaskToReadyList+0x104>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00e      	beq.n	8002ef4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <prvAddNewTaskToReadyList+0x100>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d207      	bcs.n	8002ef4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <prvAddNewTaskToReadyList+0x114>)
 8002ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	f3bf 8f4f 	dsb	sy
 8002ef0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ef4:	bf00      	nop
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bdb0      	pop	{r4, r5, r7, pc}
 8002efc:	200001fc 	.word	0x200001fc
 8002f00:	20000124 	.word	0x20000124
 8002f04:	20000208 	.word	0x20000208
 8002f08:	20000218 	.word	0x20000218
 8002f0c:	20000204 	.word	0x20000204
 8002f10:	20000128 	.word	0x20000128
 8002f14:	e000ed04 	.word	0xe000ed04

08002f18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002f1e:	4b27      	ldr	r3, [pc, #156]	; (8002fbc <vTaskStartScheduler+0xa4>)
 8002f20:	9301      	str	r3, [sp, #4]
 8002f22:	2300      	movs	r3, #0
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	2300      	movs	r3, #0
 8002f28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f2c:	4924      	ldr	r1, [pc, #144]	; (8002fc0 <vTaskStartScheduler+0xa8>)
 8002f2e:	4825      	ldr	r0, [pc, #148]	; (8002fc4 <vTaskStartScheduler+0xac>)
 8002f30:	f7ff fe8e 	bl	8002c50 <xTaskCreate>
 8002f34:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d102      	bne.n	8002f42 <vTaskStartScheduler+0x2a>
            {
                xReturn = xTimerCreateTimerTask();
 8002f3c:	f000 fd4c 	bl	80039d8 <xTimerCreateTimerTask>
 8002f40:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d124      	bne.n	8002f92 <vTaskStartScheduler+0x7a>
        __asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	60bb      	str	r3, [r7, #8]
    }
 8002f5a:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f5c:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <vTaskStartScheduler+0xb0>)
 8002f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f62:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002f64:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <vTaskStartScheduler+0xb4>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f6a:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <vTaskStartScheduler+0xb8>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002f70:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <vTaskStartScheduler+0xbc>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <vTaskStartScheduler+0xa4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d102      	bne.n	8002f82 <vTaskStartScheduler+0x6a>
 8002f7c:	f003 fb26 	bl	80065cc <SEGGER_SYSVIEW_OnIdle>
 8002f80:	e004      	b.n	8002f8c <vTaskStartScheduler+0x74>
 8002f82:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <vTaskStartScheduler+0xbc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f003 fb7e 	bl	8006688 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002f8c:	f001 f8c2 	bl	8004114 <xPortStartScheduler>
 8002f90:	e00e      	b.n	8002fb0 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f98:	d10a      	bne.n	8002fb0 <vTaskStartScheduler+0x98>
        __asm volatile
 8002f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	607b      	str	r3, [r7, #4]
    }
 8002fac:	bf00      	nop
 8002fae:	e7fe      	b.n	8002fae <vTaskStartScheduler+0x96>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002fb0:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <vTaskStartScheduler+0xc0>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
}
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20000220 	.word	0x20000220
 8002fc0:	080074f4 	.word	0x080074f4
 8002fc4:	08003649 	.word	0x08003649
 8002fc8:	2000021c 	.word	0x2000021c
 8002fcc:	20000208 	.word	0x20000208
 8002fd0:	20000200 	.word	0x20000200
 8002fd4:	20000124 	.word	0x20000124
 8002fd8:	2000000c 	.word	0x2000000c

08002fdc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <vTaskSuspendAll+0x18>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	4a03      	ldr	r2, [pc, #12]	; (8002ff4 <vTaskSuspendAll+0x18>)
 8002fe8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002fea:	bf00      	nop
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	20000224 	.word	0x20000224

08002ff8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003002:	2300      	movs	r3, #0
 8003004:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003006:	4b43      	ldr	r3, [pc, #268]	; (8003114 <xTaskResumeAll+0x11c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <xTaskResumeAll+0x2c>
        __asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	603b      	str	r3, [r7, #0]
    }
 8003020:	bf00      	nop
 8003022:	e7fe      	b.n	8003022 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003024:	f001 f996 	bl	8004354 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003028:	4b3a      	ldr	r3, [pc, #232]	; (8003114 <xTaskResumeAll+0x11c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3b01      	subs	r3, #1
 800302e:	4a39      	ldr	r2, [pc, #228]	; (8003114 <xTaskResumeAll+0x11c>)
 8003030:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003032:	4b38      	ldr	r3, [pc, #224]	; (8003114 <xTaskResumeAll+0x11c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d165      	bne.n	8003106 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800303a:	4b37      	ldr	r3, [pc, #220]	; (8003118 <xTaskResumeAll+0x120>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d061      	beq.n	8003106 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003042:	e032      	b.n	80030aa <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003044:	4b35      	ldr	r3, [pc, #212]	; (800311c <xTaskResumeAll+0x124>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	3318      	adds	r3, #24
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff f879 	bl	8002148 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	3304      	adds	r3, #4
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff f874 	bl	8002148 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4618      	mov	r0, r3
 8003064:	f003 fb52 	bl	800670c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	2201      	movs	r2, #1
 800306e:	409a      	lsls	r2, r3
 8003070:	4b2b      	ldr	r3, [pc, #172]	; (8003120 <xTaskResumeAll+0x128>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4313      	orrs	r3, r2
 8003076:	4a2a      	ldr	r2, [pc, #168]	; (8003120 <xTaskResumeAll+0x128>)
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4a27      	ldr	r2, [pc, #156]	; (8003124 <xTaskResumeAll+0x12c>)
 8003088:	441a      	add	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3304      	adds	r3, #4
 800308e:	4619      	mov	r1, r3
 8003090:	4610      	mov	r0, r2
 8003092:	f7fe fffc 	bl	800208e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309a:	4b23      	ldr	r3, [pc, #140]	; (8003128 <xTaskResumeAll+0x130>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d302      	bcc.n	80030aa <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80030a4:	4b21      	ldr	r3, [pc, #132]	; (800312c <xTaskResumeAll+0x134>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030aa:	4b1c      	ldr	r3, [pc, #112]	; (800311c <xTaskResumeAll+0x124>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1c8      	bne.n	8003044 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80030b8:	f000 fb5c 	bl	8003774 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030bc:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <xTaskResumeAll+0x138>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d010      	beq.n	80030ea <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80030c8:	f000 f858 	bl	800317c <xTaskIncrementTick>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80030d2:	4b16      	ldr	r3, [pc, #88]	; (800312c <xTaskResumeAll+0x134>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3b01      	subs	r3, #1
 80030dc:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f1      	bne.n	80030c8 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80030e4:	4b12      	ldr	r3, [pc, #72]	; (8003130 <xTaskResumeAll+0x138>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80030ea:	4b10      	ldr	r3, [pc, #64]	; (800312c <xTaskResumeAll+0x134>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80030f2:	2301      	movs	r3, #1
 80030f4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80030f6:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <xTaskResumeAll+0x13c>)
 80030f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003106:	f001 f955 	bl	80043b4 <vPortExitCritical>

    return xAlreadyYielded;
 800310a:	68bb      	ldr	r3, [r7, #8]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20000224 	.word	0x20000224
 8003118:	200001fc 	.word	0x200001fc
 800311c:	200001bc 	.word	0x200001bc
 8003120:	20000204 	.word	0x20000204
 8003124:	20000128 	.word	0x20000128
 8003128:	20000124 	.word	0x20000124
 800312c:	20000210 	.word	0x20000210
 8003130:	2000020c 	.word	0x2000020c
 8003134:	e000ed04 	.word	0xe000ed04

08003138 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800313e:	4b05      	ldr	r3, [pc, #20]	; (8003154 <xTaskGetTickCount+0x1c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003144:	687b      	ldr	r3, [r7, #4]
}
 8003146:	4618      	mov	r0, r3
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000200 	.word	0x20000200

08003158 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800315e:	f001 f9dd 	bl	800451c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003162:	2300      	movs	r3, #0
 8003164:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003166:	4b04      	ldr	r3, [pc, #16]	; (8003178 <xTaskGetTickCountFromISR+0x20>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800316c:	683b      	ldr	r3, [r7, #0]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	20000200 	.word	0x20000200

0800317c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003186:	4b50      	ldr	r3, [pc, #320]	; (80032c8 <xTaskIncrementTick+0x14c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f040 8092 	bne.w	80032b4 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003190:	4b4e      	ldr	r3, [pc, #312]	; (80032cc <xTaskIncrementTick+0x150>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3301      	adds	r3, #1
 8003196:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003198:	4a4c      	ldr	r2, [pc, #304]	; (80032cc <xTaskIncrementTick+0x150>)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d120      	bne.n	80031e6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80031a4:	4b4a      	ldr	r3, [pc, #296]	; (80032d0 <xTaskIncrementTick+0x154>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <xTaskIncrementTick+0x48>
        __asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	603b      	str	r3, [r7, #0]
    }
 80031c0:	bf00      	nop
 80031c2:	e7fe      	b.n	80031c2 <xTaskIncrementTick+0x46>
 80031c4:	4b42      	ldr	r3, [pc, #264]	; (80032d0 <xTaskIncrementTick+0x154>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	4b42      	ldr	r3, [pc, #264]	; (80032d4 <xTaskIncrementTick+0x158>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a40      	ldr	r2, [pc, #256]	; (80032d0 <xTaskIncrementTick+0x154>)
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	4a40      	ldr	r2, [pc, #256]	; (80032d4 <xTaskIncrementTick+0x158>)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4b3f      	ldr	r3, [pc, #252]	; (80032d8 <xTaskIncrementTick+0x15c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3301      	adds	r3, #1
 80031de:	4a3e      	ldr	r2, [pc, #248]	; (80032d8 <xTaskIncrementTick+0x15c>)
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	f000 fac7 	bl	8003774 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80031e6:	4b3d      	ldr	r3, [pc, #244]	; (80032dc <xTaskIncrementTick+0x160>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d34c      	bcc.n	800328a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031f0:	4b37      	ldr	r3, [pc, #220]	; (80032d0 <xTaskIncrementTick+0x154>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d104      	bne.n	8003204 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031fa:	4b38      	ldr	r3, [pc, #224]	; (80032dc <xTaskIncrementTick+0x160>)
 80031fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003200:	601a      	str	r2, [r3, #0]
                    break;
 8003202:	e042      	b.n	800328a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003204:	4b32      	ldr	r3, [pc, #200]	; (80032d0 <xTaskIncrementTick+0x154>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	429a      	cmp	r2, r3
 800321a:	d203      	bcs.n	8003224 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800321c:	4a2f      	ldr	r2, [pc, #188]	; (80032dc <xTaskIncrementTick+0x160>)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003222:	e032      	b.n	800328a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	3304      	adds	r3, #4
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe ff8d 	bl	8002148 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	2b00      	cmp	r3, #0
 8003234:	d004      	beq.n	8003240 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	3318      	adds	r3, #24
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe ff84 	bl	8002148 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4618      	mov	r0, r3
 8003244:	f003 fa62 	bl	800670c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	2201      	movs	r2, #1
 800324e:	409a      	lsls	r2, r3
 8003250:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <xTaskIncrementTick+0x164>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4313      	orrs	r3, r2
 8003256:	4a22      	ldr	r2, [pc, #136]	; (80032e0 <xTaskIncrementTick+0x164>)
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4a1f      	ldr	r2, [pc, #124]	; (80032e4 <xTaskIncrementTick+0x168>)
 8003268:	441a      	add	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	3304      	adds	r3, #4
 800326e:	4619      	mov	r1, r3
 8003270:	4610      	mov	r0, r2
 8003272:	f7fe ff0c 	bl	800208e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327a:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <xTaskIncrementTick+0x16c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	429a      	cmp	r2, r3
 8003282:	d3b5      	bcc.n	80031f0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003284:	2301      	movs	r3, #1
 8003286:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003288:	e7b2      	b.n	80031f0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800328a:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <xTaskIncrementTick+0x16c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003290:	4914      	ldr	r1, [pc, #80]	; (80032e4 <xTaskIncrementTick+0x168>)
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d901      	bls.n	80032a6 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80032a2:	2301      	movs	r3, #1
 80032a4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80032a6:	4b11      	ldr	r3, [pc, #68]	; (80032ec <xTaskIncrementTick+0x170>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d007      	beq.n	80032be <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80032ae:	2301      	movs	r3, #1
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	e004      	b.n	80032be <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80032b4:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <xTaskIncrementTick+0x174>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3301      	adds	r3, #1
 80032ba:	4a0d      	ldr	r2, [pc, #52]	; (80032f0 <xTaskIncrementTick+0x174>)
 80032bc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80032be:	697b      	ldr	r3, [r7, #20]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20000224 	.word	0x20000224
 80032cc:	20000200 	.word	0x20000200
 80032d0:	200001b4 	.word	0x200001b4
 80032d4:	200001b8 	.word	0x200001b8
 80032d8:	20000214 	.word	0x20000214
 80032dc:	2000021c 	.word	0x2000021c
 80032e0:	20000204 	.word	0x20000204
 80032e4:	20000128 	.word	0x20000128
 80032e8:	20000124 	.word	0x20000124
 80032ec:	20000210 	.word	0x20000210
 80032f0:	2000020c 	.word	0x2000020c

080032f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032fa:	4b2d      	ldr	r3, [pc, #180]	; (80033b0 <vTaskSwitchContext+0xbc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003302:	4b2c      	ldr	r3, [pc, #176]	; (80033b4 <vTaskSwitchContext+0xc0>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003308:	e04d      	b.n	80033a6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800330a:	4b2a      	ldr	r3, [pc, #168]	; (80033b4 <vTaskSwitchContext+0xc0>)
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003310:	4b29      	ldr	r3, [pc, #164]	; (80033b8 <vTaskSwitchContext+0xc4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	fab3 f383 	clz	r3, r3
 800331c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800331e:	7afb      	ldrb	r3, [r7, #11]
 8003320:	f1c3 031f 	rsb	r3, r3, #31
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	4925      	ldr	r1, [pc, #148]	; (80033bc <vTaskSwitchContext+0xc8>)
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10a      	bne.n	8003350 <vTaskSwitchContext+0x5c>
        __asm volatile
 800333a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333e:	f383 8811 	msr	BASEPRI, r3
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	607b      	str	r3, [r7, #4]
    }
 800334c:	bf00      	nop
 800334e:	e7fe      	b.n	800334e <vTaskSwitchContext+0x5a>
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4a18      	ldr	r2, [pc, #96]	; (80033bc <vTaskSwitchContext+0xc8>)
 800335c:	4413      	add	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	3308      	adds	r3, #8
 8003372:	429a      	cmp	r2, r3
 8003374:	d104      	bne.n	8003380 <vTaskSwitchContext+0x8c>
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	605a      	str	r2, [r3, #4]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	4a0e      	ldr	r2, [pc, #56]	; (80033c0 <vTaskSwitchContext+0xcc>)
 8003388:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800338a:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <vTaskSwitchContext+0xcc>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <vTaskSwitchContext+0xd0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d102      	bne.n	800339c <vTaskSwitchContext+0xa8>
 8003396:	f003 f919 	bl	80065cc <SEGGER_SYSVIEW_OnIdle>
}
 800339a:	e004      	b.n	80033a6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <vTaskSwitchContext+0xcc>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f003 f971 	bl	8006688 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80033a6:	bf00      	nop
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000224 	.word	0x20000224
 80033b4:	20000210 	.word	0x20000210
 80033b8:	20000204 	.word	0x20000204
 80033bc:	20000128 	.word	0x20000128
 80033c0:	20000124 	.word	0x20000124
 80033c4:	20000220 	.word	0x20000220

080033c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10a      	bne.n	80033ee <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	60fb      	str	r3, [r7, #12]
    }
 80033ea:	bf00      	nop
 80033ec:	e7fe      	b.n	80033ec <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033ee:	4b07      	ldr	r3, [pc, #28]	; (800340c <vTaskPlaceOnEventList+0x44>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3318      	adds	r3, #24
 80033f4:	4619      	mov	r1, r3
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fe fe6d 	bl	80020d6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033fc:	2101      	movs	r1, #1
 80033fe:	6838      	ldr	r0, [r7, #0]
 8003400:	f000 fa72 	bl	80038e8 <prvAddCurrentTaskToDelayedList>
}
 8003404:	bf00      	nop
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	20000124 	.word	0x20000124

08003410 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003426:	f383 8811 	msr	BASEPRI, r3
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	617b      	str	r3, [r7, #20]
    }
 8003434:	bf00      	nop
 8003436:	e7fe      	b.n	8003436 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <vTaskPlaceOnEventListRestricted+0x58>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3318      	adds	r3, #24
 800343e:	4619      	mov	r1, r3
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f7fe fe24 	bl	800208e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800344c:	f04f 33ff 	mov.w	r3, #4294967295
 8003450:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003452:	2024      	movs	r0, #36	; 0x24
 8003454:	f002 fbbc 	bl	8005bd0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	68b8      	ldr	r0, [r7, #8]
 800345c:	f000 fa44 	bl	80038e8 <prvAddCurrentTaskToDelayedList>
    }
 8003460:	bf00      	nop
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20000124 	.word	0x20000124

0800346c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003486:	f383 8811 	msr	BASEPRI, r3
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	60fb      	str	r3, [r7, #12]
    }
 8003494:	bf00      	nop
 8003496:	e7fe      	b.n	8003496 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	3318      	adds	r3, #24
 800349c:	4618      	mov	r0, r3
 800349e:	f7fe fe53 	bl	8002148 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034a2:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <xTaskRemoveFromEventList+0xb4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d120      	bne.n	80034ec <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	3304      	adds	r3, #4
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe fe4a 	bl	8002148 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f003 f928 	bl	800670c <SEGGER_SYSVIEW_OnTaskStartReady>
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	2201      	movs	r2, #1
 80034c2:	409a      	lsls	r2, r3
 80034c4:	4b17      	ldr	r3, [pc, #92]	; (8003524 <xTaskRemoveFromEventList+0xb8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	4a16      	ldr	r2, [pc, #88]	; (8003524 <xTaskRemoveFromEventList+0xb8>)
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4a13      	ldr	r2, [pc, #76]	; (8003528 <xTaskRemoveFromEventList+0xbc>)
 80034dc:	441a      	add	r2, r3
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	3304      	adds	r3, #4
 80034e2:	4619      	mov	r1, r3
 80034e4:	4610      	mov	r0, r2
 80034e6:	f7fe fdd2 	bl	800208e <vListInsertEnd>
 80034ea:	e005      	b.n	80034f8 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	3318      	adds	r3, #24
 80034f0:	4619      	mov	r1, r3
 80034f2:	480e      	ldr	r0, [pc, #56]	; (800352c <xTaskRemoveFromEventList+0xc0>)
 80034f4:	f7fe fdcb 	bl	800208e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <xTaskRemoveFromEventList+0xc4>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	429a      	cmp	r2, r3
 8003504:	d905      	bls.n	8003512 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003506:	2301      	movs	r3, #1
 8003508:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800350a:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <xTaskRemoveFromEventList+0xc8>)
 800350c:	2201      	movs	r2, #1
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	e001      	b.n	8003516 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003516:	697b      	ldr	r3, [r7, #20]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	20000224 	.word	0x20000224
 8003524:	20000204 	.word	0x20000204
 8003528:	20000128 	.word	0x20000128
 800352c:	200001bc 	.word	0x200001bc
 8003530:	20000124 	.word	0x20000124
 8003534:	20000210 	.word	0x20000210

08003538 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <vTaskInternalSetTimeOutState+0x24>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <vTaskInternalSetTimeOutState+0x28>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	605a      	str	r2, [r3, #4]
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	20000214 	.word	0x20000214
 8003560:	20000200 	.word	0x20000200

08003564 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	613b      	str	r3, [r7, #16]
    }
 8003586:	bf00      	nop
 8003588:	e7fe      	b.n	8003588 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	60fb      	str	r3, [r7, #12]
    }
 80035a2:	bf00      	nop
 80035a4:	e7fe      	b.n	80035a4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80035a6:	f000 fed5 	bl	8004354 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80035aa:	4b1f      	ldr	r3, [pc, #124]	; (8003628 <xTaskCheckForTimeOut+0xc4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c2:	d102      	bne.n	80035ca <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61fb      	str	r3, [r7, #28]
 80035c8:	e026      	b.n	8003618 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	4b17      	ldr	r3, [pc, #92]	; (800362c <xTaskCheckForTimeOut+0xc8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d00a      	beq.n	80035ec <xTaskCheckForTimeOut+0x88>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d305      	bcc.n	80035ec <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80035e0:	2301      	movs	r3, #1
 80035e2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	e015      	b.n	8003618 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d20b      	bcs.n	800360e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	1ad2      	subs	r2, r2, r3
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ff98 	bl	8003538 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003608:	2300      	movs	r3, #0
 800360a:	61fb      	str	r3, [r7, #28]
 800360c:	e004      	b.n	8003618 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003614:	2301      	movs	r3, #1
 8003616:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003618:	f000 fecc 	bl	80043b4 <vPortExitCritical>

    return xReturn;
 800361c:	69fb      	ldr	r3, [r7, #28]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20000200 	.word	0x20000200
 800362c:	20000214 	.word	0x20000214

08003630 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003634:	4b03      	ldr	r3, [pc, #12]	; (8003644 <vTaskMissedYield+0x14>)
 8003636:	2201      	movs	r2, #1
 8003638:	601a      	str	r2, [r3, #0]
}
 800363a:	bf00      	nop
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	20000210 	.word	0x20000210

08003648 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003650:	f000 f852 	bl	80036f8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003654:	4b06      	ldr	r3, [pc, #24]	; (8003670 <prvIdleTask+0x28>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d9f9      	bls.n	8003650 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <prvIdleTask+0x2c>)
 800365e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800366c:	e7f0      	b.n	8003650 <prvIdleTask+0x8>
 800366e:	bf00      	nop
 8003670:	20000128 	.word	0x20000128
 8003674:	e000ed04 	.word	0xe000ed04

08003678 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800367e:	2300      	movs	r3, #0
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	e00c      	b.n	800369e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <prvInitialiseTaskLists+0x60>)
 8003690:	4413      	add	r3, r2
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe fcce 	bl	8002034 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3301      	adds	r3, #1
 800369c:	607b      	str	r3, [r7, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d9ef      	bls.n	8003684 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80036a4:	480d      	ldr	r0, [pc, #52]	; (80036dc <prvInitialiseTaskLists+0x64>)
 80036a6:	f7fe fcc5 	bl	8002034 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80036aa:	480d      	ldr	r0, [pc, #52]	; (80036e0 <prvInitialiseTaskLists+0x68>)
 80036ac:	f7fe fcc2 	bl	8002034 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80036b0:	480c      	ldr	r0, [pc, #48]	; (80036e4 <prvInitialiseTaskLists+0x6c>)
 80036b2:	f7fe fcbf 	bl	8002034 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80036b6:	480c      	ldr	r0, [pc, #48]	; (80036e8 <prvInitialiseTaskLists+0x70>)
 80036b8:	f7fe fcbc 	bl	8002034 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80036bc:	480b      	ldr	r0, [pc, #44]	; (80036ec <prvInitialiseTaskLists+0x74>)
 80036be:	f7fe fcb9 	bl	8002034 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80036c2:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <prvInitialiseTaskLists+0x78>)
 80036c4:	4a05      	ldr	r2, [pc, #20]	; (80036dc <prvInitialiseTaskLists+0x64>)
 80036c6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036c8:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <prvInitialiseTaskLists+0x7c>)
 80036ca:	4a05      	ldr	r2, [pc, #20]	; (80036e0 <prvInitialiseTaskLists+0x68>)
 80036cc:	601a      	str	r2, [r3, #0]
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000128 	.word	0x20000128
 80036dc:	2000018c 	.word	0x2000018c
 80036e0:	200001a0 	.word	0x200001a0
 80036e4:	200001bc 	.word	0x200001bc
 80036e8:	200001d0 	.word	0x200001d0
 80036ec:	200001e8 	.word	0x200001e8
 80036f0:	200001b4 	.word	0x200001b4
 80036f4:	200001b8 	.word	0x200001b8

080036f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036fe:	e019      	b.n	8003734 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003700:	f000 fe28 	bl	8004354 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003704:	4b10      	ldr	r3, [pc, #64]	; (8003748 <prvCheckTasksWaitingTermination+0x50>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3304      	adds	r3, #4
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe fd19 	bl	8002148 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003716:	4b0d      	ldr	r3, [pc, #52]	; (800374c <prvCheckTasksWaitingTermination+0x54>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3b01      	subs	r3, #1
 800371c:	4a0b      	ldr	r2, [pc, #44]	; (800374c <prvCheckTasksWaitingTermination+0x54>)
 800371e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <prvCheckTasksWaitingTermination+0x58>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3b01      	subs	r3, #1
 8003726:	4a0a      	ldr	r2, [pc, #40]	; (8003750 <prvCheckTasksWaitingTermination+0x58>)
 8003728:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800372a:	f000 fe43 	bl	80043b4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f810 	bl	8003754 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <prvCheckTasksWaitingTermination+0x58>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e1      	bne.n	8003700 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800373c:	bf00      	nop
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	200001d0 	.word	0x200001d0
 800374c:	200001fc 	.word	0x200001fc
 8003750:	200001e4 	.word	0x200001e4

08003754 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fffb 	bl	800475c <vPortFree>
                vPortFree( pxTCB );
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fff8 	bl	800475c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <prvResetNextTaskUnblockTime+0x30>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d104      	bne.n	800378c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003782:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <prvResetNextTaskUnblockTime+0x34>)
 8003784:	f04f 32ff 	mov.w	r2, #4294967295
 8003788:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800378a:	e005      	b.n	8003798 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <prvResetNextTaskUnblockTime+0x30>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <prvResetNextTaskUnblockTime+0x34>)
 8003796:	6013      	str	r3, [r2, #0]
}
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	200001b4 	.word	0x200001b4
 80037a8:	2000021c 	.word	0x2000021c

080037ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80037b2:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <xTaskGetSchedulerState+0x34>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d102      	bne.n	80037c0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80037ba:	2301      	movs	r3, #1
 80037bc:	607b      	str	r3, [r7, #4]
 80037be:	e008      	b.n	80037d2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037c0:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <xTaskGetSchedulerState+0x38>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d102      	bne.n	80037ce <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80037c8:	2302      	movs	r3, #2
 80037ca:	607b      	str	r3, [r7, #4]
 80037cc:	e001      	b.n	80037d2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80037ce:	2300      	movs	r3, #0
 80037d0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80037d2:	687b      	ldr	r3, [r7, #4]
    }
 80037d4:	4618      	mov	r0, r3
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	20000208 	.word	0x20000208
 80037e4:	20000224 	.word	0x20000224

080037e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d068      	beq.n	80038d0 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80037fe:	4b37      	ldr	r3, [pc, #220]	; (80038dc <xTaskPriorityDisinherit+0xf4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	429a      	cmp	r2, r3
 8003806:	d00a      	beq.n	800381e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	60fb      	str	r3, [r7, #12]
    }
 800381a:	bf00      	nop
 800381c:	e7fe      	b.n	800381c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10a      	bne.n	800383c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	60bb      	str	r3, [r7, #8]
    }
 8003838:	bf00      	nop
 800383a:	e7fe      	b.n	800383a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003840:	1e5a      	subs	r2, r3, #1
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384e:	429a      	cmp	r2, r3
 8003850:	d03e      	beq.n	80038d0 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d13a      	bne.n	80038d0 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	3304      	adds	r3, #4
 800385e:	4618      	mov	r0, r3
 8003860:	f7fe fc72 	bl	8002148 <uxListRemove>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	2201      	movs	r2, #1
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	43da      	mvns	r2, r3
 8003876:	4b1a      	ldr	r3, [pc, #104]	; (80038e0 <xTaskPriorityDisinherit+0xf8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4013      	ands	r3, r2
 800387c:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <xTaskPriorityDisinherit+0xf8>)
 800387e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4619      	mov	r1, r3
 8003884:	204a      	movs	r0, #74	; 0x4a
 8003886:	f002 f9c1 	bl	8005c0c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	f1c3 0205 	rsb	r2, r3, #5
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	2201      	movs	r2, #1
 80038a4:	409a      	lsls	r2, r3
 80038a6:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <xTaskPriorityDisinherit+0xf8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	4a0c      	ldr	r2, [pc, #48]	; (80038e0 <xTaskPriorityDisinherit+0xf8>)
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4a09      	ldr	r2, [pc, #36]	; (80038e4 <xTaskPriorityDisinherit+0xfc>)
 80038be:	441a      	add	r2, r3
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	3304      	adds	r3, #4
 80038c4:	4619      	mov	r1, r3
 80038c6:	4610      	mov	r0, r2
 80038c8:	f7fe fbe1 	bl	800208e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80038cc:	2301      	movs	r3, #1
 80038ce:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80038d0:	697b      	ldr	r3, [r7, #20]
    }
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000124 	.word	0x20000124
 80038e0:	20000204 	.word	0x20000204
 80038e4:	20000128 	.word	0x20000128

080038e8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80038f2:	4b32      	ldr	r3, [pc, #200]	; (80039bc <prvAddCurrentTaskToDelayedList+0xd4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038f8:	4b31      	ldr	r3, [pc, #196]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3304      	adds	r3, #4
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe fc22 	bl	8002148 <uxListRemove>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10b      	bne.n	8003922 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800390a:	4b2d      	ldr	r3, [pc, #180]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	2201      	movs	r2, #1
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43da      	mvns	r2, r3
 8003918:	4b2a      	ldr	r3, [pc, #168]	; (80039c4 <prvAddCurrentTaskToDelayedList+0xdc>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4013      	ands	r3, r2
 800391e:	4a29      	ldr	r2, [pc, #164]	; (80039c4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003920:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003928:	d110      	bne.n	800394c <prvAddCurrentTaskToDelayedList+0x64>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00d      	beq.n	800394c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003930:	4b23      	ldr	r3, [pc, #140]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	211b      	movs	r1, #27
 8003936:	4618      	mov	r0, r3
 8003938:	f002 ff2a 	bl	8006790 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800393c:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3304      	adds	r3, #4
 8003942:	4619      	mov	r1, r3
 8003944:	4820      	ldr	r0, [pc, #128]	; (80039c8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003946:	f7fe fba2 	bl	800208e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800394a:	e032      	b.n	80039b2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4413      	add	r3, r2
 8003952:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003954:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	429a      	cmp	r2, r3
 8003962:	d20f      	bcs.n	8003984 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003964:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2104      	movs	r1, #4
 800396a:	4618      	mov	r0, r3
 800396c:	f002 ff10 	bl	8006790 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003970:	4b16      	ldr	r3, [pc, #88]	; (80039cc <prvAddCurrentTaskToDelayedList+0xe4>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3304      	adds	r3, #4
 800397a:	4619      	mov	r1, r3
 800397c:	4610      	mov	r0, r2
 800397e:	f7fe fbaa 	bl	80020d6 <vListInsert>
}
 8003982:	e016      	b.n	80039b2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003984:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2104      	movs	r1, #4
 800398a:	4618      	mov	r0, r3
 800398c:	f002 ff00 	bl	8006790 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3304      	adds	r3, #4
 800399a:	4619      	mov	r1, r3
 800399c:	4610      	mov	r0, r2
 800399e:	f7fe fb9a 	bl	80020d6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80039a2:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <prvAddCurrentTaskToDelayedList+0xec>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d202      	bcs.n	80039b2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80039ac:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <prvAddCurrentTaskToDelayedList+0xec>)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	6013      	str	r3, [r2, #0]
}
 80039b2:	bf00      	nop
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000200 	.word	0x20000200
 80039c0:	20000124 	.word	0x20000124
 80039c4:	20000204 	.word	0x20000204
 80039c8:	200001e8 	.word	0x200001e8
 80039cc:	200001b8 	.word	0x200001b8
 80039d0:	200001b4 	.word	0x200001b4
 80039d4:	2000021c 	.word	0x2000021c

080039d8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80039de:	2300      	movs	r3, #0
 80039e0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80039e2:	f000 fad5 	bl	8003f90 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80039e6:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <xTimerCreateTimerTask+0x54>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80039ee:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <xTimerCreateTimerTask+0x58>)
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	2302      	movs	r3, #2
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	2300      	movs	r3, #0
 80039f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039fc:	490d      	ldr	r1, [pc, #52]	; (8003a34 <xTimerCreateTimerTask+0x5c>)
 80039fe:	480e      	ldr	r0, [pc, #56]	; (8003a38 <xTimerCreateTimerTask+0x60>)
 8003a00:	f7ff f926 	bl	8002c50 <xTaskCreate>
 8003a04:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	603b      	str	r3, [r7, #0]
    }
 8003a1e:	bf00      	nop
 8003a20:	e7fe      	b.n	8003a20 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003a22:	687b      	ldr	r3, [r7, #4]
    }
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20000258 	.word	0x20000258
 8003a30:	2000025c 	.word	0x2000025c
 8003a34:	080074fc 	.word	0x080074fc
 8003a38:	08003b71 	.word	0x08003b71

08003a3c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	; 0x28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <xTimerGenericCommand+0x2e>
        __asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	623b      	str	r3, [r7, #32]
    }
 8003a66:	bf00      	nop
 8003a68:	e7fe      	b.n	8003a68 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003a6a:	4b1a      	ldr	r3, [pc, #104]	; (8003ad4 <xTimerGenericCommand+0x98>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d02a      	beq.n	8003ac8 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b05      	cmp	r3, #5
 8003a82:	dc18      	bgt.n	8003ab6 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a84:	f7ff fe92 	bl	80037ac <xTaskGetSchedulerState>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d109      	bne.n	8003aa2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a8e:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <xTimerGenericCommand+0x98>)
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	f107 0114 	add.w	r1, r7, #20
 8003a96:	2300      	movs	r3, #0
 8003a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a9a:	f7fe fc6f 	bl	800237c <xQueueGenericSend>
 8003a9e:	6278      	str	r0, [r7, #36]	; 0x24
 8003aa0:	e012      	b.n	8003ac8 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003aa2:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <xTimerGenericCommand+0x98>)
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	f107 0114 	add.w	r1, r7, #20
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2200      	movs	r2, #0
 8003aae:	f7fe fc65 	bl	800237c <xQueueGenericSend>
 8003ab2:	6278      	str	r0, [r7, #36]	; 0x24
 8003ab4:	e008      	b.n	8003ac8 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ab6:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <xTimerGenericCommand+0x98>)
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	f107 0114 	add.w	r1, r7, #20
 8003abe:	2300      	movs	r3, #0
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	f7fe fd81 	bl	80025c8 <xQueueGenericSendFromISR>
 8003ac6:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003aca:	4618      	mov	r0, r3
 8003acc:	3728      	adds	r7, #40	; 0x28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000258 	.word	0x20000258

08003ad8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af02      	add	r7, sp, #8
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ae2:	4b22      	ldr	r3, [pc, #136]	; (8003b6c <prvProcessExpiredTimer+0x94>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	3304      	adds	r3, #4
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fe fb29 	bl	8002148 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d022      	beq.n	8003b4a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	699a      	ldr	r2, [r3, #24]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	18d1      	adds	r1, r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	6978      	ldr	r0, [r7, #20]
 8003b12:	f000 f8d1 	bl	8003cb8 <prvInsertTimerInActiveList>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01f      	beq.n	8003b5c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	2300      	movs	r3, #0
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	2100      	movs	r1, #0
 8003b26:	6978      	ldr	r0, [r7, #20]
 8003b28:	f7ff ff88 	bl	8003a3c <xTimerGenericCommand>
 8003b2c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d113      	bne.n	8003b5c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	60fb      	str	r3, [r7, #12]
    }
 8003b46:	bf00      	nop
 8003b48:	e7fe      	b.n	8003b48 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	6978      	ldr	r0, [r7, #20]
 8003b62:	4798      	blx	r3
    }
 8003b64:	bf00      	nop
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	20000250 	.word	0x20000250

08003b70 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b78:	f107 0308 	add.w	r3, r7, #8
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 f857 	bl	8003c30 <prvGetNextExpireTime>
 8003b82:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4619      	mov	r1, r3
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 f803 	bl	8003b94 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003b8e:	f000 f8d5 	bl	8003d3c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b92:	e7f1      	b.n	8003b78 <prvTimerTask+0x8>

08003b94 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003b9e:	f7ff fa1d 	bl	8002fdc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ba2:	f107 0308 	add.w	r3, r7, #8
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f866 	bl	8003c78 <prvSampleTimeNow>
 8003bac:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d130      	bne.n	8003c16 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <prvProcessTimerOrBlockTask+0x3c>
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d806      	bhi.n	8003bd0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003bc2:	f7ff fa19 	bl	8002ff8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003bc6:	68f9      	ldr	r1, [r7, #12]
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff ff85 	bl	8003ad8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003bce:	e024      	b.n	8003c1a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d008      	beq.n	8003be8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003bd6:	4b13      	ldr	r3, [pc, #76]	; (8003c24 <prvProcessTimerOrBlockTask+0x90>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <prvProcessTimerOrBlockTask+0x50>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <prvProcessTimerOrBlockTask+0x52>
 8003be4:	2300      	movs	r3, #0
 8003be6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003be8:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <prvProcessTimerOrBlockTask+0x94>)
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	f7fe fff7 	bl	8002be8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003bfa:	f7ff f9fd 	bl	8002ff8 <xTaskResumeAll>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <prvProcessTimerOrBlockTask+0x98>)
 8003c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	f3bf 8f6f 	isb	sy
    }
 8003c14:	e001      	b.n	8003c1a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003c16:	f7ff f9ef 	bl	8002ff8 <xTaskResumeAll>
    }
 8003c1a:	bf00      	nop
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000254 	.word	0x20000254
 8003c28:	20000258 	.word	0x20000258
 8003c2c:	e000ed04 	.word	0xe000ed04

08003c30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c38:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <prvGetNextExpireTime+0x44>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <prvGetNextExpireTime+0x16>
 8003c42:	2201      	movs	r2, #1
 8003c44:	e000      	b.n	8003c48 <prvGetNextExpireTime+0x18>
 8003c46:	2200      	movs	r2, #0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d105      	bne.n	8003c60 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <prvGetNextExpireTime+0x44>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	e001      	b.n	8003c64 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003c64:	68fb      	ldr	r3, [r7, #12]
    }
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20000250 	.word	0x20000250

08003c78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003c80:	f7ff fa5a 	bl	8003138 <xTaskGetTickCount>
 8003c84:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003c86:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <prvSampleTimeNow+0x3c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d205      	bcs.n	8003c9c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003c90:	f000 f91a 	bl	8003ec8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	e002      	b.n	8003ca2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003ca2:	4a04      	ldr	r2, [pc, #16]	; (8003cb4 <prvSampleTimeNow+0x3c>)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
    }
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000260 	.word	0x20000260

08003cb8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d812      	bhi.n	8003d04 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	1ad2      	subs	r2, r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d302      	bcc.n	8003cf2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003cec:	2301      	movs	r3, #1
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	e01b      	b.n	8003d2a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003cf2:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <prvInsertTimerInActiveList+0x7c>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	f7fe f9ea 	bl	80020d6 <vListInsert>
 8003d02:	e012      	b.n	8003d2a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d206      	bcs.n	8003d1a <prvInsertTimerInActiveList+0x62>
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d302      	bcc.n	8003d1a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003d14:	2301      	movs	r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e007      	b.n	8003d2a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d1a:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <prvInsertTimerInActiveList+0x80>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3304      	adds	r3, #4
 8003d22:	4619      	mov	r1, r3
 8003d24:	4610      	mov	r0, r2
 8003d26:	f7fe f9d6 	bl	80020d6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003d2a:	697b      	ldr	r3, [r7, #20]
    }
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20000254 	.word	0x20000254
 8003d38:	20000250 	.word	0x20000250

08003d3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08c      	sub	sp, #48	; 0x30
 8003d40:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d42:	e0ae      	b.n	8003ea2 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f2c0 80aa 	blt.w	8003ea0 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d004      	beq.n	8003d62 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fe f9f3 	bl	8002148 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d62:	1d3b      	adds	r3, r7, #4
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff ff87 	bl	8003c78 <prvSampleTimeNow>
 8003d6a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b09      	cmp	r3, #9
 8003d70:	f200 8097 	bhi.w	8003ea2 <prvProcessReceivedCommands+0x166>
 8003d74:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <prvProcessReceivedCommands+0x40>)
 8003d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7a:	bf00      	nop
 8003d7c:	08003da5 	.word	0x08003da5
 8003d80:	08003da5 	.word	0x08003da5
 8003d84:	08003da5 	.word	0x08003da5
 8003d88:	08003e19 	.word	0x08003e19
 8003d8c:	08003e2d 	.word	0x08003e2d
 8003d90:	08003e77 	.word	0x08003e77
 8003d94:	08003da5 	.word	0x08003da5
 8003d98:	08003da5 	.word	0x08003da5
 8003d9c:	08003e19 	.word	0x08003e19
 8003da0:	08003e2d 	.word	0x08003e2d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	18d1      	adds	r1, r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a3a      	ldr	r2, [r7, #32]
 8003dc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dc4:	f7ff ff78 	bl	8003cb8 <prvInsertTimerInActiveList>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d069      	beq.n	8003ea2 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dd4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d05e      	beq.n	8003ea2 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	441a      	add	r2, r3
 8003dec:	2300      	movs	r3, #0
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	2300      	movs	r3, #0
 8003df2:	2100      	movs	r1, #0
 8003df4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003df6:	f7ff fe21 	bl	8003a3c <xTimerGenericCommand>
 8003dfa:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d14f      	bne.n	8003ea2 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	61bb      	str	r3, [r7, #24]
    }
 8003e14:	bf00      	nop
 8003e16:	e7fe      	b.n	8003e16 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e1e:	f023 0301 	bic.w	r3, r3, #1
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003e2a:	e03a      	b.n	8003ea2 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e50:	f383 8811 	msr	BASEPRI, r3
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	617b      	str	r3, [r7, #20]
    }
 8003e5e:	bf00      	nop
 8003e60:	e7fe      	b.n	8003e60 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	18d1      	adds	r1, r2, r3
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	6a3a      	ldr	r2, [r7, #32]
 8003e6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e70:	f7ff ff22 	bl	8003cb8 <prvInsertTimerInActiveList>
                        break;
 8003e74:	e015      	b.n	8003ea2 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d103      	bne.n	8003e8c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003e84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e86:	f000 fc69 	bl	800475c <vPortFree>
 8003e8a:	e00a      	b.n	8003ea2 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e92:	f023 0301 	bic.w	r3, r3, #1
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003e9e:	e000      	b.n	8003ea2 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003ea0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ea2:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <prvProcessReceivedCommands+0x188>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f107 0108 	add.w	r1, r7, #8
 8003eaa:	2200      	movs	r2, #0
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fe fc49 	bl	8002744 <xQueueReceive>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f47f af45 	bne.w	8003d44 <prvProcessReceivedCommands+0x8>
        }
    }
 8003eba:	bf00      	nop
 8003ebc:	bf00      	nop
 8003ebe:	3728      	adds	r7, #40	; 0x28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	20000258 	.word	0x20000258

08003ec8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ece:	e048      	b.n	8003f62 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ed0:	4b2d      	ldr	r3, [pc, #180]	; (8003f88 <prvSwitchTimerLists+0xc0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eda:	4b2b      	ldr	r3, [pc, #172]	; (8003f88 <prvSwitchTimerLists+0xc0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fe f92d 	bl	8002148 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d02e      	beq.n	8003f62 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d90e      	bls.n	8003f34 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f22:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <prvSwitchTimerLists+0xc0>)
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	f7fe f8d2 	bl	80020d6 <vListInsert>
 8003f32:	e016      	b.n	8003f62 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f34:	2300      	movs	r3, #0
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f7ff fd7c 	bl	8003a3c <xTimerGenericCommand>
 8003f44:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10a      	bne.n	8003f62 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	603b      	str	r3, [r7, #0]
    }
 8003f5e:	bf00      	nop
 8003f60:	e7fe      	b.n	8003f60 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f62:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <prvSwitchTimerLists+0xc0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1b1      	bne.n	8003ed0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003f6c:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <prvSwitchTimerLists+0xc0>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003f72:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <prvSwitchTimerLists+0xc4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a04      	ldr	r2, [pc, #16]	; (8003f88 <prvSwitchTimerLists+0xc0>)
 8003f78:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003f7a:	4a04      	ldr	r2, [pc, #16]	; (8003f8c <prvSwitchTimerLists+0xc4>)
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	6013      	str	r3, [r2, #0]
    }
 8003f80:	bf00      	nop
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20000250 	.word	0x20000250
 8003f8c:	20000254 	.word	0x20000254

08003f90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003f94:	f000 f9de 	bl	8004354 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003f98:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <prvCheckForValidListAndQueue+0x54>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d11d      	bne.n	8003fdc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003fa0:	4811      	ldr	r0, [pc, #68]	; (8003fe8 <prvCheckForValidListAndQueue+0x58>)
 8003fa2:	f7fe f847 	bl	8002034 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003fa6:	4811      	ldr	r0, [pc, #68]	; (8003fec <prvCheckForValidListAndQueue+0x5c>)
 8003fa8:	f7fe f844 	bl	8002034 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003fac:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <prvCheckForValidListAndQueue+0x60>)
 8003fae:	4a0e      	ldr	r2, [pc, #56]	; (8003fe8 <prvCheckForValidListAndQueue+0x58>)
 8003fb0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003fb2:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <prvCheckForValidListAndQueue+0x64>)
 8003fb4:	4a0d      	ldr	r2, [pc, #52]	; (8003fec <prvCheckForValidListAndQueue+0x5c>)
 8003fb6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003fb8:	2200      	movs	r2, #0
 8003fba:	210c      	movs	r1, #12
 8003fbc:	200a      	movs	r0, #10
 8003fbe:	f7fe f955 	bl	800226c <xQueueGenericCreate>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4a07      	ldr	r2, [pc, #28]	; (8003fe4 <prvCheckForValidListAndQueue+0x54>)
 8003fc6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003fc8:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <prvCheckForValidListAndQueue+0x54>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003fd0:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <prvCheckForValidListAndQueue+0x54>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4908      	ldr	r1, [pc, #32]	; (8003ff8 <prvCheckForValidListAndQueue+0x68>)
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe fdd4 	bl	8002b84 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003fdc:	f000 f9ea 	bl	80043b4 <vPortExitCritical>
    }
 8003fe0:	bf00      	nop
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20000258 	.word	0x20000258
 8003fe8:	20000228 	.word	0x20000228
 8003fec:	2000023c 	.word	0x2000023c
 8003ff0:	20000250 	.word	0x20000250
 8003ff4:	20000254 	.word	0x20000254
 8003ff8:	08007504 	.word	0x08007504

08003ffc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3b04      	subs	r3, #4
 800400c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004014:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3b04      	subs	r3, #4
 800401a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f023 0201 	bic.w	r2, r3, #1
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3b04      	subs	r3, #4
 800402a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800402c:	4a0c      	ldr	r2, [pc, #48]	; (8004060 <pxPortInitialiseStack+0x64>)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3b14      	subs	r3, #20
 8004036:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3b04      	subs	r3, #4
 8004042:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f06f 0202 	mvn.w	r2, #2
 800404a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3b20      	subs	r3, #32
 8004050:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004052:	68fb      	ldr	r3, [r7, #12]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	08004065 	.word	0x08004065

08004064 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800406e:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <prvTaskExitError+0x54>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004076:	d00a      	beq.n	800408e <prvTaskExitError+0x2a>
        __asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	60fb      	str	r3, [r7, #12]
    }
 800408a:	bf00      	nop
 800408c:	e7fe      	b.n	800408c <prvTaskExitError+0x28>
        __asm volatile
 800408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	60bb      	str	r3, [r7, #8]
    }
 80040a0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80040a2:	bf00      	nop
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0fc      	beq.n	80040a4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80040aa:	bf00      	nop
 80040ac:	bf00      	nop
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	20000010 	.word	0x20000010
 80040bc:	00000000 	.word	0x00000000

080040c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <pxCurrentTCBConst2>)
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	6808      	ldr	r0, [r1, #0]
 80040c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ca:	f380 8809 	msr	PSP, r0
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f380 8811 	msr	BASEPRI, r0
 80040da:	4770      	bx	lr
 80040dc:	f3af 8000 	nop.w

080040e0 <pxCurrentTCBConst2>:
 80040e0:	20000124 	.word	0x20000124
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop

080040e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80040e8:	4808      	ldr	r0, [pc, #32]	; (800410c <prvPortStartFirstTask+0x24>)
 80040ea:	6800      	ldr	r0, [r0, #0]
 80040ec:	6800      	ldr	r0, [r0, #0]
 80040ee:	f380 8808 	msr	MSP, r0
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f380 8814 	msr	CONTROL, r0
 80040fa:	b662      	cpsie	i
 80040fc:	b661      	cpsie	f
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	df00      	svc	0
 8004108:	bf00      	nop
 800410a:	0000      	.short	0x0000
 800410c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop

08004114 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800411a:	4b46      	ldr	r3, [pc, #280]	; (8004234 <xPortStartScheduler+0x120>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a46      	ldr	r2, [pc, #280]	; (8004238 <xPortStartScheduler+0x124>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d10a      	bne.n	800413a <xPortStartScheduler+0x26>
        __asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	613b      	str	r3, [r7, #16]
    }
 8004136:	bf00      	nop
 8004138:	e7fe      	b.n	8004138 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800413a:	4b3e      	ldr	r3, [pc, #248]	; (8004234 <xPortStartScheduler+0x120>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a3f      	ldr	r2, [pc, #252]	; (800423c <xPortStartScheduler+0x128>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d10a      	bne.n	800415a <xPortStartScheduler+0x46>
        __asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	60fb      	str	r3, [r7, #12]
    }
 8004156:	bf00      	nop
 8004158:	e7fe      	b.n	8004158 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800415a:	4b39      	ldr	r3, [pc, #228]	; (8004240 <xPortStartScheduler+0x12c>)
 800415c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	22ff      	movs	r2, #255	; 0xff
 800416a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800417c:	b2da      	uxtb	r2, r3
 800417e:	4b31      	ldr	r3, [pc, #196]	; (8004244 <xPortStartScheduler+0x130>)
 8004180:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004182:	4b31      	ldr	r3, [pc, #196]	; (8004248 <xPortStartScheduler+0x134>)
 8004184:	2207      	movs	r2, #7
 8004186:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004188:	e009      	b.n	800419e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800418a:	4b2f      	ldr	r3, [pc, #188]	; (8004248 <xPortStartScheduler+0x134>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3b01      	subs	r3, #1
 8004190:	4a2d      	ldr	r2, [pc, #180]	; (8004248 <xPortStartScheduler+0x134>)
 8004192:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	b2db      	uxtb	r3, r3
 800419c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a6:	2b80      	cmp	r3, #128	; 0x80
 80041a8:	d0ef      	beq.n	800418a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041aa:	4b27      	ldr	r3, [pc, #156]	; (8004248 <xPortStartScheduler+0x134>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f1c3 0307 	rsb	r3, r3, #7
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d00a      	beq.n	80041cc <xPortStartScheduler+0xb8>
        __asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	60bb      	str	r3, [r7, #8]
    }
 80041c8:	bf00      	nop
 80041ca:	e7fe      	b.n	80041ca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041cc:	4b1e      	ldr	r3, [pc, #120]	; (8004248 <xPortStartScheduler+0x134>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	4a1d      	ldr	r2, [pc, #116]	; (8004248 <xPortStartScheduler+0x134>)
 80041d4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041d6:	4b1c      	ldr	r3, [pc, #112]	; (8004248 <xPortStartScheduler+0x134>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041de:	4a1a      	ldr	r2, [pc, #104]	; (8004248 <xPortStartScheduler+0x134>)
 80041e0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80041ea:	4b18      	ldr	r3, [pc, #96]	; (800424c <xPortStartScheduler+0x138>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a17      	ldr	r2, [pc, #92]	; (800424c <xPortStartScheduler+0x138>)
 80041f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80041f6:	4b15      	ldr	r3, [pc, #84]	; (800424c <xPortStartScheduler+0x138>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a14      	ldr	r2, [pc, #80]	; (800424c <xPortStartScheduler+0x138>)
 80041fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004200:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004202:	f000 f963 	bl	80044cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004206:	4b12      	ldr	r3, [pc, #72]	; (8004250 <xPortStartScheduler+0x13c>)
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800420c:	f000 f97a 	bl	8004504 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004210:	4b10      	ldr	r3, [pc, #64]	; (8004254 <xPortStartScheduler+0x140>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a0f      	ldr	r2, [pc, #60]	; (8004254 <xPortStartScheduler+0x140>)
 8004216:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800421a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800421c:	f7ff ff64 	bl	80040e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004220:	f7ff f868 	bl	80032f4 <vTaskSwitchContext>
    prvTaskExitError();
 8004224:	f7ff ff1e 	bl	8004064 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	e000ed00 	.word	0xe000ed00
 8004238:	410fc271 	.word	0x410fc271
 800423c:	410fc270 	.word	0x410fc270
 8004240:	e000e400 	.word	0xe000e400
 8004244:	20000264 	.word	0x20000264
 8004248:	20000268 	.word	0x20000268
 800424c:	e000ed20 	.word	0xe000ed20
 8004250:	20000010 	.word	0x20000010
 8004254:	e000ef34 	.word	0xe000ef34

08004258 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800425e:	4b37      	ldr	r3, [pc, #220]	; (800433c <vInitPrioGroupValue+0xe4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a37      	ldr	r2, [pc, #220]	; (8004340 <vInitPrioGroupValue+0xe8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d10a      	bne.n	800427e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	613b      	str	r3, [r7, #16]
    }
 800427a:	bf00      	nop
 800427c:	e7fe      	b.n	800427c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800427e:	4b2f      	ldr	r3, [pc, #188]	; (800433c <vInitPrioGroupValue+0xe4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a30      	ldr	r2, [pc, #192]	; (8004344 <vInitPrioGroupValue+0xec>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d10a      	bne.n	800429e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	60fb      	str	r3, [r7, #12]
    }
 800429a:	bf00      	nop
 800429c:	e7fe      	b.n	800429c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800429e:	4b2a      	ldr	r3, [pc, #168]	; (8004348 <vInitPrioGroupValue+0xf0>)
 80042a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	22ff      	movs	r2, #255	; 0xff
 80042ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	4b22      	ldr	r3, [pc, #136]	; (800434c <vInitPrioGroupValue+0xf4>)
 80042c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042c6:	4b22      	ldr	r3, [pc, #136]	; (8004350 <vInitPrioGroupValue+0xf8>)
 80042c8:	2207      	movs	r2, #7
 80042ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042cc:	e009      	b.n	80042e2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80042ce:	4b20      	ldr	r3, [pc, #128]	; (8004350 <vInitPrioGroupValue+0xf8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <vInitPrioGroupValue+0xf8>)
 80042d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ea:	2b80      	cmp	r3, #128	; 0x80
 80042ec:	d0ef      	beq.n	80042ce <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042ee:	4b18      	ldr	r3, [pc, #96]	; (8004350 <vInitPrioGroupValue+0xf8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f1c3 0307 	rsb	r3, r3, #7
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d00a      	beq.n	8004310 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	60bb      	str	r3, [r7, #8]
    }
 800430c:	bf00      	nop
 800430e:	e7fe      	b.n	800430e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004310:	4b0f      	ldr	r3, [pc, #60]	; (8004350 <vInitPrioGroupValue+0xf8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	4a0e      	ldr	r2, [pc, #56]	; (8004350 <vInitPrioGroupValue+0xf8>)
 8004318:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800431a:	4b0d      	ldr	r3, [pc, #52]	; (8004350 <vInitPrioGroupValue+0xf8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004322:	4a0b      	ldr	r2, [pc, #44]	; (8004350 <vInitPrioGroupValue+0xf8>)
 8004324:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	b2da      	uxtb	r2, r3
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800432e:	bf00      	nop
 8004330:	371c      	adds	r7, #28
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	e000ed00 	.word	0xe000ed00
 8004340:	410fc271 	.word	0x410fc271
 8004344:	410fc270 	.word	0x410fc270
 8004348:	e000e400 	.word	0xe000e400
 800434c:	20000264 	.word	0x20000264
 8004350:	20000268 	.word	0x20000268

08004354 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
        __asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	607b      	str	r3, [r7, #4]
    }
 800436c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800436e:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <vPortEnterCritical+0x58>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3301      	adds	r3, #1
 8004374:	4a0d      	ldr	r2, [pc, #52]	; (80043ac <vPortEnterCritical+0x58>)
 8004376:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004378:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <vPortEnterCritical+0x58>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d10f      	bne.n	80043a0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <vPortEnterCritical+0x5c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <vPortEnterCritical+0x4c>
        __asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	603b      	str	r3, [r7, #0]
    }
 800439c:	bf00      	nop
 800439e:	e7fe      	b.n	800439e <vPortEnterCritical+0x4a>
    }
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	20000010 	.word	0x20000010
 80043b0:	e000ed04 	.word	0xe000ed04

080043b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80043ba:	4b12      	ldr	r3, [pc, #72]	; (8004404 <vPortExitCritical+0x50>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10a      	bne.n	80043d8 <vPortExitCritical+0x24>
        __asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	607b      	str	r3, [r7, #4]
    }
 80043d4:	bf00      	nop
 80043d6:	e7fe      	b.n	80043d6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80043d8:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <vPortExitCritical+0x50>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3b01      	subs	r3, #1
 80043de:	4a09      	ldr	r2, [pc, #36]	; (8004404 <vPortExitCritical+0x50>)
 80043e0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80043e2:	4b08      	ldr	r3, [pc, #32]	; (8004404 <vPortExitCritical+0x50>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d105      	bne.n	80043f6 <vPortExitCritical+0x42>
 80043ea:	2300      	movs	r3, #0
 80043ec:	603b      	str	r3, [r7, #0]
        __asm volatile
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	f383 8811 	msr	BASEPRI, r3
    }
 80043f4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000010 	.word	0x20000010
	...

08004410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004410:	f3ef 8009 	mrs	r0, PSP
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	4b15      	ldr	r3, [pc, #84]	; (8004470 <pxCurrentTCBConst>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	f01e 0f10 	tst.w	lr, #16
 8004420:	bf08      	it	eq
 8004422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800442a:	6010      	str	r0, [r2, #0]
 800442c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004434:	f380 8811 	msr	BASEPRI, r0
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f7fe ff58 	bl	80032f4 <vTaskSwitchContext>
 8004444:	f04f 0000 	mov.w	r0, #0
 8004448:	f380 8811 	msr	BASEPRI, r0
 800444c:	bc09      	pop	{r0, r3}
 800444e:	6819      	ldr	r1, [r3, #0]
 8004450:	6808      	ldr	r0, [r1, #0]
 8004452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004456:	f01e 0f10 	tst.w	lr, #16
 800445a:	bf08      	it	eq
 800445c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004460:	f380 8809 	msr	PSP, r0
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	f3af 8000 	nop.w

08004470 <pxCurrentTCBConst>:
 8004470:	20000124 	.word	0x20000124
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop

08004478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
        __asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	607b      	str	r3, [r7, #4]
    }
 8004490:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004492:	f002 f821 	bl	80064d8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004496:	f7fe fe71 	bl	800317c <xTaskIncrementTick>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d006      	beq.n	80044ae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80044a0:	f002 f878 	bl	8006594 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044a4:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <SysTick_Handler+0x50>)
 80044a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	e001      	b.n	80044b2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80044ae:	f002 f855 	bl	800655c <SEGGER_SYSVIEW_RecordExitISR>
 80044b2:	2300      	movs	r3, #0
 80044b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	f383 8811 	msr	BASEPRI, r3
    }
 80044bc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80044be:	bf00      	nop
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	e000ed04 	.word	0xe000ed04

080044cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044d0:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <vPortSetupTimerInterrupt+0x28>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044d6:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <vPortSetupTimerInterrupt+0x2c>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044dc:	4b07      	ldr	r3, [pc, #28]	; (80044fc <vPortSetupTimerInterrupt+0x30>)
 80044de:	4a08      	ldr	r2, [pc, #32]	; (8004500 <vPortSetupTimerInterrupt+0x34>)
 80044e0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044e2:	4b04      	ldr	r3, [pc, #16]	; (80044f4 <vPortSetupTimerInterrupt+0x28>)
 80044e4:	2207      	movs	r2, #7
 80044e6:	601a      	str	r2, [r3, #0]
}
 80044e8:	bf00      	nop
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	e000e010 	.word	0xe000e010
 80044f8:	e000e018 	.word	0xe000e018
 80044fc:	e000e014 	.word	0xe000e014
 8004500:	0001387f 	.word	0x0001387f

08004504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004514 <vPortEnableVFP+0x10>
 8004508:	6801      	ldr	r1, [r0, #0]
 800450a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800450e:	6001      	str	r1, [r0, #0]
 8004510:	4770      	bx	lr
 8004512:	0000      	.short	0x0000
 8004514:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004518:	bf00      	nop
 800451a:	bf00      	nop

0800451c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004522:	f3ef 8305 	mrs	r3, IPSR
 8004526:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b0f      	cmp	r3, #15
 800452c:	d914      	bls.n	8004558 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800452e:	4a17      	ldr	r2, [pc, #92]	; (800458c <vPortValidateInterruptPriority+0x70>)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4413      	add	r3, r2
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004538:	4b15      	ldr	r3, [pc, #84]	; (8004590 <vPortValidateInterruptPriority+0x74>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	7afa      	ldrb	r2, [r7, #11]
 800453e:	429a      	cmp	r2, r3
 8004540:	d20a      	bcs.n	8004558 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	607b      	str	r3, [r7, #4]
    }
 8004554:	bf00      	nop
 8004556:	e7fe      	b.n	8004556 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004558:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <vPortValidateInterruptPriority+0x78>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004560:	4b0d      	ldr	r3, [pc, #52]	; (8004598 <vPortValidateInterruptPriority+0x7c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d90a      	bls.n	800457e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	603b      	str	r3, [r7, #0]
    }
 800457a:	bf00      	nop
 800457c:	e7fe      	b.n	800457c <vPortValidateInterruptPriority+0x60>
    }
 800457e:	bf00      	nop
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	e000e3f0 	.word	0xe000e3f0
 8004590:	20000264 	.word	0x20000264
 8004594:	e000ed0c 	.word	0xe000ed0c
 8004598:	20000268 	.word	0x20000268

0800459c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08a      	sub	sp, #40	; 0x28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80045a8:	f7fe fd18 	bl	8002fdc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80045ac:	4b65      	ldr	r3, [pc, #404]	; (8004744 <pvPortMalloc+0x1a8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80045b4:	f000 f934 	bl	8004820 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045b8:	4b63      	ldr	r3, [pc, #396]	; (8004748 <pvPortMalloc+0x1ac>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4013      	ands	r3, r2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f040 80a7 	bne.w	8004714 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d02d      	beq.n	8004628 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80045cc:	2208      	movs	r2, #8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d227      	bcs.n	8004628 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80045d8:	2208      	movs	r2, #8
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4413      	add	r3, r2
 80045de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d021      	beq.n	800462e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f023 0307 	bic.w	r3, r3, #7
 80045f0:	3308      	adds	r3, #8
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d214      	bcs.n	8004622 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f023 0307 	bic.w	r3, r3, #7
 80045fe:	3308      	adds	r3, #8
 8004600:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	2b00      	cmp	r3, #0
 800460a:	d010      	beq.n	800462e <pvPortMalloc+0x92>
        __asm volatile
 800460c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	617b      	str	r3, [r7, #20]
    }
 800461e:	bf00      	nop
 8004620:	e7fe      	b.n	8004620 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004622:	2300      	movs	r3, #0
 8004624:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004626:	e002      	b.n	800462e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	607b      	str	r3, [r7, #4]
 800462c:	e000      	b.n	8004630 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800462e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d06e      	beq.n	8004714 <pvPortMalloc+0x178>
 8004636:	4b45      	ldr	r3, [pc, #276]	; (800474c <pvPortMalloc+0x1b0>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	429a      	cmp	r2, r3
 800463e:	d869      	bhi.n	8004714 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004640:	4b43      	ldr	r3, [pc, #268]	; (8004750 <pvPortMalloc+0x1b4>)
 8004642:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004644:	4b42      	ldr	r3, [pc, #264]	; (8004750 <pvPortMalloc+0x1b4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800464a:	e004      	b.n	8004656 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	429a      	cmp	r2, r3
 800465e:	d903      	bls.n	8004668 <pvPortMalloc+0xcc>
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f1      	bne.n	800464c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004668:	4b36      	ldr	r3, [pc, #216]	; (8004744 <pvPortMalloc+0x1a8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466e:	429a      	cmp	r2, r3
 8004670:	d050      	beq.n	8004714 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2208      	movs	r2, #8
 8004678:	4413      	add	r3, r2
 800467a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	1ad2      	subs	r2, r2, r3
 800468c:	2308      	movs	r3, #8
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	429a      	cmp	r2, r3
 8004692:	d91f      	bls.n	80046d4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4413      	add	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <pvPortMalloc+0x120>
        __asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	613b      	str	r3, [r7, #16]
    }
 80046b8:	bf00      	nop
 80046ba:	e7fe      	b.n	80046ba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	1ad2      	subs	r2, r2, r3
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046ce:	69b8      	ldr	r0, [r7, #24]
 80046d0:	f000 f908 	bl	80048e4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046d4:	4b1d      	ldr	r3, [pc, #116]	; (800474c <pvPortMalloc+0x1b0>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	4a1b      	ldr	r2, [pc, #108]	; (800474c <pvPortMalloc+0x1b0>)
 80046e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046e2:	4b1a      	ldr	r3, [pc, #104]	; (800474c <pvPortMalloc+0x1b0>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <pvPortMalloc+0x1b8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d203      	bcs.n	80046f6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046ee:	4b17      	ldr	r3, [pc, #92]	; (800474c <pvPortMalloc+0x1b0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a18      	ldr	r2, [pc, #96]	; (8004754 <pvPortMalloc+0x1b8>)
 80046f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	4b13      	ldr	r3, [pc, #76]	; (8004748 <pvPortMalloc+0x1ac>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	431a      	orrs	r2, r3
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800470a:	4b13      	ldr	r3, [pc, #76]	; (8004758 <pvPortMalloc+0x1bc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3301      	adds	r3, #1
 8004710:	4a11      	ldr	r2, [pc, #68]	; (8004758 <pvPortMalloc+0x1bc>)
 8004712:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004714:	f7fe fc70 	bl	8002ff8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <pvPortMalloc+0x19c>
        __asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	60fb      	str	r3, [r7, #12]
    }
 8004734:	bf00      	nop
 8004736:	e7fe      	b.n	8004736 <pvPortMalloc+0x19a>
    return pvReturn;
 8004738:	69fb      	ldr	r3, [r7, #28]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3728      	adds	r7, #40	; 0x28
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20012e74 	.word	0x20012e74
 8004748:	20012e88 	.word	0x20012e88
 800474c:	20012e78 	.word	0x20012e78
 8004750:	20012e6c 	.word	0x20012e6c
 8004754:	20012e7c 	.word	0x20012e7c
 8004758:	20012e80 	.word	0x20012e80

0800475c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d04d      	beq.n	800480a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800476e:	2308      	movs	r3, #8
 8004770:	425b      	negs	r3, r3
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4413      	add	r3, r2
 8004776:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	4b24      	ldr	r3, [pc, #144]	; (8004814 <vPortFree+0xb8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4013      	ands	r3, r2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <vPortFree+0x44>
        __asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	60fb      	str	r3, [r7, #12]
    }
 800479c:	bf00      	nop
 800479e:	e7fe      	b.n	800479e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <vPortFree+0x62>
        __asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	60bb      	str	r3, [r7, #8]
    }
 80047ba:	bf00      	nop
 80047bc:	e7fe      	b.n	80047bc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	4b14      	ldr	r3, [pc, #80]	; (8004814 <vPortFree+0xb8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01e      	beq.n	800480a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d11a      	bne.n	800480a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <vPortFree+0xb8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	43db      	mvns	r3, r3
 80047de:	401a      	ands	r2, r3
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80047e4:	f7fe fbfa 	bl	8002fdc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <vPortFree+0xbc>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4413      	add	r3, r2
 80047f2:	4a09      	ldr	r2, [pc, #36]	; (8004818 <vPortFree+0xbc>)
 80047f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047f6:	6938      	ldr	r0, [r7, #16]
 80047f8:	f000 f874 	bl	80048e4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80047fc:	4b07      	ldr	r3, [pc, #28]	; (800481c <vPortFree+0xc0>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3301      	adds	r3, #1
 8004802:	4a06      	ldr	r2, [pc, #24]	; (800481c <vPortFree+0xc0>)
 8004804:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004806:	f7fe fbf7 	bl	8002ff8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800480a:	bf00      	nop
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20012e88 	.word	0x20012e88
 8004818:	20012e78 	.word	0x20012e78
 800481c:	20012e84 	.word	0x20012e84

08004820 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004826:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800482a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800482c:	4b27      	ldr	r3, [pc, #156]	; (80048cc <prvHeapInit+0xac>)
 800482e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00c      	beq.n	8004854 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	3307      	adds	r3, #7
 800483e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0307 	bic.w	r3, r3, #7
 8004846:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	4a1f      	ldr	r2, [pc, #124]	; (80048cc <prvHeapInit+0xac>)
 8004850:	4413      	add	r3, r2
 8004852:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004858:	4a1d      	ldr	r2, [pc, #116]	; (80048d0 <prvHeapInit+0xb0>)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800485e:	4b1c      	ldr	r3, [pc, #112]	; (80048d0 <prvHeapInit+0xb0>)
 8004860:	2200      	movs	r2, #0
 8004862:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	4413      	add	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800486c:	2208      	movs	r2, #8
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	1a9b      	subs	r3, r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0307 	bic.w	r3, r3, #7
 800487a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4a15      	ldr	r2, [pc, #84]	; (80048d4 <prvHeapInit+0xb4>)
 8004880:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004882:	4b14      	ldr	r3, [pc, #80]	; (80048d4 <prvHeapInit+0xb4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2200      	movs	r2, #0
 8004888:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800488a:	4b12      	ldr	r3, [pc, #72]	; (80048d4 <prvHeapInit+0xb4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	1ad2      	subs	r2, r2, r3
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048a0:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <prvHeapInit+0xb4>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <prvHeapInit+0xb8>)
 80048ae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	4a09      	ldr	r2, [pc, #36]	; (80048dc <prvHeapInit+0xbc>)
 80048b6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048b8:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <prvHeapInit+0xc0>)
 80048ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048be:	601a      	str	r2, [r3, #0]
}
 80048c0:	bf00      	nop
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	2000026c 	.word	0x2000026c
 80048d0:	20012e6c 	.word	0x20012e6c
 80048d4:	20012e74 	.word	0x20012e74
 80048d8:	20012e7c 	.word	0x20012e7c
 80048dc:	20012e78 	.word	0x20012e78
 80048e0:	20012e88 	.word	0x20012e88

080048e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048ec:	4b28      	ldr	r3, [pc, #160]	; (8004990 <prvInsertBlockIntoFreeList+0xac>)
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	e002      	b.n	80048f8 <prvInsertBlockIntoFreeList+0x14>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d8f7      	bhi.n	80048f2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	4413      	add	r3, r2
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	429a      	cmp	r2, r3
 8004912:	d108      	bne.n	8004926 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	441a      	add	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	441a      	add	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d118      	bne.n	800496c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	4b15      	ldr	r3, [pc, #84]	; (8004994 <prvInsertBlockIntoFreeList+0xb0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d00d      	beq.n	8004962 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	441a      	add	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	e008      	b.n	8004974 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004962:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <prvInsertBlockIntoFreeList+0xb0>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	e003      	b.n	8004974 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	429a      	cmp	r2, r3
 800497a:	d002      	beq.n	8004982 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004982:	bf00      	nop
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	20012e6c 	.word	0x20012e6c
 8004994:	20012e74 	.word	0x20012e74

08004998 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800499c:	4803      	ldr	r0, [pc, #12]	; (80049ac <_cbSendSystemDesc+0x14>)
 800499e:	f001 fd45 	bl	800642c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80049a2:	4803      	ldr	r0, [pc, #12]	; (80049b0 <_cbSendSystemDesc+0x18>)
 80049a4:	f001 fd42 	bl	800642c <SEGGER_SYSVIEW_SendSysDesc>
}
 80049a8:	bf00      	nop
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	0800750c 	.word	0x0800750c
 80049b0:	08007548 	.word	0x08007548

080049b4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80049b8:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <SEGGER_SYSVIEW_Conf+0x1c>)
 80049ba:	4a06      	ldr	r2, [pc, #24]	; (80049d4 <SEGGER_SYSVIEW_Conf+0x20>)
 80049bc:	4906      	ldr	r1, [pc, #24]	; (80049d8 <SEGGER_SYSVIEW_Conf+0x24>)
 80049be:	4806      	ldr	r0, [pc, #24]	; (80049d8 <SEGGER_SYSVIEW_Conf+0x24>)
 80049c0:	f001 f8b2 	bl	8005b28 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80049c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80049c8:	f001 f8f2 	bl	8005bb0 <SEGGER_SYSVIEW_SetRAMBase>
}
 80049cc:	bf00      	nop
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	08004999 	.word	0x08004999
 80049d4:	08007618 	.word	0x08007618
 80049d8:	04c4b400 	.word	0x04c4b400

080049dc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80049dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049de:	b085      	sub	sp, #20
 80049e0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80049e2:	2300      	movs	r3, #0
 80049e4:	607b      	str	r3, [r7, #4]
 80049e6:	e033      	b.n	8004a50 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80049e8:	491e      	ldr	r1, [pc, #120]	; (8004a64 <_cbSendTaskList+0x88>)
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	6818      	ldr	r0, [r3, #0]
 80049f8:	491a      	ldr	r1, [pc, #104]	; (8004a64 <_cbSendTaskList+0x88>)
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	3304      	adds	r3, #4
 8004a08:	6819      	ldr	r1, [r3, #0]
 8004a0a:	4c16      	ldr	r4, [pc, #88]	; (8004a64 <_cbSendTaskList+0x88>)
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4423      	add	r3, r4
 8004a18:	3308      	adds	r3, #8
 8004a1a:	681c      	ldr	r4, [r3, #0]
 8004a1c:	4d11      	ldr	r5, [pc, #68]	; (8004a64 <_cbSendTaskList+0x88>)
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	442b      	add	r3, r5
 8004a2a:	330c      	adds	r3, #12
 8004a2c:	681d      	ldr	r5, [r3, #0]
 8004a2e:	4e0d      	ldr	r6, [pc, #52]	; (8004a64 <_cbSendTaskList+0x88>)
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4433      	add	r3, r6
 8004a3c:	3310      	adds	r3, #16
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	462b      	mov	r3, r5
 8004a44:	4622      	mov	r2, r4
 8004a46:	f000 f8bd 	bl	8004bc4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	607b      	str	r3, [r7, #4]
 8004a50:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <_cbSendTaskList+0x8c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d3c6      	bcc.n	80049e8 <_cbSendTaskList+0xc>
  }
}
 8004a5a:	bf00      	nop
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a64:	20012e8c 	.word	0x20012e8c
 8004a68:	20012f2c 	.word	0x20012f2c

08004a6c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004a74:	f7fe fb70 	bl	8003158 <xTaskGetTickCountFromISR>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	469a      	mov	sl, r3
 8004a7e:	4693      	mov	fp, r2
 8004a80:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004a84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	f04f 0a00 	mov.w	sl, #0
 8004a90:	f04f 0b00 	mov.w	fp, #0
 8004a94:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004a98:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004a9c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004aa0:	4652      	mov	r2, sl
 8004aa2:	465b      	mov	r3, fp
 8004aa4:	1a14      	subs	r4, r2, r0
 8004aa6:	eb63 0501 	sbc.w	r5, r3, r1
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	00ab      	lsls	r3, r5, #2
 8004ab4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004ab8:	00a2      	lsls	r2, r4, #2
 8004aba:	4614      	mov	r4, r2
 8004abc:	461d      	mov	r5, r3
 8004abe:	eb14 0800 	adds.w	r8, r4, r0
 8004ac2:	eb45 0901 	adc.w	r9, r5, r1
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ad2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ad6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ada:	4690      	mov	r8, r2
 8004adc:	4699      	mov	r9, r3
 8004ade:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004ae2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	4619      	mov	r1, r3
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004af4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004b02:	2205      	movs	r2, #5
 8004b04:	492b      	ldr	r1, [pc, #172]	; (8004bb4 <SYSVIEW_AddTask+0xc0>)
 8004b06:	68b8      	ldr	r0, [r7, #8]
 8004b08:	f002 f822 	bl	8006b50 <memcmp>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d04b      	beq.n	8004baa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004b12:	4b29      	ldr	r3, [pc, #164]	; (8004bb8 <SYSVIEW_AddTask+0xc4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b07      	cmp	r3, #7
 8004b18:	d903      	bls.n	8004b22 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004b1a:	4828      	ldr	r0, [pc, #160]	; (8004bbc <SYSVIEW_AddTask+0xc8>)
 8004b1c:	f001 ff98 	bl	8006a50 <SEGGER_SYSVIEW_Warn>
    return;
 8004b20:	e044      	b.n	8004bac <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004b22:	4b25      	ldr	r3, [pc, #148]	; (8004bb8 <SYSVIEW_AddTask+0xc4>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	4926      	ldr	r1, [pc, #152]	; (8004bc0 <SYSVIEW_AddTask+0xcc>)
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	440b      	add	r3, r1
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004b36:	4b20      	ldr	r3, [pc, #128]	; (8004bb8 <SYSVIEW_AddTask+0xc4>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4921      	ldr	r1, [pc, #132]	; (8004bc0 <SYSVIEW_AddTask+0xcc>)
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	440b      	add	r3, r1
 8004b46:	3304      	adds	r3, #4
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004b4c:	4b1a      	ldr	r3, [pc, #104]	; (8004bb8 <SYSVIEW_AddTask+0xc4>)
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	491b      	ldr	r1, [pc, #108]	; (8004bc0 <SYSVIEW_AddTask+0xcc>)
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004b62:	4b15      	ldr	r3, [pc, #84]	; (8004bb8 <SYSVIEW_AddTask+0xc4>)
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	4916      	ldr	r1, [pc, #88]	; (8004bc0 <SYSVIEW_AddTask+0xcc>)
 8004b68:	4613      	mov	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	440b      	add	r3, r1
 8004b72:	330c      	adds	r3, #12
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004b78:	4b0f      	ldr	r3, [pc, #60]	; (8004bb8 <SYSVIEW_AddTask+0xc4>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	4910      	ldr	r1, [pc, #64]	; (8004bc0 <SYSVIEW_AddTask+0xcc>)
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	440b      	add	r3, r1
 8004b88:	3310      	adds	r3, #16
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004b8e:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <SYSVIEW_AddTask+0xc4>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3301      	adds	r3, #1
 8004b94:	4a08      	ldr	r2, [pc, #32]	; (8004bb8 <SYSVIEW_AddTask+0xc4>)
 8004b96:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 f80e 	bl	8004bc4 <SYSVIEW_SendTaskInfo>
 8004ba8:	e000      	b.n	8004bac <SYSVIEW_AddTask+0xb8>
    return;
 8004baa:	bf00      	nop

}
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	08007558 	.word	0x08007558
 8004bb8:	20012f2c 	.word	0x20012f2c
 8004bbc:	08007560 	.word	0x08007560
 8004bc0:	20012e8c 	.word	0x20012e8c

08004bc4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08a      	sub	sp, #40	; 0x28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004bd2:	f107 0314 	add.w	r3, r7, #20
 8004bd6:	2214      	movs	r2, #20
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f001 ffd6 	bl	8006b8c <memset>
  TaskInfo.TaskID     = TaskID;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004bf4:	f107 0314 	add.w	r3, r7, #20
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f001 fb1f 	bl	800623c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004bfe:	bf00      	nop
 8004c00:	3728      	adds	r7, #40	; 0x28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004c0e:	4b24      	ldr	r3, [pc, #144]	; (8004ca0 <_DoInit+0x98>)
 8004c10:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2203      	movs	r2, #3
 8004c16:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a20      	ldr	r2, [pc, #128]	; (8004ca4 <_DoInit+0x9c>)
 8004c22:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a20      	ldr	r2, [pc, #128]	; (8004ca8 <_DoInit+0xa0>)
 8004c28:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c30:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a17      	ldr	r2, [pc, #92]	; (8004ca4 <_DoInit+0x9c>)
 8004c48:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a17      	ldr	r2, [pc, #92]	; (8004cac <_DoInit+0xa4>)
 8004c4e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2210      	movs	r2, #16
 8004c54:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3307      	adds	r3, #7
 8004c6c:	4a10      	ldr	r2, [pc, #64]	; (8004cb0 <_DoInit+0xa8>)
 8004c6e:	6810      	ldr	r0, [r2, #0]
 8004c70:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c72:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a0e      	ldr	r2, [pc, #56]	; (8004cb4 <_DoInit+0xac>)
 8004c7a:	6810      	ldr	r0, [r2, #0]
 8004c7c:	6018      	str	r0, [r3, #0]
 8004c7e:	8891      	ldrh	r1, [r2, #4]
 8004c80:	7992      	ldrb	r2, [r2, #6]
 8004c82:	8099      	strh	r1, [r3, #4]
 8004c84:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c86:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c90:	f3bf 8f5f 	dmb	sy
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	20012f30 	.word	0x20012f30
 8004ca4:	080075b0 	.word	0x080075b0
 8004ca8:	20012fd8 	.word	0x20012fd8
 8004cac:	200133d8 	.word	0x200133d8
 8004cb0:	080075bc 	.word	0x080075bc
 8004cb4:	080075c0 	.word	0x080075c0

08004cb8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08c      	sub	sp, #48	; 0x30
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004cc4:	4b3e      	ldr	r3, [pc, #248]	; (8004dc0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004cc6:	623b      	str	r3, [r7, #32]
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <SEGGER_RTT_ReadNoLock+0x1e>
 8004cd2:	f7ff ff99 	bl	8004c08 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	4413      	add	r3, r2
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	3360      	adds	r3, #96	; 0x60
 8004ce2:	4a37      	ldr	r2, [pc, #220]	; (8004dc0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004ce4:	4413      	add	r3, r2
 8004ce6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d92b      	bls.n	8004d5c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4293      	cmp	r3, r2
 8004d14:	bf28      	it	cs
 8004d16:	4613      	movcs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d20:	4413      	add	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	6939      	ldr	r1, [r7, #16]
 8004d28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d2a:	f001 ff21 	bl	8006b70 <memcpy>
    NumBytesRead += NumBytesRem;
 8004d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	4413      	add	r3, r2
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d101      	bne.n	8004d5c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	bf28      	it	cs
 8004d6c:	4613      	movcs	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d019      	beq.n	8004daa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7c:	4413      	add	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	6939      	ldr	r1, [r7, #16]
 8004d84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d86:	f001 fef3 	bl	8006b70 <memcpy>
    NumBytesRead += NumBytesRem;
 8004d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	4413      	add	r3, r2
 8004d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	4413      	add	r3, r2
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004da2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	4413      	add	r3, r2
 8004da8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004db4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3730      	adds	r7, #48	; 0x30
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	20012f30 	.word	0x20012f30

08004dc4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004dd2:	4b3d      	ldr	r3, [pc, #244]	; (8004ec8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004dd4:	61bb      	str	r3, [r7, #24]
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004de0:	f7ff ff12 	bl	8004c08 <_DoInit>
  SEGGER_RTT_LOCK();
 8004de4:	f3ef 8311 	mrs	r3, BASEPRI
 8004de8:	f04f 0120 	mov.w	r1, #32
 8004dec:	f381 8811 	msr	BASEPRI, r1
 8004df0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004df2:	4b35      	ldr	r3, [pc, #212]	; (8004ec8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004df4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004df6:	2300      	movs	r3, #0
 8004df8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004dfa:	6939      	ldr	r1, [r7, #16]
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	4613      	mov	r3, r2
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	4413      	add	r3, r2
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	440b      	add	r3, r1
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d008      	beq.n	8004e24 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	3301      	adds	r3, #1
 8004e16:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	69fa      	ldr	r2, [r7, #28]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	dbeb      	blt.n	8004dfa <SEGGER_RTT_AllocUpBuffer+0x36>
 8004e22:	e000      	b.n	8004e26 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004e24:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	69fa      	ldr	r2, [r7, #28]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	da3f      	bge.n	8004eb0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004e30:	6939      	ldr	r1, [r7, #16]
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	4613      	mov	r3, r2
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	4413      	add	r3, r2
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	440b      	add	r3, r1
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004e44:	6939      	ldr	r1, [r7, #16]
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	4413      	add	r3, r2
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	440b      	add	r3, r1
 8004e54:	3304      	adds	r3, #4
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004e5a:	6939      	ldr	r1, [r7, #16]
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	4413      	add	r3, r2
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	440b      	add	r3, r1
 8004e68:	3320      	adds	r3, #32
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004e6e:	6939      	ldr	r1, [r7, #16]
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	4613      	mov	r3, r2
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	4413      	add	r3, r2
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	440b      	add	r3, r1
 8004e7c:	3328      	adds	r3, #40	; 0x28
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004e82:	6939      	ldr	r1, [r7, #16]
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	4613      	mov	r3, r2
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	4413      	add	r3, r2
 8004e8c:	00db      	lsls	r3, r3, #3
 8004e8e:	440b      	add	r3, r1
 8004e90:	3324      	adds	r3, #36	; 0x24
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004e96:	6939      	ldr	r1, [r7, #16]
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	4413      	add	r3, r2
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	440b      	add	r3, r1
 8004ea4:	332c      	adds	r3, #44	; 0x2c
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004eaa:	f3bf 8f5f 	dmb	sy
 8004eae:	e002      	b.n	8004eb6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3720      	adds	r7, #32
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20012f30 	.word	0x20012f30

08004ecc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b088      	sub	sp, #32
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004eda:	4b33      	ldr	r3, [pc, #204]	; (8004fa8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004ee8:	f7ff fe8e 	bl	8004c08 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004eec:	4b2e      	ldr	r3, [pc, #184]	; (8004fa8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004eee:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d24d      	bcs.n	8004f98 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004efc:	f3ef 8311 	mrs	r3, BASEPRI
 8004f00:	f04f 0120 	mov.w	r1, #32
 8004f04:	f381 8811 	msr	BASEPRI, r1
 8004f08:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d031      	beq.n	8004f74 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004f10:	6979      	ldr	r1, [r7, #20]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4613      	mov	r3, r2
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	4413      	add	r3, r2
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	440b      	add	r3, r1
 8004f1e:	3360      	adds	r3, #96	; 0x60
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004f24:	6979      	ldr	r1, [r7, #20]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	4413      	add	r3, r2
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	440b      	add	r3, r1
 8004f32:	3364      	adds	r3, #100	; 0x64
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004f38:	6979      	ldr	r1, [r7, #20]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	4413      	add	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	440b      	add	r3, r1
 8004f46:	3368      	adds	r3, #104	; 0x68
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004f4c:	6979      	ldr	r1, [r7, #20]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4613      	mov	r3, r2
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	4413      	add	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	440b      	add	r3, r1
 8004f5a:	3370      	adds	r3, #112	; 0x70
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004f60:	6979      	ldr	r1, [r7, #20]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4613      	mov	r3, r2
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	4413      	add	r3, r2
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	440b      	add	r3, r1
 8004f6e:	336c      	adds	r3, #108	; 0x6c
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004f74:	6979      	ldr	r1, [r7, #20]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	4413      	add	r3, r2
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	440b      	add	r3, r1
 8004f82:	3374      	adds	r3, #116	; 0x74
 8004f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f86:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f88:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004f92:	2300      	movs	r3, #0
 8004f94:	61fb      	str	r3, [r7, #28]
 8004f96:	e002      	b.n	8004f9e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004f98:	f04f 33ff 	mov.w	r3, #4294967295
 8004f9c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004f9e:	69fb      	ldr	r3, [r7, #28]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3720      	adds	r7, #32
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20012f30 	.word	0x20012f30

08004fac <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004fbc:	e002      	b.n	8004fc4 <_EncodeStr+0x18>
    Len++;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4413      	add	r3, r2
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1f6      	bne.n	8004fbe <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d901      	bls.n	8004fdc <_EncodeStr+0x30>
    Len = Limit;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	2bfe      	cmp	r3, #254	; 0xfe
 8004fe0:	d806      	bhi.n	8004ff0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	60fa      	str	r2, [r7, #12]
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	701a      	strb	r2, [r3, #0]
 8004fee:	e011      	b.n	8005014 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	60fa      	str	r2, [r7, #12]
 8004ff6:	22ff      	movs	r2, #255	; 0xff
 8004ff8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	60fa      	str	r2, [r7, #12]
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	0a19      	lsrs	r1, r3, #8
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	60fa      	str	r2, [r7, #12]
 8005010:	b2ca      	uxtb	r2, r1
 8005012:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005018:	e00a      	b.n	8005030 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	1c53      	adds	r3, r2, #1
 800501e:	60bb      	str	r3, [r7, #8]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	1c59      	adds	r1, r3, #1
 8005024:	60f9      	str	r1, [r7, #12]
 8005026:	7812      	ldrb	r2, [r2, #0]
 8005028:	701a      	strb	r2, [r3, #0]
    n++;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	3301      	adds	r3, #1
 800502e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	429a      	cmp	r2, r3
 8005036:	d3f0      	bcc.n	800501a <_EncodeStr+0x6e>
  }
  return pPayload;
 8005038:	68fb      	ldr	r3, [r7, #12]
}
 800503a:	4618      	mov	r0, r3
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3304      	adds	r3, #4
}
 8005052:	4618      	mov	r0, r3
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
	...

08005060 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005066:	4b36      	ldr	r3, [pc, #216]	; (8005140 <_HandleIncomingPacket+0xe0>)
 8005068:	7e1b      	ldrb	r3, [r3, #24]
 800506a:	4618      	mov	r0, r3
 800506c:	1cfb      	adds	r3, r7, #3
 800506e:	2201      	movs	r2, #1
 8005070:	4619      	mov	r1, r3
 8005072:	f7ff fe21 	bl	8004cb8 <SEGGER_RTT_ReadNoLock>
 8005076:	4603      	mov	r3, r0
 8005078:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	dd54      	ble.n	800512a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005080:	78fb      	ldrb	r3, [r7, #3]
 8005082:	2b80      	cmp	r3, #128	; 0x80
 8005084:	d032      	beq.n	80050ec <_HandleIncomingPacket+0x8c>
 8005086:	2b80      	cmp	r3, #128	; 0x80
 8005088:	dc42      	bgt.n	8005110 <_HandleIncomingPacket+0xb0>
 800508a:	2b07      	cmp	r3, #7
 800508c:	dc16      	bgt.n	80050bc <_HandleIncomingPacket+0x5c>
 800508e:	2b00      	cmp	r3, #0
 8005090:	dd3e      	ble.n	8005110 <_HandleIncomingPacket+0xb0>
 8005092:	3b01      	subs	r3, #1
 8005094:	2b06      	cmp	r3, #6
 8005096:	d83b      	bhi.n	8005110 <_HandleIncomingPacket+0xb0>
 8005098:	a201      	add	r2, pc, #4	; (adr r2, 80050a0 <_HandleIncomingPacket+0x40>)
 800509a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509e:	bf00      	nop
 80050a0:	080050c3 	.word	0x080050c3
 80050a4:	080050c9 	.word	0x080050c9
 80050a8:	080050cf 	.word	0x080050cf
 80050ac:	080050d5 	.word	0x080050d5
 80050b0:	080050db 	.word	0x080050db
 80050b4:	080050e1 	.word	0x080050e1
 80050b8:	080050e7 	.word	0x080050e7
 80050bc:	2b7f      	cmp	r3, #127	; 0x7f
 80050be:	d036      	beq.n	800512e <_HandleIncomingPacket+0xce>
 80050c0:	e026      	b.n	8005110 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80050c2:	f000 ff41 	bl	8005f48 <SEGGER_SYSVIEW_Start>
      break;
 80050c6:	e037      	b.n	8005138 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80050c8:	f000 fff8 	bl	80060bc <SEGGER_SYSVIEW_Stop>
      break;
 80050cc:	e034      	b.n	8005138 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80050ce:	f001 f9d1 	bl	8006474 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80050d2:	e031      	b.n	8005138 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80050d4:	f001 f996 	bl	8006404 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80050d8:	e02e      	b.n	8005138 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80050da:	f001 f815 	bl	8006108 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80050de:	e02b      	b.n	8005138 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80050e0:	f001 fc64 	bl	80069ac <SEGGER_SYSVIEW_SendNumModules>
      break;
 80050e4:	e028      	b.n	8005138 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80050e6:	f001 fc43 	bl	8006970 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80050ea:	e025      	b.n	8005138 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80050ec:	4b14      	ldr	r3, [pc, #80]	; (8005140 <_HandleIncomingPacket+0xe0>)
 80050ee:	7e1b      	ldrb	r3, [r3, #24]
 80050f0:	4618      	mov	r0, r3
 80050f2:	1cfb      	adds	r3, r7, #3
 80050f4:	2201      	movs	r2, #1
 80050f6:	4619      	mov	r1, r3
 80050f8:	f7ff fdde 	bl	8004cb8 <SEGGER_RTT_ReadNoLock>
 80050fc:	4603      	mov	r3, r0
 80050fe:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	dd15      	ble.n	8005132 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005106:	78fb      	ldrb	r3, [r7, #3]
 8005108:	4618      	mov	r0, r3
 800510a:	f001 fbb1 	bl	8006870 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800510e:	e010      	b.n	8005132 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005110:	78fb      	ldrb	r3, [r7, #3]
 8005112:	b25b      	sxtb	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	da0e      	bge.n	8005136 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005118:	4b09      	ldr	r3, [pc, #36]	; (8005140 <_HandleIncomingPacket+0xe0>)
 800511a:	7e1b      	ldrb	r3, [r3, #24]
 800511c:	4618      	mov	r0, r3
 800511e:	1cfb      	adds	r3, r7, #3
 8005120:	2201      	movs	r2, #1
 8005122:	4619      	mov	r1, r3
 8005124:	f7ff fdc8 	bl	8004cb8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005128:	e005      	b.n	8005136 <_HandleIncomingPacket+0xd6>
    }
  }
 800512a:	bf00      	nop
 800512c:	e004      	b.n	8005138 <_HandleIncomingPacket+0xd8>
      break;
 800512e:	bf00      	nop
 8005130:	e002      	b.n	8005138 <_HandleIncomingPacket+0xd8>
      break;
 8005132:	bf00      	nop
 8005134:	e000      	b.n	8005138 <_HandleIncomingPacket+0xd8>
      break;
 8005136:	bf00      	nop
}
 8005138:	bf00      	nop
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	200143f0 	.word	0x200143f0

08005144 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005144:	b580      	push	{r7, lr}
 8005146:	b08c      	sub	sp, #48	; 0x30
 8005148:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800514a:	2301      	movs	r3, #1
 800514c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800514e:	1d3b      	adds	r3, r7, #4
 8005150:	3301      	adds	r3, #1
 8005152:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005158:	4b31      	ldr	r3, [pc, #196]	; (8005220 <_TrySendOverflowPacket+0xdc>)
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	62bb      	str	r3, [r7, #40]	; 0x28
 800515e:	e00b      	b.n	8005178 <_TrySendOverflowPacket+0x34>
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	b2da      	uxtb	r2, r3
 8005164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005166:	1c59      	adds	r1, r3, #1
 8005168:	62f9      	str	r1, [r7, #44]	; 0x2c
 800516a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	09db      	lsrs	r3, r3, #7
 8005176:	62bb      	str	r3, [r7, #40]	; 0x28
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	2b7f      	cmp	r3, #127	; 0x7f
 800517c:	d8f0      	bhi.n	8005160 <_TrySendOverflowPacket+0x1c>
 800517e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800518e:	4b25      	ldr	r3, [pc, #148]	; (8005224 <_TrySendOverflowPacket+0xe0>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005194:	4b22      	ldr	r3, [pc, #136]	; (8005220 <_TrySendOverflowPacket+0xdc>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	627b      	str	r3, [r7, #36]	; 0x24
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	623b      	str	r3, [r7, #32]
 80051a6:	e00b      	b.n	80051c0 <_TrySendOverflowPacket+0x7c>
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	1c59      	adds	r1, r3, #1
 80051b0:	6279      	str	r1, [r7, #36]	; 0x24
 80051b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	09db      	lsrs	r3, r3, #7
 80051be:	623b      	str	r3, [r7, #32]
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	2b7f      	cmp	r3, #127	; 0x7f
 80051c4:	d8f0      	bhi.n	80051a8 <_TrySendOverflowPacket+0x64>
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	627a      	str	r2, [r7, #36]	; 0x24
 80051cc:	6a3a      	ldr	r2, [r7, #32]
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80051d6:	4b12      	ldr	r3, [pc, #72]	; (8005220 <_TrySendOverflowPacket+0xdc>)
 80051d8:	785b      	ldrb	r3, [r3, #1]
 80051da:	4618      	mov	r0, r3
 80051dc:	1d3b      	adds	r3, r7, #4
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	461a      	mov	r2, r3
 80051e4:	1d3b      	adds	r3, r7, #4
 80051e6:	4619      	mov	r1, r3
 80051e8:	f7fa fff2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80051ec:	4603      	mov	r3, r0
 80051ee:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d009      	beq.n	800520a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80051f6:	4a0a      	ldr	r2, [pc, #40]	; (8005220 <_TrySendOverflowPacket+0xdc>)
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80051fc:	4b08      	ldr	r3, [pc, #32]	; (8005220 <_TrySendOverflowPacket+0xdc>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	3b01      	subs	r3, #1
 8005202:	b2da      	uxtb	r2, r3
 8005204:	4b06      	ldr	r3, [pc, #24]	; (8005220 <_TrySendOverflowPacket+0xdc>)
 8005206:	701a      	strb	r2, [r3, #0]
 8005208:	e004      	b.n	8005214 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <_TrySendOverflowPacket+0xdc>)
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	3301      	adds	r3, #1
 8005210:	4a03      	ldr	r2, [pc, #12]	; (8005220 <_TrySendOverflowPacket+0xdc>)
 8005212:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005214:	693b      	ldr	r3, [r7, #16]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3730      	adds	r7, #48	; 0x30
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	200143f0 	.word	0x200143f0
 8005224:	e0001004 	.word	0xe0001004

08005228 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005228:	b580      	push	{r7, lr}
 800522a:	b08a      	sub	sp, #40	; 0x28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005234:	4b6c      	ldr	r3, [pc, #432]	; (80053e8 <_SendPacket+0x1c0>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d010      	beq.n	800525e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800523c:	4b6a      	ldr	r3, [pc, #424]	; (80053e8 <_SendPacket+0x1c0>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 80a3 	beq.w	800538c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005246:	4b68      	ldr	r3, [pc, #416]	; (80053e8 <_SendPacket+0x1c0>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d109      	bne.n	8005262 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800524e:	f7ff ff79 	bl	8005144 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005252:	4b65      	ldr	r3, [pc, #404]	; (80053e8 <_SendPacket+0x1c0>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b01      	cmp	r3, #1
 8005258:	f040 809a 	bne.w	8005390 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800525c:	e001      	b.n	8005262 <_SendPacket+0x3a>
    goto Send;
 800525e:	bf00      	nop
 8005260:	e000      	b.n	8005264 <_SendPacket+0x3c>
Send:
 8005262:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b1f      	cmp	r3, #31
 8005268:	d809      	bhi.n	800527e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800526a:	4b5f      	ldr	r3, [pc, #380]	; (80053e8 <_SendPacket+0x1c0>)
 800526c:	69da      	ldr	r2, [r3, #28]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	fa22 f303 	lsr.w	r3, r2, r3
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	f040 808b 	bne.w	8005394 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b17      	cmp	r3, #23
 8005282:	d807      	bhi.n	8005294 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	3b01      	subs	r3, #1
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	b2da      	uxtb	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	701a      	strb	r2, [r3, #0]
 8005292:	e03d      	b.n	8005310 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	2b7f      	cmp	r3, #127	; 0x7f
 80052a0:	d912      	bls.n	80052c8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	09da      	lsrs	r2, r3, #7
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	3a01      	subs	r2, #1
 80052ba:	60fa      	str	r2, [r7, #12]
 80052bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	e006      	b.n	80052d6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b7f      	cmp	r3, #127	; 0x7f
 80052da:	d912      	bls.n	8005302 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	09da      	lsrs	r2, r3, #7
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	3a01      	subs	r2, #1
 80052f4:	60fa      	str	r2, [r7, #12]
 80052f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	701a      	strb	r2, [r3, #0]
 8005300:	e006      	b.n	8005310 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3b01      	subs	r3, #1
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	b2da      	uxtb	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005310:	4b36      	ldr	r3, [pc, #216]	; (80053ec <_SendPacket+0x1c4>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005316:	4b34      	ldr	r3, [pc, #208]	; (80053e8 <_SendPacket+0x1c0>)
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	623b      	str	r3, [r7, #32]
 8005328:	e00b      	b.n	8005342 <_SendPacket+0x11a>
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	b2da      	uxtb	r2, r3
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	1c59      	adds	r1, r3, #1
 8005332:	6279      	str	r1, [r7, #36]	; 0x24
 8005334:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	701a      	strb	r2, [r3, #0]
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	09db      	lsrs	r3, r3, #7
 8005340:	623b      	str	r3, [r7, #32]
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	2b7f      	cmp	r3, #127	; 0x7f
 8005346:	d8f0      	bhi.n	800532a <_SendPacket+0x102>
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	627a      	str	r2, [r7, #36]	; 0x24
 800534e:	6a3a      	ldr	r2, [r7, #32]
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	701a      	strb	r2, [r3, #0]
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005358:	4b23      	ldr	r3, [pc, #140]	; (80053e8 <_SendPacket+0x1c0>)
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	4618      	mov	r0, r3
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	461a      	mov	r2, r3
 8005366:	68f9      	ldr	r1, [r7, #12]
 8005368:	f7fa ff32 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800536c:	4603      	mov	r3, r0
 800536e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005376:	4a1c      	ldr	r2, [pc, #112]	; (80053e8 <_SendPacket+0x1c0>)
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	60d3      	str	r3, [r2, #12]
 800537c:	e00b      	b.n	8005396 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800537e:	4b1a      	ldr	r3, [pc, #104]	; (80053e8 <_SendPacket+0x1c0>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	3301      	adds	r3, #1
 8005384:	b2da      	uxtb	r2, r3
 8005386:	4b18      	ldr	r3, [pc, #96]	; (80053e8 <_SendPacket+0x1c0>)
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	e004      	b.n	8005396 <_SendPacket+0x16e>
    goto SendDone;
 800538c:	bf00      	nop
 800538e:	e002      	b.n	8005396 <_SendPacket+0x16e>
      goto SendDone;
 8005390:	bf00      	nop
 8005392:	e000      	b.n	8005396 <_SendPacket+0x16e>
      goto SendDone;
 8005394:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005396:	4b14      	ldr	r3, [pc, #80]	; (80053e8 <_SendPacket+0x1c0>)
 8005398:	7e1b      	ldrb	r3, [r3, #24]
 800539a:	4619      	mov	r1, r3
 800539c:	4a14      	ldr	r2, [pc, #80]	; (80053f0 <_SendPacket+0x1c8>)
 800539e:	460b      	mov	r3, r1
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	440b      	add	r3, r1
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	4413      	add	r3, r2
 80053a8:	336c      	adds	r3, #108	; 0x6c
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	4b0e      	ldr	r3, [pc, #56]	; (80053e8 <_SendPacket+0x1c0>)
 80053ae:	7e1b      	ldrb	r3, [r3, #24]
 80053b0:	4618      	mov	r0, r3
 80053b2:	490f      	ldr	r1, [pc, #60]	; (80053f0 <_SendPacket+0x1c8>)
 80053b4:	4603      	mov	r3, r0
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	4403      	add	r3, r0
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	440b      	add	r3, r1
 80053be:	3370      	adds	r3, #112	; 0x70
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d00b      	beq.n	80053de <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80053c6:	4b08      	ldr	r3, [pc, #32]	; (80053e8 <_SendPacket+0x1c0>)
 80053c8:	789b      	ldrb	r3, [r3, #2]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d107      	bne.n	80053de <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80053ce:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <_SendPacket+0x1c0>)
 80053d0:	2201      	movs	r2, #1
 80053d2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80053d4:	f7ff fe44 	bl	8005060 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80053d8:	4b03      	ldr	r3, [pc, #12]	; (80053e8 <_SendPacket+0x1c0>)
 80053da:	2200      	movs	r2, #0
 80053dc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80053de:	bf00      	nop
 80053e0:	3728      	adds	r7, #40	; 0x28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	200143f0 	.word	0x200143f0
 80053ec:	e0001004 	.word	0xe0001004
 80053f0:	20012f30 	.word	0x20012f30

080053f4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08a      	sub	sp, #40	; 0x28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	460b      	mov	r3, r1
 80053fe:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	3301      	adds	r3, #1
 800540a:	2b80      	cmp	r3, #128	; 0x80
 800540c:	d80a      	bhi.n	8005424 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	1c59      	adds	r1, r3, #1
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6051      	str	r1, [r2, #4]
 8005418:	78fa      	ldrb	r2, [r7, #3]
 800541a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	2b80      	cmp	r3, #128	; 0x80
 800542a:	d15a      	bne.n	80054e2 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	b2d2      	uxtb	r2, r2
 8005436:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	623b      	str	r3, [r7, #32]
 800544c:	e00b      	b.n	8005466 <_StoreChar+0x72>
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	b2da      	uxtb	r2, r3
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	1c59      	adds	r1, r3, #1
 8005456:	6279      	str	r1, [r7, #36]	; 0x24
 8005458:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	09db      	lsrs	r3, r3, #7
 8005464:	623b      	str	r3, [r7, #32]
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	2b7f      	cmp	r3, #127	; 0x7f
 800546a:	d8f0      	bhi.n	800544e <_StoreChar+0x5a>
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	627a      	str	r2, [r7, #36]	; 0x24
 8005472:	6a3a      	ldr	r2, [r7, #32]
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	701a      	strb	r2, [r3, #0]
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	61fb      	str	r3, [r7, #28]
 8005480:	2300      	movs	r3, #0
 8005482:	61bb      	str	r3, [r7, #24]
 8005484:	e00b      	b.n	800549e <_StoreChar+0xaa>
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	b2da      	uxtb	r2, r3
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	1c59      	adds	r1, r3, #1
 800548e:	61f9      	str	r1, [r7, #28]
 8005490:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	701a      	strb	r2, [r3, #0]
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	09db      	lsrs	r3, r3, #7
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2b7f      	cmp	r3, #127	; 0x7f
 80054a2:	d8f0      	bhi.n	8005486 <_StoreChar+0x92>
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	61fa      	str	r2, [r7, #28]
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	701a      	strb	r2, [r3, #0]
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	221a      	movs	r2, #26
 80054ba:	6939      	ldr	r1, [r7, #16]
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff feb3 	bl	8005228 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7ff fdbd 	bl	8005046 <_PreparePacket>
 80054cc:	4602      	mov	r2, r0
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	611a      	str	r2, [r3, #16]
  }
}
 80054e2:	bf00      	nop
 80054e4:	3728      	adds	r7, #40	; 0x28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08a      	sub	sp, #40	; 0x28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80054fe:	2301      	movs	r3, #1
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005502:	2301      	movs	r3, #1
 8005504:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005506:	e007      	b.n	8005518 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005508:	6a3a      	ldr	r2, [r7, #32]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005510:	623b      	str	r3, [r7, #32]
    Width++;
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	3301      	adds	r3, #1
 8005516:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005518:	6a3a      	ldr	r2, [r7, #32]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	429a      	cmp	r2, r3
 800551e:	d2f3      	bcs.n	8005508 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	429a      	cmp	r2, r3
 8005526:	d901      	bls.n	800552c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800552c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d11f      	bne.n	8005576 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01c      	beq.n	8005576 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800553c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <_PrintUnsigned+0x66>
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d102      	bne.n	8005552 <_PrintUnsigned+0x66>
        c = '0';
 800554c:	2330      	movs	r3, #48	; 0x30
 800554e:	76fb      	strb	r3, [r7, #27]
 8005550:	e001      	b.n	8005556 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005552:	2320      	movs	r3, #32
 8005554:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005556:	e007      	b.n	8005568 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555a:	3b01      	subs	r3, #1
 800555c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800555e:	7efb      	ldrb	r3, [r7, #27]
 8005560:	4619      	mov	r1, r3
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f7ff ff46 	bl	80053f4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <_PrintUnsigned+0x8a>
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	429a      	cmp	r2, r3
 8005574:	d3f0      	bcc.n	8005558 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d903      	bls.n	8005584 <_PrintUnsigned+0x98>
      NumDigits--;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	3b01      	subs	r3, #1
 8005580:	603b      	str	r3, [r7, #0]
 8005582:	e009      	b.n	8005598 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	fbb2 f3f3 	udiv	r3, r2, r3
 800558c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	429a      	cmp	r2, r3
 8005594:	d200      	bcs.n	8005598 <_PrintUnsigned+0xac>
        break;
 8005596:	e005      	b.n	80055a4 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	fb02 f303 	mul.w	r3, r2, r3
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80055a2:	e7e8      	b.n	8005576 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ac:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b2:	fb02 f303 	mul.w	r3, r2, r3
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80055bc:	4a15      	ldr	r2, [pc, #84]	; (8005614 <_PrintUnsigned+0x128>)
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	4413      	add	r3, r2
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	4619      	mov	r1, r3
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f7ff ff14 	bl	80053f4 <_StoreChar>
    Digit /= Base;
 80055cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e3      	bne.n	80055a4 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80055dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d011      	beq.n	800560a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00e      	beq.n	800560a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80055ec:	e006      	b.n	80055fc <_PrintUnsigned+0x110>
        FieldWidth--;
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	3b01      	subs	r3, #1
 80055f2:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80055f4:	2120      	movs	r1, #32
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f7ff fefc 	bl	80053f4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <_PrintUnsigned+0x11e>
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005606:	429a      	cmp	r2, r3
 8005608:	d3f1      	bcc.n	80055ee <_PrintUnsigned+0x102>
      }
    }
  }
}
 800560a:	bf00      	nop
 800560c:	3728      	adds	r7, #40	; 0x28
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	0800762c 	.word	0x0800762c

08005618 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af02      	add	r7, sp, #8
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	bfb8      	it	lt
 800562c:	425b      	neglt	r3, r3
 800562e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005630:	2301      	movs	r3, #1
 8005632:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005634:	e007      	b.n	8005646 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	fb92 f3f3 	sdiv	r3, r2, r3
 800563e:	613b      	str	r3, [r7, #16]
    Width++;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	3301      	adds	r3, #1
 8005644:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	429a      	cmp	r2, r3
 800564c:	daf3      	bge.n	8005636 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	429a      	cmp	r2, r3
 8005654:	d901      	bls.n	800565a <_PrintInt+0x42>
    Width = NumDigits;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00a      	beq.n	8005676 <_PrintInt+0x5e>
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	db04      	blt.n	8005670 <_PrintInt+0x58>
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <_PrintInt+0x5e>
    FieldWidth--;
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	3b01      	subs	r3, #1
 8005674:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <_PrintInt+0x6e>
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d016      	beq.n	80056b4 <_PrintInt+0x9c>
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d111      	bne.n	80056b4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00e      	beq.n	80056b4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005696:	e006      	b.n	80056a6 <_PrintInt+0x8e>
        FieldWidth--;
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	3b01      	subs	r3, #1
 800569c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800569e:	2120      	movs	r1, #32
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f7ff fea7 	bl	80053f4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <_PrintInt+0x9c>
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d3f1      	bcc.n	8005698 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	da07      	bge.n	80056ca <_PrintInt+0xb2>
    v = -v;
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	425b      	negs	r3, r3
 80056be:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80056c0:	212d      	movs	r1, #45	; 0x2d
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f7ff fe96 	bl	80053f4 <_StoreChar>
 80056c8:	e008      	b.n	80056dc <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80056d4:	212b      	movs	r1, #43	; 0x2b
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f7ff fe8c 	bl	80053f4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d019      	beq.n	800571a <_PrintInt+0x102>
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d114      	bne.n	800571a <_PrintInt+0x102>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d111      	bne.n	800571a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00e      	beq.n	800571a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80056fc:	e006      	b.n	800570c <_PrintInt+0xf4>
        FieldWidth--;
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	3b01      	subs	r3, #1
 8005702:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005704:	2130      	movs	r1, #48	; 0x30
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f7ff fe74 	bl	80053f4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <_PrintInt+0x102>
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	429a      	cmp	r2, r3
 8005718:	d3f1      	bcc.n	80056fe <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	9301      	str	r3, [sp, #4]
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f7ff fedf 	bl	80054ec <_PrintUnsigned>
}
 800572e:	bf00      	nop
 8005730:	3718      	adds	r7, #24
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
	...

08005738 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b098      	sub	sp, #96	; 0x60
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005744:	f3ef 8311 	mrs	r3, BASEPRI
 8005748:	f04f 0120 	mov.w	r1, #32
 800574c:	f381 8811 	msr	BASEPRI, r1
 8005750:	633b      	str	r3, [r7, #48]	; 0x30
 8005752:	48b7      	ldr	r0, [pc, #732]	; (8005a30 <_VPrintTarget+0x2f8>)
 8005754:	f7ff fc77 	bl	8005046 <_PreparePacket>
 8005758:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800575a:	4bb5      	ldr	r3, [pc, #724]	; (8005a30 <_VPrintTarget+0x2f8>)
 800575c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800575e:	2300      	movs	r3, #0
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005764:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	3301      	adds	r3, #1
 800576a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3301      	adds	r3, #1
 800577c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800577e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 8183 	beq.w	8005a8e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005788:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800578c:	2b25      	cmp	r3, #37	; 0x25
 800578e:	f040 8170 	bne.w	8005a72 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005792:	2300      	movs	r3, #0
 8005794:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005796:	2301      	movs	r3, #1
 8005798:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80057a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057a6:	3b23      	subs	r3, #35	; 0x23
 80057a8:	2b0d      	cmp	r3, #13
 80057aa:	d83f      	bhi.n	800582c <_VPrintTarget+0xf4>
 80057ac:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <_VPrintTarget+0x7c>)
 80057ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b2:	bf00      	nop
 80057b4:	0800581d 	.word	0x0800581d
 80057b8:	0800582d 	.word	0x0800582d
 80057bc:	0800582d 	.word	0x0800582d
 80057c0:	0800582d 	.word	0x0800582d
 80057c4:	0800582d 	.word	0x0800582d
 80057c8:	0800582d 	.word	0x0800582d
 80057cc:	0800582d 	.word	0x0800582d
 80057d0:	0800582d 	.word	0x0800582d
 80057d4:	0800580d 	.word	0x0800580d
 80057d8:	0800582d 	.word	0x0800582d
 80057dc:	080057ed 	.word	0x080057ed
 80057e0:	0800582d 	.word	0x0800582d
 80057e4:	0800582d 	.word	0x0800582d
 80057e8:	080057fd 	.word	0x080057fd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80057ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ee:	f043 0301 	orr.w	r3, r3, #1
 80057f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3301      	adds	r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	e01a      	b.n	8005832 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80057fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057fe:	f043 0302 	orr.w	r3, r3, #2
 8005802:	64bb      	str	r3, [r7, #72]	; 0x48
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3301      	adds	r3, #1
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	e012      	b.n	8005832 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800580c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800580e:	f043 0304 	orr.w	r3, r3, #4
 8005812:	64bb      	str	r3, [r7, #72]	; 0x48
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3301      	adds	r3, #1
 8005818:	60fb      	str	r3, [r7, #12]
 800581a:	e00a      	b.n	8005832 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800581c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800581e:	f043 0308 	orr.w	r3, r3, #8
 8005822:	64bb      	str	r3, [r7, #72]	; 0x48
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3301      	adds	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	e002      	b.n	8005832 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800582c:	2300      	movs	r3, #0
 800582e:	653b      	str	r3, [r7, #80]	; 0x50
 8005830:	bf00      	nop
        }
      } while (v);
 8005832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1b0      	bne.n	800579a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005838:	2300      	movs	r3, #0
 800583a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005844:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005848:	2b2f      	cmp	r3, #47	; 0x2f
 800584a:	d912      	bls.n	8005872 <_VPrintTarget+0x13a>
 800584c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005850:	2b39      	cmp	r3, #57	; 0x39
 8005852:	d80e      	bhi.n	8005872 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	3301      	adds	r3, #1
 8005858:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800585a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	461a      	mov	r2, r3
 8005866:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800586a:	4413      	add	r3, r2
 800586c:	3b30      	subs	r3, #48	; 0x30
 800586e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005870:	e7e4      	b.n	800583c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005872:	2300      	movs	r3, #0
 8005874:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800587e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005882:	2b2e      	cmp	r3, #46	; 0x2e
 8005884:	d11d      	bne.n	80058c2 <_VPrintTarget+0x18a>
        sFormat++;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3301      	adds	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005894:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005898:	2b2f      	cmp	r3, #47	; 0x2f
 800589a:	d912      	bls.n	80058c2 <_VPrintTarget+0x18a>
 800589c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058a0:	2b39      	cmp	r3, #57	; 0x39
 80058a2:	d80e      	bhi.n	80058c2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	3301      	adds	r3, #1
 80058a8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80058aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058ac:	4613      	mov	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	461a      	mov	r2, r3
 80058b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058ba:	4413      	add	r3, r2
 80058bc:	3b30      	subs	r3, #48	; 0x30
 80058be:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80058c0:	e7e4      	b.n	800588c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80058ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058ce:	2b6c      	cmp	r3, #108	; 0x6c
 80058d0:	d003      	beq.n	80058da <_VPrintTarget+0x1a2>
 80058d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058d6:	2b68      	cmp	r3, #104	; 0x68
 80058d8:	d107      	bne.n	80058ea <_VPrintTarget+0x1b2>
          c = *sFormat;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	3301      	adds	r3, #1
 80058e6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80058e8:	e7ef      	b.n	80058ca <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80058ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058ee:	2b25      	cmp	r3, #37	; 0x25
 80058f0:	f000 80b3 	beq.w	8005a5a <_VPrintTarget+0x322>
 80058f4:	2b25      	cmp	r3, #37	; 0x25
 80058f6:	f2c0 80b7 	blt.w	8005a68 <_VPrintTarget+0x330>
 80058fa:	2b78      	cmp	r3, #120	; 0x78
 80058fc:	f300 80b4 	bgt.w	8005a68 <_VPrintTarget+0x330>
 8005900:	2b58      	cmp	r3, #88	; 0x58
 8005902:	f2c0 80b1 	blt.w	8005a68 <_VPrintTarget+0x330>
 8005906:	3b58      	subs	r3, #88	; 0x58
 8005908:	2b20      	cmp	r3, #32
 800590a:	f200 80ad 	bhi.w	8005a68 <_VPrintTarget+0x330>
 800590e:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <_VPrintTarget+0x1dc>)
 8005910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005914:	08005a0b 	.word	0x08005a0b
 8005918:	08005a69 	.word	0x08005a69
 800591c:	08005a69 	.word	0x08005a69
 8005920:	08005a69 	.word	0x08005a69
 8005924:	08005a69 	.word	0x08005a69
 8005928:	08005a69 	.word	0x08005a69
 800592c:	08005a69 	.word	0x08005a69
 8005930:	08005a69 	.word	0x08005a69
 8005934:	08005a69 	.word	0x08005a69
 8005938:	08005a69 	.word	0x08005a69
 800593c:	08005a69 	.word	0x08005a69
 8005940:	08005999 	.word	0x08005999
 8005944:	080059bf 	.word	0x080059bf
 8005948:	08005a69 	.word	0x08005a69
 800594c:	08005a69 	.word	0x08005a69
 8005950:	08005a69 	.word	0x08005a69
 8005954:	08005a69 	.word	0x08005a69
 8005958:	08005a69 	.word	0x08005a69
 800595c:	08005a69 	.word	0x08005a69
 8005960:	08005a69 	.word	0x08005a69
 8005964:	08005a69 	.word	0x08005a69
 8005968:	08005a69 	.word	0x08005a69
 800596c:	08005a69 	.word	0x08005a69
 8005970:	08005a69 	.word	0x08005a69
 8005974:	08005a35 	.word	0x08005a35
 8005978:	08005a69 	.word	0x08005a69
 800597c:	08005a69 	.word	0x08005a69
 8005980:	08005a69 	.word	0x08005a69
 8005984:	08005a69 	.word	0x08005a69
 8005988:	080059e5 	.word	0x080059e5
 800598c:	08005a69 	.word	0x08005a69
 8005990:	08005a69 	.word	0x08005a69
 8005994:	08005a0b 	.word	0x08005a0b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	1d19      	adds	r1, r3, #4
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6011      	str	r1, [r2, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80059a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80059ac:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80059b0:	f107 0314 	add.w	r3, r7, #20
 80059b4:	4611      	mov	r1, r2
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7ff fd1c 	bl	80053f4 <_StoreChar>
        break;
 80059bc:	e055      	b.n	8005a6a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	1d19      	adds	r1, r3, #4
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6011      	str	r1, [r2, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80059cc:	f107 0014 	add.w	r0, r7, #20
 80059d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059d2:	9301      	str	r3, [sp, #4]
 80059d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059da:	220a      	movs	r2, #10
 80059dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80059de:	f7ff fe1b 	bl	8005618 <_PrintInt>
        break;
 80059e2:	e042      	b.n	8005a6a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	1d19      	adds	r1, r3, #4
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6011      	str	r1, [r2, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80059f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80059f4:	f107 0014 	add.w	r0, r7, #20
 80059f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059fa:	9301      	str	r3, [sp, #4]
 80059fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a02:	220a      	movs	r2, #10
 8005a04:	f7ff fd72 	bl	80054ec <_PrintUnsigned>
        break;
 8005a08:	e02f      	b.n	8005a6a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	1d19      	adds	r1, r3, #4
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	6011      	str	r1, [r2, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005a18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a1a:	f107 0014 	add.w	r0, r7, #20
 8005a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a20:	9301      	str	r3, [sp, #4]
 8005a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a28:	2210      	movs	r2, #16
 8005a2a:	f7ff fd5f 	bl	80054ec <_PrintUnsigned>
        break;
 8005a2e:	e01c      	b.n	8005a6a <_VPrintTarget+0x332>
 8005a30:	20014420 	.word	0x20014420
      case 'p':
        v = va_arg(*pParamList, int);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	1d19      	adds	r1, r3, #4
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6011      	str	r1, [r2, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005a42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a44:	f107 0014 	add.w	r0, r7, #20
 8005a48:	2300      	movs	r3, #0
 8005a4a:	9301      	str	r3, [sp, #4]
 8005a4c:	2308      	movs	r3, #8
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	2308      	movs	r3, #8
 8005a52:	2210      	movs	r2, #16
 8005a54:	f7ff fd4a 	bl	80054ec <_PrintUnsigned>
        break;
 8005a58:	e007      	b.n	8005a6a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005a5a:	f107 0314 	add.w	r3, r7, #20
 8005a5e:	2125      	movs	r1, #37	; 0x25
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff fcc7 	bl	80053f4 <_StoreChar>
        break;
 8005a66:	e000      	b.n	8005a6a <_VPrintTarget+0x332>
      default:
        break;
 8005a68:	bf00      	nop
      }
      sFormat++;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	e007      	b.n	8005a82 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005a72:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005a76:	f107 0314 	add.w	r3, r7, #20
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff fcb9 	bl	80053f4 <_StoreChar>
    }
  } while (*sFormat);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f47f ae72 	bne.w	8005770 <_VPrintTarget+0x38>
 8005a8c:	e000      	b.n	8005a90 <_VPrintTarget+0x358>
      break;
 8005a8e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d041      	beq.n	8005b1a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	643b      	str	r3, [r7, #64]	; 0x40
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aa6:	e00b      	b.n	8005ac0 <_VPrintTarget+0x388>
 8005aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aae:	1c59      	adds	r1, r3, #1
 8005ab0:	6439      	str	r1, [r7, #64]	; 0x40
 8005ab2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	701a      	strb	r2, [r3, #0]
 8005aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005abc:	09db      	lsrs	r3, r3, #7
 8005abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ac4:	d8f0      	bhi.n	8005aa8 <_VPrintTarget+0x370>
 8005ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	643a      	str	r2, [r7, #64]	; 0x40
 8005acc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]
 8005ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ad4:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ada:	2300      	movs	r3, #0
 8005adc:	637b      	str	r3, [r7, #52]	; 0x34
 8005ade:	e00b      	b.n	8005af8 <_VPrintTarget+0x3c0>
 8005ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae6:	1c59      	adds	r1, r3, #1
 8005ae8:	63b9      	str	r1, [r7, #56]	; 0x38
 8005aea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	701a      	strb	r2, [r3, #0]
 8005af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af4:	09db      	lsrs	r3, r3, #7
 8005af6:	637b      	str	r3, [r7, #52]	; 0x34
 8005af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afa:	2b7f      	cmp	r3, #127	; 0x7f
 8005afc:	d8f0      	bhi.n	8005ae0 <_VPrintTarget+0x3a8>
 8005afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	63ba      	str	r2, [r7, #56]	; 0x38
 8005b04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	69b9      	ldr	r1, [r7, #24]
 8005b12:	221a      	movs	r2, #26
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff fb87 	bl	8005228 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005b20:	bf00      	nop
 8005b22:	3758      	adds	r7, #88	; 0x58
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af02      	add	r7, sp, #8
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005b36:	2300      	movs	r3, #0
 8005b38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b3c:	4917      	ldr	r1, [pc, #92]	; (8005b9c <SEGGER_SYSVIEW_Init+0x74>)
 8005b3e:	4818      	ldr	r0, [pc, #96]	; (8005ba0 <SEGGER_SYSVIEW_Init+0x78>)
 8005b40:	f7ff f940 	bl	8004dc4 <SEGGER_RTT_AllocUpBuffer>
 8005b44:	4603      	mov	r3, r0
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	4b16      	ldr	r3, [pc, #88]	; (8005ba4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b4a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005b4c:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b4e:	785a      	ldrb	r2, [r3, #1]
 8005b50:	4b14      	ldr	r3, [pc, #80]	; (8005ba4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b52:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005b54:	4b13      	ldr	r3, [pc, #76]	; (8005ba4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b56:	7e1b      	ldrb	r3, [r3, #24]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	2308      	movs	r3, #8
 8005b60:	4a11      	ldr	r2, [pc, #68]	; (8005ba8 <SEGGER_SYSVIEW_Init+0x80>)
 8005b62:	490f      	ldr	r1, [pc, #60]	; (8005ba0 <SEGGER_SYSVIEW_Init+0x78>)
 8005b64:	f7ff f9b2 	bl	8004ecc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005b68:	4b0e      	ldr	r3, [pc, #56]	; (8005ba4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005b6e:	4b0f      	ldr	r3, [pc, #60]	; (8005bac <SEGGER_SYSVIEW_Init+0x84>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a0c      	ldr	r2, [pc, #48]	; (8005ba4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b74:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005b76:	4a0b      	ldr	r2, [pc, #44]	; (8005ba4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005b7c:	4a09      	ldr	r2, [pc, #36]	; (8005ba4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005b82:	4a08      	ldr	r2, [pc, #32]	; (8005ba4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005b88:	4a06      	ldr	r2, [pc, #24]	; (8005ba4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005b8e:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005b94:	bf00      	nop
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	200133e8 	.word	0x200133e8
 8005ba0:	080075c8 	.word	0x080075c8
 8005ba4:	200143f0 	.word	0x200143f0
 8005ba8:	200143e8 	.word	0x200143e8
 8005bac:	e0001004 	.word	0xe0001004

08005bb0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005bb8:	4a04      	ldr	r2, [pc, #16]	; (8005bcc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6113      	str	r3, [r2, #16]
}
 8005bbe:	bf00      	nop
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	200143f0 	.word	0x200143f0

08005bd0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005bd8:	f3ef 8311 	mrs	r3, BASEPRI
 8005bdc:	f04f 0120 	mov.w	r1, #32
 8005be0:	f381 8811 	msr	BASEPRI, r1
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	4808      	ldr	r0, [pc, #32]	; (8005c08 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005be8:	f7ff fa2d 	bl	8005046 <_PreparePacket>
 8005bec:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	68b8      	ldr	r0, [r7, #8]
 8005bf4:	f7ff fb18 	bl	8005228 <_SendPacket>
  RECORD_END();
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f383 8811 	msr	BASEPRI, r3
}
 8005bfe:	bf00      	nop
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20014420 	.word	0x20014420

08005c0c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b088      	sub	sp, #32
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005c16:	f3ef 8311 	mrs	r3, BASEPRI
 8005c1a:	f04f 0120 	mov.w	r1, #32
 8005c1e:	f381 8811 	msr	BASEPRI, r1
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	4816      	ldr	r0, [pc, #88]	; (8005c80 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005c26:	f7ff fa0e 	bl	8005046 <_PreparePacket>
 8005c2a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	61fb      	str	r3, [r7, #28]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	61bb      	str	r3, [r7, #24]
 8005c38:	e00b      	b.n	8005c52 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	1c59      	adds	r1, r3, #1
 8005c42:	61f9      	str	r1, [r7, #28]
 8005c44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	701a      	strb	r2, [r3, #0]
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	09db      	lsrs	r3, r3, #7
 8005c50:	61bb      	str	r3, [r7, #24]
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	2b7f      	cmp	r3, #127	; 0x7f
 8005c56:	d8f0      	bhi.n	8005c3a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	61fa      	str	r2, [r7, #28]
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	701a      	strb	r2, [r3, #0]
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	68f9      	ldr	r1, [r7, #12]
 8005c6c:	6938      	ldr	r0, [r7, #16]
 8005c6e:	f7ff fadb 	bl	8005228 <_SendPacket>
  RECORD_END();
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f383 8811 	msr	BASEPRI, r3
}
 8005c78:	bf00      	nop
 8005c7a:	3720      	adds	r7, #32
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20014420 	.word	0x20014420

08005c84 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08c      	sub	sp, #48	; 0x30
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c90:	f3ef 8311 	mrs	r3, BASEPRI
 8005c94:	f04f 0120 	mov.w	r1, #32
 8005c98:	f381 8811 	msr	BASEPRI, r1
 8005c9c:	61fb      	str	r3, [r7, #28]
 8005c9e:	4825      	ldr	r0, [pc, #148]	; (8005d34 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005ca0:	f7ff f9d1 	bl	8005046 <_PreparePacket>
 8005ca4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cb2:	e00b      	b.n	8005ccc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cba:	1c59      	adds	r1, r3, #1
 8005cbc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005cbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	701a      	strb	r2, [r3, #0]
 8005cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc8:	09db      	lsrs	r3, r3, #7
 8005cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	2b7f      	cmp	r3, #127	; 0x7f
 8005cd0:	d8f0      	bhi.n	8005cb4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cda:	b2d2      	uxtb	r2, r2
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	623b      	str	r3, [r7, #32]
 8005cea:	e00b      	b.n	8005d04 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	1c59      	adds	r1, r3, #1
 8005cf4:	6279      	str	r1, [r7, #36]	; 0x24
 8005cf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	701a      	strb	r2, [r3, #0]
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	09db      	lsrs	r3, r3, #7
 8005d02:	623b      	str	r3, [r7, #32]
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	2b7f      	cmp	r3, #127	; 0x7f
 8005d08:	d8f0      	bhi.n	8005cec <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	627a      	str	r2, [r7, #36]	; 0x24
 8005d10:	6a3a      	ldr	r2, [r7, #32]
 8005d12:	b2d2      	uxtb	r2, r2
 8005d14:	701a      	strb	r2, [r3, #0]
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	6979      	ldr	r1, [r7, #20]
 8005d1e:	69b8      	ldr	r0, [r7, #24]
 8005d20:	f7ff fa82 	bl	8005228 <_SendPacket>
  RECORD_END();
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	f383 8811 	msr	BASEPRI, r3
}
 8005d2a:	bf00      	nop
 8005d2c:	3730      	adds	r7, #48	; 0x30
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	20014420 	.word	0x20014420

08005d38 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08e      	sub	sp, #56	; 0x38
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
 8005d44:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d46:	f3ef 8311 	mrs	r3, BASEPRI
 8005d4a:	f04f 0120 	mov.w	r1, #32
 8005d4e:	f381 8811 	msr	BASEPRI, r1
 8005d52:	61fb      	str	r3, [r7, #28]
 8005d54:	4832      	ldr	r0, [pc, #200]	; (8005e20 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005d56:	f7ff f976 	bl	8005046 <_PreparePacket>
 8005d5a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	637b      	str	r3, [r7, #52]	; 0x34
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	633b      	str	r3, [r7, #48]	; 0x30
 8005d68:	e00b      	b.n	8005d82 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d70:	1c59      	adds	r1, r3, #1
 8005d72:	6379      	str	r1, [r7, #52]	; 0x34
 8005d74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d78:	b2d2      	uxtb	r2, r2
 8005d7a:	701a      	strb	r2, [r3, #0]
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	09db      	lsrs	r3, r3, #7
 8005d80:	633b      	str	r3, [r7, #48]	; 0x30
 8005d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d84:	2b7f      	cmp	r3, #127	; 0x7f
 8005d86:	d8f0      	bhi.n	8005d6a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	637a      	str	r2, [r7, #52]	; 0x34
 8005d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d90:	b2d2      	uxtb	r2, r2
 8005d92:	701a      	strb	r2, [r3, #0]
 8005d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d96:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005da0:	e00b      	b.n	8005dba <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da8:	1c59      	adds	r1, r3, #1
 8005daa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005dac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005db0:	b2d2      	uxtb	r2, r2
 8005db2:	701a      	strb	r2, [r3, #0]
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	09db      	lsrs	r3, r3, #7
 8005db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8005dbe:	d8f0      	bhi.n	8005da2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	623b      	str	r3, [r7, #32]
 8005dd8:	e00b      	b.n	8005df2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	1c59      	adds	r1, r3, #1
 8005de2:	6279      	str	r1, [r7, #36]	; 0x24
 8005de4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005de8:	b2d2      	uxtb	r2, r2
 8005dea:	701a      	strb	r2, [r3, #0]
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	09db      	lsrs	r3, r3, #7
 8005df0:	623b      	str	r3, [r7, #32]
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	2b7f      	cmp	r3, #127	; 0x7f
 8005df6:	d8f0      	bhi.n	8005dda <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	627a      	str	r2, [r7, #36]	; 0x24
 8005dfe:	6a3a      	ldr	r2, [r7, #32]
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	701a      	strb	r2, [r3, #0]
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	6979      	ldr	r1, [r7, #20]
 8005e0c:	69b8      	ldr	r0, [r7, #24]
 8005e0e:	f7ff fa0b 	bl	8005228 <_SendPacket>
  RECORD_END();
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	f383 8811 	msr	BASEPRI, r3
}
 8005e18:	bf00      	nop
 8005e1a:	3738      	adds	r7, #56	; 0x38
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	20014420 	.word	0x20014420

08005e24 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b090      	sub	sp, #64	; 0x40
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e32:	f3ef 8311 	mrs	r3, BASEPRI
 8005e36:	f04f 0120 	mov.w	r1, #32
 8005e3a:	f381 8811 	msr	BASEPRI, r1
 8005e3e:	61fb      	str	r3, [r7, #28]
 8005e40:	4840      	ldr	r0, [pc, #256]	; (8005f44 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005e42:	f7ff f900 	bl	8005046 <_PreparePacket>
 8005e46:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e54:	e00b      	b.n	8005e6e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5c:	1c59      	adds	r1, r3, #1
 8005e5e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005e60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	701a      	strb	r2, [r3, #0]
 8005e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6a:	09db      	lsrs	r3, r3, #7
 8005e6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e70:	2b7f      	cmp	r3, #127	; 0x7f
 8005e72:	d8f0      	bhi.n	8005e56 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e7c:	b2d2      	uxtb	r2, r2
 8005e7e:	701a      	strb	r2, [r3, #0]
 8005e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e82:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	637b      	str	r3, [r7, #52]	; 0x34
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e8c:	e00b      	b.n	8005ea6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e94:	1c59      	adds	r1, r3, #1
 8005e96:	6379      	str	r1, [r7, #52]	; 0x34
 8005e98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e9c:	b2d2      	uxtb	r2, r2
 8005e9e:	701a      	strb	r2, [r3, #0]
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea2:	09db      	lsrs	r3, r3, #7
 8005ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eaa:	d8f0      	bhi.n	8005e8e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	637a      	str	r2, [r7, #52]	; 0x34
 8005eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	701a      	strb	r2, [r3, #0]
 8005eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ec4:	e00b      	b.n	8005ede <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ecc:	1c59      	adds	r1, r3, #1
 8005ece:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ed0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	701a      	strb	r2, [r3, #0]
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	09db      	lsrs	r3, r3, #7
 8005edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ee2:	d8f0      	bhi.n	8005ec6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eec:	b2d2      	uxtb	r2, r2
 8005eee:	701a      	strb	r2, [r3, #0]
 8005ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005efa:	623b      	str	r3, [r7, #32]
 8005efc:	e00b      	b.n	8005f16 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	1c59      	adds	r1, r3, #1
 8005f06:	6279      	str	r1, [r7, #36]	; 0x24
 8005f08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f0c:	b2d2      	uxtb	r2, r2
 8005f0e:	701a      	strb	r2, [r3, #0]
 8005f10:	6a3b      	ldr	r3, [r7, #32]
 8005f12:	09db      	lsrs	r3, r3, #7
 8005f14:	623b      	str	r3, [r7, #32]
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	2b7f      	cmp	r3, #127	; 0x7f
 8005f1a:	d8f0      	bhi.n	8005efe <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	627a      	str	r2, [r7, #36]	; 0x24
 8005f22:	6a3a      	ldr	r2, [r7, #32]
 8005f24:	b2d2      	uxtb	r2, r2
 8005f26:	701a      	strb	r2, [r3, #0]
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	6979      	ldr	r1, [r7, #20]
 8005f30:	69b8      	ldr	r0, [r7, #24]
 8005f32:	f7ff f979 	bl	8005228 <_SendPacket>
  RECORD_END();
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	f383 8811 	msr	BASEPRI, r3
}
 8005f3c:	bf00      	nop
 8005f3e:	3740      	adds	r7, #64	; 0x40
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	20014420 	.word	0x20014420

08005f48 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08c      	sub	sp, #48	; 0x30
 8005f4c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005f4e:	4b58      	ldr	r3, [pc, #352]	; (80060b0 <SEGGER_SYSVIEW_Start+0x168>)
 8005f50:	2201      	movs	r2, #1
 8005f52:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005f54:	f3ef 8311 	mrs	r3, BASEPRI
 8005f58:	f04f 0120 	mov.w	r1, #32
 8005f5c:	f381 8811 	msr	BASEPRI, r1
 8005f60:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005f62:	4b53      	ldr	r3, [pc, #332]	; (80060b0 <SEGGER_SYSVIEW_Start+0x168>)
 8005f64:	785b      	ldrb	r3, [r3, #1]
 8005f66:	220a      	movs	r2, #10
 8005f68:	4952      	ldr	r1, [pc, #328]	; (80060b4 <SEGGER_SYSVIEW_Start+0x16c>)
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fa f930 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005f76:	200a      	movs	r0, #10
 8005f78:	f7ff fe2a 	bl	8005bd0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f7c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f80:	f04f 0120 	mov.w	r1, #32
 8005f84:	f381 8811 	msr	BASEPRI, r1
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	484b      	ldr	r0, [pc, #300]	; (80060b8 <SEGGER_SYSVIEW_Start+0x170>)
 8005f8c:	f7ff f85b 	bl	8005046 <_PreparePacket>
 8005f90:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f9a:	4b45      	ldr	r3, [pc, #276]	; (80060b0 <SEGGER_SYSVIEW_Start+0x168>)
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fa0:	e00b      	b.n	8005fba <SEGGER_SYSVIEW_Start+0x72>
 8005fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa8:	1c59      	adds	r1, r3, #1
 8005faa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005fac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fb0:	b2d2      	uxtb	r2, r2
 8005fb2:	701a      	strb	r2, [r3, #0]
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	09db      	lsrs	r3, r3, #7
 8005fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbc:	2b7f      	cmp	r3, #127	; 0x7f
 8005fbe:	d8f0      	bhi.n	8005fa2 <SEGGER_SYSVIEW_Start+0x5a>
 8005fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fc8:	b2d2      	uxtb	r2, r2
 8005fca:	701a      	strb	r2, [r3, #0]
 8005fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fce:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd4:	4b36      	ldr	r3, [pc, #216]	; (80060b0 <SEGGER_SYSVIEW_Start+0x168>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	623b      	str	r3, [r7, #32]
 8005fda:	e00b      	b.n	8005ff4 <SEGGER_SYSVIEW_Start+0xac>
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	1c59      	adds	r1, r3, #1
 8005fe4:	6279      	str	r1, [r7, #36]	; 0x24
 8005fe6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fea:	b2d2      	uxtb	r2, r2
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	09db      	lsrs	r3, r3, #7
 8005ff2:	623b      	str	r3, [r7, #32]
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ff8:	d8f0      	bhi.n	8005fdc <SEGGER_SYSVIEW_Start+0x94>
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	627a      	str	r2, [r7, #36]	; 0x24
 8006000:	6a3a      	ldr	r2, [r7, #32]
 8006002:	b2d2      	uxtb	r2, r2
 8006004:	701a      	strb	r2, [r3, #0]
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	61fb      	str	r3, [r7, #28]
 800600e:	4b28      	ldr	r3, [pc, #160]	; (80060b0 <SEGGER_SYSVIEW_Start+0x168>)
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	61bb      	str	r3, [r7, #24]
 8006014:	e00b      	b.n	800602e <SEGGER_SYSVIEW_Start+0xe6>
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	b2da      	uxtb	r2, r3
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	1c59      	adds	r1, r3, #1
 800601e:	61f9      	str	r1, [r7, #28]
 8006020:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006024:	b2d2      	uxtb	r2, r2
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	09db      	lsrs	r3, r3, #7
 800602c:	61bb      	str	r3, [r7, #24]
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2b7f      	cmp	r3, #127	; 0x7f
 8006032:	d8f0      	bhi.n	8006016 <SEGGER_SYSVIEW_Start+0xce>
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	61fa      	str	r2, [r7, #28]
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	b2d2      	uxtb	r2, r2
 800603e:	701a      	strb	r2, [r3, #0]
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	2300      	movs	r3, #0
 800604a:	613b      	str	r3, [r7, #16]
 800604c:	e00b      	b.n	8006066 <SEGGER_SYSVIEW_Start+0x11e>
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	b2da      	uxtb	r2, r3
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	1c59      	adds	r1, r3, #1
 8006056:	6179      	str	r1, [r7, #20]
 8006058:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800605c:	b2d2      	uxtb	r2, r2
 800605e:	701a      	strb	r2, [r3, #0]
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	09db      	lsrs	r3, r3, #7
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	2b7f      	cmp	r3, #127	; 0x7f
 800606a:	d8f0      	bhi.n	800604e <SEGGER_SYSVIEW_Start+0x106>
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	617a      	str	r2, [r7, #20]
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	b2d2      	uxtb	r2, r2
 8006076:	701a      	strb	r2, [r3, #0]
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800607c:	2218      	movs	r2, #24
 800607e:	6839      	ldr	r1, [r7, #0]
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7ff f8d1 	bl	8005228 <_SendPacket>
      RECORD_END();
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800608c:	4b08      	ldr	r3, [pc, #32]	; (80060b0 <SEGGER_SYSVIEW_Start+0x168>)
 800608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006094:	4b06      	ldr	r3, [pc, #24]	; (80060b0 <SEGGER_SYSVIEW_Start+0x168>)
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800609a:	f000 f9eb 	bl	8006474 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800609e:	f000 f9b1 	bl	8006404 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80060a2:	f000 fc83 	bl	80069ac <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80060a6:	bf00      	nop
 80060a8:	3730      	adds	r7, #48	; 0x30
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	200143f0 	.word	0x200143f0
 80060b4:	08007620 	.word	0x08007620
 80060b8:	20014420 	.word	0x20014420

080060bc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060c2:	f3ef 8311 	mrs	r3, BASEPRI
 80060c6:	f04f 0120 	mov.w	r1, #32
 80060ca:	f381 8811 	msr	BASEPRI, r1
 80060ce:	607b      	str	r3, [r7, #4]
 80060d0:	480b      	ldr	r0, [pc, #44]	; (8006100 <SEGGER_SYSVIEW_Stop+0x44>)
 80060d2:	f7fe ffb8 	bl	8005046 <_PreparePacket>
 80060d6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80060d8:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <SEGGER_SYSVIEW_Stop+0x48>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d007      	beq.n	80060f0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80060e0:	220b      	movs	r2, #11
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6838      	ldr	r0, [r7, #0]
 80060e6:	f7ff f89f 	bl	8005228 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80060ea:	4b06      	ldr	r3, [pc, #24]	; (8006104 <SEGGER_SYSVIEW_Stop+0x48>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f383 8811 	msr	BASEPRI, r3
}
 80060f6:	bf00      	nop
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20014420 	.word	0x20014420
 8006104:	200143f0 	.word	0x200143f0

08006108 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006108:	b580      	push	{r7, lr}
 800610a:	b08c      	sub	sp, #48	; 0x30
 800610c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800610e:	f3ef 8311 	mrs	r3, BASEPRI
 8006112:	f04f 0120 	mov.w	r1, #32
 8006116:	f381 8811 	msr	BASEPRI, r1
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	4845      	ldr	r0, [pc, #276]	; (8006234 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800611e:	f7fe ff92 	bl	8005046 <_PreparePacket>
 8006122:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800612c:	4b42      	ldr	r3, [pc, #264]	; (8006238 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	62bb      	str	r3, [r7, #40]	; 0x28
 8006132:	e00b      	b.n	800614c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006136:	b2da      	uxtb	r2, r3
 8006138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613a:	1c59      	adds	r1, r3, #1
 800613c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800613e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006142:	b2d2      	uxtb	r2, r2
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006148:	09db      	lsrs	r3, r3, #7
 800614a:	62bb      	str	r3, [r7, #40]	; 0x28
 800614c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614e:	2b7f      	cmp	r3, #127	; 0x7f
 8006150:	d8f0      	bhi.n	8006134 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	701a      	strb	r2, [r3, #0]
 800615e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006160:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	627b      	str	r3, [r7, #36]	; 0x24
 8006166:	4b34      	ldr	r3, [pc, #208]	; (8006238 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	623b      	str	r3, [r7, #32]
 800616c:	e00b      	b.n	8006186 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	b2da      	uxtb	r2, r3
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	1c59      	adds	r1, r3, #1
 8006176:	6279      	str	r1, [r7, #36]	; 0x24
 8006178:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800617c:	b2d2      	uxtb	r2, r2
 800617e:	701a      	strb	r2, [r3, #0]
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	09db      	lsrs	r3, r3, #7
 8006184:	623b      	str	r3, [r7, #32]
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	2b7f      	cmp	r3, #127	; 0x7f
 800618a:	d8f0      	bhi.n	800616e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	627a      	str	r2, [r7, #36]	; 0x24
 8006192:	6a3a      	ldr	r2, [r7, #32]
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	61fb      	str	r3, [r7, #28]
 80061a0:	4b25      	ldr	r3, [pc, #148]	; (8006238 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	61bb      	str	r3, [r7, #24]
 80061a6:	e00b      	b.n	80061c0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	1c59      	adds	r1, r3, #1
 80061b0:	61f9      	str	r1, [r7, #28]
 80061b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	09db      	lsrs	r3, r3, #7
 80061be:	61bb      	str	r3, [r7, #24]
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	2b7f      	cmp	r3, #127	; 0x7f
 80061c4:	d8f0      	bhi.n	80061a8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	61fa      	str	r2, [r7, #28]
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	617b      	str	r3, [r7, #20]
 80061da:	2300      	movs	r3, #0
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	e00b      	b.n	80061f8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	1c59      	adds	r1, r3, #1
 80061e8:	6179      	str	r1, [r7, #20]
 80061ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	701a      	strb	r2, [r3, #0]
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	09db      	lsrs	r3, r3, #7
 80061f6:	613b      	str	r3, [r7, #16]
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	2b7f      	cmp	r3, #127	; 0x7f
 80061fc:	d8f0      	bhi.n	80061e0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	617a      	str	r2, [r7, #20]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	701a      	strb	r2, [r3, #0]
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800620e:	2218      	movs	r2, #24
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	68b8      	ldr	r0, [r7, #8]
 8006214:	f7ff f808 	bl	8005228 <_SendPacket>
  RECORD_END();
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800621e:	4b06      	ldr	r3, [pc, #24]	; (8006238 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006226:	4b04      	ldr	r3, [pc, #16]	; (8006238 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	4798      	blx	r3
  }
}
 800622c:	bf00      	nop
 800622e:	3730      	adds	r7, #48	; 0x30
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	20014420 	.word	0x20014420
 8006238:	200143f0 	.word	0x200143f0

0800623c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800623c:	b580      	push	{r7, lr}
 800623e:	b092      	sub	sp, #72	; 0x48
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006244:	f3ef 8311 	mrs	r3, BASEPRI
 8006248:	f04f 0120 	mov.w	r1, #32
 800624c:	f381 8811 	msr	BASEPRI, r1
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	486a      	ldr	r0, [pc, #424]	; (80063fc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006254:	f7fe fef7 	bl	8005046 <_PreparePacket>
 8006258:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	647b      	str	r3, [r7, #68]	; 0x44
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	4b66      	ldr	r3, [pc, #408]	; (8006400 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	643b      	str	r3, [r7, #64]	; 0x40
 800626e:	e00b      	b.n	8006288 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006272:	b2da      	uxtb	r2, r3
 8006274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006276:	1c59      	adds	r1, r3, #1
 8006278:	6479      	str	r1, [r7, #68]	; 0x44
 800627a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	701a      	strb	r2, [r3, #0]
 8006282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006284:	09db      	lsrs	r3, r3, #7
 8006286:	643b      	str	r3, [r7, #64]	; 0x40
 8006288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800628a:	2b7f      	cmp	r3, #127	; 0x7f
 800628c:	d8f0      	bhi.n	8006270 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800628e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	647a      	str	r2, [r7, #68]	; 0x44
 8006294:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800629c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80062a8:	e00b      	b.n	80062c2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80062aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b0:	1c59      	adds	r1, r3, #1
 80062b2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80062b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	701a      	strb	r2, [r3, #0]
 80062bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062be:	09db      	lsrs	r3, r3, #7
 80062c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80062c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c4:	2b7f      	cmp	r3, #127	; 0x7f
 80062c6:	d8f0      	bhi.n	80062aa <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80062c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80062ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	2220      	movs	r2, #32
 80062de:	4619      	mov	r1, r3
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f7fe fe63 	bl	8004fac <_EncodeStr>
 80062e6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80062e8:	2209      	movs	r2, #9
 80062ea:	68f9      	ldr	r1, [r7, #12]
 80062ec:	6938      	ldr	r0, [r7, #16]
 80062ee:	f7fe ff9b 	bl	8005228 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	637b      	str	r3, [r7, #52]	; 0x34
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	4b40      	ldr	r3, [pc, #256]	; (8006400 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	633b      	str	r3, [r7, #48]	; 0x30
 8006306:	e00b      	b.n	8006320 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	b2da      	uxtb	r2, r3
 800630c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800630e:	1c59      	adds	r1, r3, #1
 8006310:	6379      	str	r1, [r7, #52]	; 0x34
 8006312:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	09db      	lsrs	r3, r3, #7
 800631e:	633b      	str	r3, [r7, #48]	; 0x30
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	2b7f      	cmp	r3, #127	; 0x7f
 8006324:	d8f0      	bhi.n	8006308 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	637a      	str	r2, [r7, #52]	; 0x34
 800632c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	701a      	strb	r2, [r3, #0]
 8006332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006334:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006340:	e00b      	b.n	800635a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006344:	b2da      	uxtb	r2, r3
 8006346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006348:	1c59      	adds	r1, r3, #1
 800634a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800634c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	701a      	strb	r2, [r3, #0]
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	09db      	lsrs	r3, r3, #7
 8006358:	62bb      	str	r3, [r7, #40]	; 0x28
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	2b7f      	cmp	r3, #127	; 0x7f
 800635e:	d8f0      	bhi.n	8006342 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	701a      	strb	r2, [r3, #0]
 800636c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	627b      	str	r3, [r7, #36]	; 0x24
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	623b      	str	r3, [r7, #32]
 800637a:	e00b      	b.n	8006394 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	b2da      	uxtb	r2, r3
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	1c59      	adds	r1, r3, #1
 8006384:	6279      	str	r1, [r7, #36]	; 0x24
 8006386:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	09db      	lsrs	r3, r3, #7
 8006392:	623b      	str	r3, [r7, #32]
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	2b7f      	cmp	r3, #127	; 0x7f
 8006398:	d8f0      	bhi.n	800637c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	1c5a      	adds	r2, r3, #1
 800639e:	627a      	str	r2, [r7, #36]	; 0x24
 80063a0:	6a3a      	ldr	r2, [r7, #32]
 80063a2:	b2d2      	uxtb	r2, r2
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	61fb      	str	r3, [r7, #28]
 80063ae:	2300      	movs	r3, #0
 80063b0:	61bb      	str	r3, [r7, #24]
 80063b2:	e00b      	b.n	80063cc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	1c59      	adds	r1, r3, #1
 80063bc:	61f9      	str	r1, [r7, #28]
 80063be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	09db      	lsrs	r3, r3, #7
 80063ca:	61bb      	str	r3, [r7, #24]
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	2b7f      	cmp	r3, #127	; 0x7f
 80063d0:	d8f0      	bhi.n	80063b4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	61fa      	str	r2, [r7, #28]
 80063d8:	69ba      	ldr	r2, [r7, #24]
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80063e2:	2215      	movs	r2, #21
 80063e4:	68f9      	ldr	r1, [r7, #12]
 80063e6:	6938      	ldr	r0, [r7, #16]
 80063e8:	f7fe ff1e 	bl	8005228 <_SendPacket>
  RECORD_END();
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f383 8811 	msr	BASEPRI, r3
}
 80063f2:	bf00      	nop
 80063f4:	3748      	adds	r7, #72	; 0x48
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20014420 	.word	0x20014420
 8006400:	200143f0 	.word	0x200143f0

08006404 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006408:	4b07      	ldr	r3, [pc, #28]	; (8006428 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d008      	beq.n	8006422 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006410:	4b05      	ldr	r3, [pc, #20]	; (8006428 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800641a:	4b03      	ldr	r3, [pc, #12]	; (8006428 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	4798      	blx	r3
  }
}
 8006422:	bf00      	nop
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	200143f0 	.word	0x200143f0

0800642c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006434:	f3ef 8311 	mrs	r3, BASEPRI
 8006438:	f04f 0120 	mov.w	r1, #32
 800643c:	f381 8811 	msr	BASEPRI, r1
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	480b      	ldr	r0, [pc, #44]	; (8006470 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006444:	f7fe fdff 	bl	8005046 <_PreparePacket>
 8006448:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800644a:	2280      	movs	r2, #128	; 0x80
 800644c:	6879      	ldr	r1, [r7, #4]
 800644e:	6938      	ldr	r0, [r7, #16]
 8006450:	f7fe fdac 	bl	8004fac <_EncodeStr>
 8006454:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006456:	220e      	movs	r2, #14
 8006458:	68f9      	ldr	r1, [r7, #12]
 800645a:	6938      	ldr	r0, [r7, #16]
 800645c:	f7fe fee4 	bl	8005228 <_SendPacket>
  RECORD_END();
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f383 8811 	msr	BASEPRI, r3
}
 8006466:	bf00      	nop
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20014420 	.word	0x20014420

08006474 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006474:	b590      	push	{r4, r7, lr}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800647a:	4b15      	ldr	r3, [pc, #84]	; (80064d0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d01a      	beq.n	80064b8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006482:	4b13      	ldr	r3, [pc, #76]	; (80064d0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d015      	beq.n	80064b8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800648c:	4b10      	ldr	r3, [pc, #64]	; (80064d0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4798      	blx	r3
 8006494:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006498:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800649a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800649e:	f04f 0200 	mov.w	r2, #0
 80064a2:	f04f 0300 	mov.w	r3, #0
 80064a6:	000a      	movs	r2, r1
 80064a8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80064aa:	4613      	mov	r3, r2
 80064ac:	461a      	mov	r2, r3
 80064ae:	4621      	mov	r1, r4
 80064b0:	200d      	movs	r0, #13
 80064b2:	f7ff fbe7 	bl	8005c84 <SEGGER_SYSVIEW_RecordU32x2>
 80064b6:	e006      	b.n	80064c6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80064b8:	4b06      	ldr	r3, [pc, #24]	; (80064d4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4619      	mov	r1, r3
 80064be:	200c      	movs	r0, #12
 80064c0:	f7ff fba4 	bl	8005c0c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80064c4:	bf00      	nop
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd90      	pop	{r4, r7, pc}
 80064ce:	bf00      	nop
 80064d0:	200143f0 	.word	0x200143f0
 80064d4:	e0001004 	.word	0xe0001004

080064d8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80064de:	f3ef 8311 	mrs	r3, BASEPRI
 80064e2:	f04f 0120 	mov.w	r1, #32
 80064e6:	f381 8811 	msr	BASEPRI, r1
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	4819      	ldr	r0, [pc, #100]	; (8006554 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80064ee:	f7fe fdaa 	bl	8005046 <_PreparePacket>
 80064f2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80064f8:	4b17      	ldr	r3, [pc, #92]	; (8006558 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006500:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	617b      	str	r3, [r7, #20]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	613b      	str	r3, [r7, #16]
 800650a:	e00b      	b.n	8006524 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	b2da      	uxtb	r2, r3
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	1c59      	adds	r1, r3, #1
 8006514:	6179      	str	r1, [r7, #20]
 8006516:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	09db      	lsrs	r3, r3, #7
 8006522:	613b      	str	r3, [r7, #16]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	2b7f      	cmp	r3, #127	; 0x7f
 8006528:	d8f0      	bhi.n	800650c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	1c5a      	adds	r2, r3, #1
 800652e:	617a      	str	r2, [r7, #20]
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800653a:	2202      	movs	r2, #2
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	68b8      	ldr	r0, [r7, #8]
 8006540:	f7fe fe72 	bl	8005228 <_SendPacket>
  RECORD_END();
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f383 8811 	msr	BASEPRI, r3
}
 800654a:	bf00      	nop
 800654c:	3718      	adds	r7, #24
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20014420 	.word	0x20014420
 8006558:	e000ed04 	.word	0xe000ed04

0800655c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006562:	f3ef 8311 	mrs	r3, BASEPRI
 8006566:	f04f 0120 	mov.w	r1, #32
 800656a:	f381 8811 	msr	BASEPRI, r1
 800656e:	607b      	str	r3, [r7, #4]
 8006570:	4807      	ldr	r0, [pc, #28]	; (8006590 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006572:	f7fe fd68 	bl	8005046 <_PreparePacket>
 8006576:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006578:	2203      	movs	r2, #3
 800657a:	6839      	ldr	r1, [r7, #0]
 800657c:	6838      	ldr	r0, [r7, #0]
 800657e:	f7fe fe53 	bl	8005228 <_SendPacket>
  RECORD_END();
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f383 8811 	msr	BASEPRI, r3
}
 8006588:	bf00      	nop
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	20014420 	.word	0x20014420

08006594 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800659a:	f3ef 8311 	mrs	r3, BASEPRI
 800659e:	f04f 0120 	mov.w	r1, #32
 80065a2:	f381 8811 	msr	BASEPRI, r1
 80065a6:	607b      	str	r3, [r7, #4]
 80065a8:	4807      	ldr	r0, [pc, #28]	; (80065c8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80065aa:	f7fe fd4c 	bl	8005046 <_PreparePacket>
 80065ae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80065b0:	2212      	movs	r2, #18
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6838      	ldr	r0, [r7, #0]
 80065b6:	f7fe fe37 	bl	8005228 <_SendPacket>
  RECORD_END();
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f383 8811 	msr	BASEPRI, r3
}
 80065c0:	bf00      	nop
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20014420 	.word	0x20014420

080065cc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065d2:	f3ef 8311 	mrs	r3, BASEPRI
 80065d6:	f04f 0120 	mov.w	r1, #32
 80065da:	f381 8811 	msr	BASEPRI, r1
 80065de:	607b      	str	r3, [r7, #4]
 80065e0:	4807      	ldr	r0, [pc, #28]	; (8006600 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80065e2:	f7fe fd30 	bl	8005046 <_PreparePacket>
 80065e6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80065e8:	2211      	movs	r2, #17
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	6838      	ldr	r0, [r7, #0]
 80065ee:	f7fe fe1b 	bl	8005228 <_SendPacket>
  RECORD_END();
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f383 8811 	msr	BASEPRI, r3
}
 80065f8:	bf00      	nop
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	20014420 	.word	0x20014420

08006604 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006604:	b580      	push	{r7, lr}
 8006606:	b088      	sub	sp, #32
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800660c:	f3ef 8311 	mrs	r3, BASEPRI
 8006610:	f04f 0120 	mov.w	r1, #32
 8006614:	f381 8811 	msr	BASEPRI, r1
 8006618:	617b      	str	r3, [r7, #20]
 800661a:	4819      	ldr	r0, [pc, #100]	; (8006680 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800661c:	f7fe fd13 	bl	8005046 <_PreparePacket>
 8006620:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006626:	4b17      	ldr	r3, [pc, #92]	; (8006684 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	61fb      	str	r3, [r7, #28]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	61bb      	str	r3, [r7, #24]
 8006638:	e00b      	b.n	8006652 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	b2da      	uxtb	r2, r3
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	1c59      	adds	r1, r3, #1
 8006642:	61f9      	str	r1, [r7, #28]
 8006644:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006648:	b2d2      	uxtb	r2, r2
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	09db      	lsrs	r3, r3, #7
 8006650:	61bb      	str	r3, [r7, #24]
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	2b7f      	cmp	r3, #127	; 0x7f
 8006656:	d8f0      	bhi.n	800663a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	1c5a      	adds	r2, r3, #1
 800665c:	61fa      	str	r2, [r7, #28]
 800665e:	69ba      	ldr	r2, [r7, #24]
 8006660:	b2d2      	uxtb	r2, r2
 8006662:	701a      	strb	r2, [r3, #0]
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006668:	2208      	movs	r2, #8
 800666a:	68f9      	ldr	r1, [r7, #12]
 800666c:	6938      	ldr	r0, [r7, #16]
 800666e:	f7fe fddb 	bl	8005228 <_SendPacket>
  RECORD_END();
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f383 8811 	msr	BASEPRI, r3
}
 8006678:	bf00      	nop
 800667a:	3720      	adds	r7, #32
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20014420 	.word	0x20014420
 8006684:	200143f0 	.word	0x200143f0

08006688 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006688:	b580      	push	{r7, lr}
 800668a:	b088      	sub	sp, #32
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006690:	f3ef 8311 	mrs	r3, BASEPRI
 8006694:	f04f 0120 	mov.w	r1, #32
 8006698:	f381 8811 	msr	BASEPRI, r1
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	4819      	ldr	r0, [pc, #100]	; (8006704 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80066a0:	f7fe fcd1 	bl	8005046 <_PreparePacket>
 80066a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80066aa:	4b17      	ldr	r3, [pc, #92]	; (8006708 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	61fb      	str	r3, [r7, #28]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	61bb      	str	r3, [r7, #24]
 80066bc:	e00b      	b.n	80066d6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	1c59      	adds	r1, r3, #1
 80066c6:	61f9      	str	r1, [r7, #28]
 80066c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	09db      	lsrs	r3, r3, #7
 80066d4:	61bb      	str	r3, [r7, #24]
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2b7f      	cmp	r3, #127	; 0x7f
 80066da:	d8f0      	bhi.n	80066be <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	61fa      	str	r2, [r7, #28]
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	b2d2      	uxtb	r2, r2
 80066e6:	701a      	strb	r2, [r3, #0]
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80066ec:	2204      	movs	r2, #4
 80066ee:	68f9      	ldr	r1, [r7, #12]
 80066f0:	6938      	ldr	r0, [r7, #16]
 80066f2:	f7fe fd99 	bl	8005228 <_SendPacket>
  RECORD_END();
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f383 8811 	msr	BASEPRI, r3
}
 80066fc:	bf00      	nop
 80066fe:	3720      	adds	r7, #32
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	20014420 	.word	0x20014420
 8006708:	200143f0 	.word	0x200143f0

0800670c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800670c:	b580      	push	{r7, lr}
 800670e:	b088      	sub	sp, #32
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006714:	f3ef 8311 	mrs	r3, BASEPRI
 8006718:	f04f 0120 	mov.w	r1, #32
 800671c:	f381 8811 	msr	BASEPRI, r1
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	4819      	ldr	r0, [pc, #100]	; (8006788 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006724:	f7fe fc8f 	bl	8005046 <_PreparePacket>
 8006728:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800672e:	4b17      	ldr	r3, [pc, #92]	; (800678c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	61fb      	str	r3, [r7, #28]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	61bb      	str	r3, [r7, #24]
 8006740:	e00b      	b.n	800675a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	b2da      	uxtb	r2, r3
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	1c59      	adds	r1, r3, #1
 800674a:	61f9      	str	r1, [r7, #28]
 800674c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006750:	b2d2      	uxtb	r2, r2
 8006752:	701a      	strb	r2, [r3, #0]
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	09db      	lsrs	r3, r3, #7
 8006758:	61bb      	str	r3, [r7, #24]
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	2b7f      	cmp	r3, #127	; 0x7f
 800675e:	d8f0      	bhi.n	8006742 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	61fa      	str	r2, [r7, #28]
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	701a      	strb	r2, [r3, #0]
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006770:	2206      	movs	r2, #6
 8006772:	68f9      	ldr	r1, [r7, #12]
 8006774:	6938      	ldr	r0, [r7, #16]
 8006776:	f7fe fd57 	bl	8005228 <_SendPacket>
  RECORD_END();
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f383 8811 	msr	BASEPRI, r3
}
 8006780:	bf00      	nop
 8006782:	3720      	adds	r7, #32
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	20014420 	.word	0x20014420
 800678c:	200143f0 	.word	0x200143f0

08006790 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006790:	b580      	push	{r7, lr}
 8006792:	b08a      	sub	sp, #40	; 0x28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800679a:	f3ef 8311 	mrs	r3, BASEPRI
 800679e:	f04f 0120 	mov.w	r1, #32
 80067a2:	f381 8811 	msr	BASEPRI, r1
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	4827      	ldr	r0, [pc, #156]	; (8006848 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80067aa:	f7fe fc4c 	bl	8005046 <_PreparePacket>
 80067ae:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80067b4:	4b25      	ldr	r3, [pc, #148]	; (800684c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	623b      	str	r3, [r7, #32]
 80067c6:	e00b      	b.n	80067e0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	1c59      	adds	r1, r3, #1
 80067d0:	6279      	str	r1, [r7, #36]	; 0x24
 80067d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067d6:	b2d2      	uxtb	r2, r2
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	09db      	lsrs	r3, r3, #7
 80067de:	623b      	str	r3, [r7, #32]
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	2b7f      	cmp	r3, #127	; 0x7f
 80067e4:	d8f0      	bhi.n	80067c8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	1c5a      	adds	r2, r3, #1
 80067ea:	627a      	str	r2, [r7, #36]	; 0x24
 80067ec:	6a3a      	ldr	r2, [r7, #32]
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	61fb      	str	r3, [r7, #28]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	61bb      	str	r3, [r7, #24]
 80067fe:	e00b      	b.n	8006818 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	b2da      	uxtb	r2, r3
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	1c59      	adds	r1, r3, #1
 8006808:	61f9      	str	r1, [r7, #28]
 800680a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800680e:	b2d2      	uxtb	r2, r2
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	09db      	lsrs	r3, r3, #7
 8006816:	61bb      	str	r3, [r7, #24]
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	2b7f      	cmp	r3, #127	; 0x7f
 800681c:	d8f0      	bhi.n	8006800 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	61fa      	str	r2, [r7, #28]
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800682e:	2207      	movs	r2, #7
 8006830:	68f9      	ldr	r1, [r7, #12]
 8006832:	6938      	ldr	r0, [r7, #16]
 8006834:	f7fe fcf8 	bl	8005228 <_SendPacket>
  RECORD_END();
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f383 8811 	msr	BASEPRI, r3
}
 800683e:	bf00      	nop
 8006840:	3728      	adds	r7, #40	; 0x28
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	20014420 	.word	0x20014420
 800684c:	200143f0 	.word	0x200143f0

08006850 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006858:	4b04      	ldr	r3, [pc, #16]	; (800686c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	1ad3      	subs	r3, r2, r3
}
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	200143f0 	.word	0x200143f0

08006870 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006870:	b580      	push	{r7, lr}
 8006872:	b08c      	sub	sp, #48	; 0x30
 8006874:	af00      	add	r7, sp, #0
 8006876:	4603      	mov	r3, r0
 8006878:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800687a:	4b3b      	ldr	r3, [pc, #236]	; (8006968 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d06d      	beq.n	800695e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006882:	4b39      	ldr	r3, [pc, #228]	; (8006968 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006888:	2300      	movs	r3, #0
 800688a:	62bb      	str	r3, [r7, #40]	; 0x28
 800688c:	e008      	b.n	80068a0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800688e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006896:	2b00      	cmp	r3, #0
 8006898:	d007      	beq.n	80068aa <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	3301      	adds	r3, #1
 800689e:	62bb      	str	r3, [r7, #40]	; 0x28
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d3f2      	bcc.n	800688e <SEGGER_SYSVIEW_SendModule+0x1e>
 80068a8:	e000      	b.n	80068ac <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80068aa:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80068ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d055      	beq.n	800695e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068b2:	f3ef 8311 	mrs	r3, BASEPRI
 80068b6:	f04f 0120 	mov.w	r1, #32
 80068ba:	f381 8811 	msr	BASEPRI, r1
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	482a      	ldr	r0, [pc, #168]	; (800696c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80068c2:	f7fe fbc0 	bl	8005046 <_PreparePacket>
 80068c6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	627b      	str	r3, [r7, #36]	; 0x24
 80068d0:	79fb      	ldrb	r3, [r7, #7]
 80068d2:	623b      	str	r3, [r7, #32]
 80068d4:	e00b      	b.n	80068ee <SEGGER_SYSVIEW_SendModule+0x7e>
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	1c59      	adds	r1, r3, #1
 80068de:	6279      	str	r1, [r7, #36]	; 0x24
 80068e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068e4:	b2d2      	uxtb	r2, r2
 80068e6:	701a      	strb	r2, [r3, #0]
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	09db      	lsrs	r3, r3, #7
 80068ec:	623b      	str	r3, [r7, #32]
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	2b7f      	cmp	r3, #127	; 0x7f
 80068f2:	d8f0      	bhi.n	80068d6 <SEGGER_SYSVIEW_SendModule+0x66>
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	627a      	str	r2, [r7, #36]	; 0x24
 80068fa:	6a3a      	ldr	r2, [r7, #32]
 80068fc:	b2d2      	uxtb	r2, r2
 80068fe:	701a      	strb	r2, [r3, #0]
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	61fb      	str	r3, [r7, #28]
 8006908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	61bb      	str	r3, [r7, #24]
 800690e:	e00b      	b.n	8006928 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	b2da      	uxtb	r2, r3
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	1c59      	adds	r1, r3, #1
 8006918:	61f9      	str	r1, [r7, #28]
 800691a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800691e:	b2d2      	uxtb	r2, r2
 8006920:	701a      	strb	r2, [r3, #0]
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	09db      	lsrs	r3, r3, #7
 8006926:	61bb      	str	r3, [r7, #24]
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	2b7f      	cmp	r3, #127	; 0x7f
 800692c:	d8f0      	bhi.n	8006910 <SEGGER_SYSVIEW_SendModule+0xa0>
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	61fa      	str	r2, [r7, #28]
 8006934:	69ba      	ldr	r2, [r7, #24]
 8006936:	b2d2      	uxtb	r2, r2
 8006938:	701a      	strb	r2, [r3, #0]
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800693e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2280      	movs	r2, #128	; 0x80
 8006944:	4619      	mov	r1, r3
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f7fe fb30 	bl	8004fac <_EncodeStr>
 800694c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800694e:	2216      	movs	r2, #22
 8006950:	68f9      	ldr	r1, [r7, #12]
 8006952:	6938      	ldr	r0, [r7, #16]
 8006954:	f7fe fc68 	bl	8005228 <_SendPacket>
      RECORD_END();
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800695e:	bf00      	nop
 8006960:	3730      	adds	r7, #48	; 0x30
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20014418 	.word	0x20014418
 800696c:	20014420 	.word	0x20014420

08006970 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006976:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00f      	beq.n	800699e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800697e:	4b0a      	ldr	r3, [pc, #40]	; (80069a8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d002      	beq.n	8006992 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1f2      	bne.n	8006984 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800699e:	bf00      	nop
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20014418 	.word	0x20014418

080069ac <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80069b2:	f3ef 8311 	mrs	r3, BASEPRI
 80069b6:	f04f 0120 	mov.w	r1, #32
 80069ba:	f381 8811 	msr	BASEPRI, r1
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	4817      	ldr	r0, [pc, #92]	; (8006a20 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80069c2:	f7fe fb40 	bl	8005046 <_PreparePacket>
 80069c6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	4b14      	ldr	r3, [pc, #80]	; (8006a24 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	613b      	str	r3, [r7, #16]
 80069d6:	e00b      	b.n	80069f0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	1c59      	adds	r1, r3, #1
 80069e0:	6179      	str	r1, [r7, #20]
 80069e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069e6:	b2d2      	uxtb	r2, r2
 80069e8:	701a      	strb	r2, [r3, #0]
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	09db      	lsrs	r3, r3, #7
 80069ee:	613b      	str	r3, [r7, #16]
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	2b7f      	cmp	r3, #127	; 0x7f
 80069f4:	d8f0      	bhi.n	80069d8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	617a      	str	r2, [r7, #20]
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	b2d2      	uxtb	r2, r2
 8006a00:	701a      	strb	r2, [r3, #0]
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006a06:	221b      	movs	r2, #27
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	68b8      	ldr	r0, [r7, #8]
 8006a0c:	f7fe fc0c 	bl	8005228 <_SendPacket>
  RECORD_END();
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f383 8811 	msr	BASEPRI, r3
}
 8006a16:	bf00      	nop
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	20014420 	.word	0x20014420
 8006a24:	2001441c 	.word	0x2001441c

08006a28 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006a28:	b40f      	push	{r0, r1, r2, r3}
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b082      	sub	sp, #8
 8006a2e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006a30:	f107 0314 	add.w	r3, r7, #20
 8006a34:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006a36:	1d3b      	adds	r3, r7, #4
 8006a38:	461a      	mov	r2, r3
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	6938      	ldr	r0, [r7, #16]
 8006a3e:	f7fe fe7b 	bl	8005738 <_VPrintTarget>
  va_end(ParamList);
}
 8006a42:	bf00      	nop
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a4c:	b004      	add	sp, #16
 8006a4e:	4770      	bx	lr

08006a50 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08a      	sub	sp, #40	; 0x28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a58:	f3ef 8311 	mrs	r3, BASEPRI
 8006a5c:	f04f 0120 	mov.w	r1, #32
 8006a60:	f381 8811 	msr	BASEPRI, r1
 8006a64:	617b      	str	r3, [r7, #20]
 8006a66:	4827      	ldr	r0, [pc, #156]	; (8006b04 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006a68:	f7fe faed 	bl	8005046 <_PreparePacket>
 8006a6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a6e:	2280      	movs	r2, #128	; 0x80
 8006a70:	6879      	ldr	r1, [r7, #4]
 8006a72:	6938      	ldr	r0, [r7, #16]
 8006a74:	f7fe fa9a 	bl	8004fac <_EncodeStr>
 8006a78:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a7e:	2301      	movs	r3, #1
 8006a80:	623b      	str	r3, [r7, #32]
 8006a82:	e00b      	b.n	8006a9c <SEGGER_SYSVIEW_Warn+0x4c>
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	1c59      	adds	r1, r3, #1
 8006a8c:	6279      	str	r1, [r7, #36]	; 0x24
 8006a8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a92:	b2d2      	uxtb	r2, r2
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	09db      	lsrs	r3, r3, #7
 8006a9a:	623b      	str	r3, [r7, #32]
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	2b7f      	cmp	r3, #127	; 0x7f
 8006aa0:	d8f0      	bhi.n	8006a84 <SEGGER_SYSVIEW_Warn+0x34>
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	1c5a      	adds	r2, r3, #1
 8006aa6:	627a      	str	r2, [r7, #36]	; 0x24
 8006aa8:	6a3a      	ldr	r2, [r7, #32]
 8006aaa:	b2d2      	uxtb	r2, r2
 8006aac:	701a      	strb	r2, [r3, #0]
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	61bb      	str	r3, [r7, #24]
 8006aba:	e00b      	b.n	8006ad4 <SEGGER_SYSVIEW_Warn+0x84>
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	1c59      	adds	r1, r3, #1
 8006ac4:	61f9      	str	r1, [r7, #28]
 8006ac6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	09db      	lsrs	r3, r3, #7
 8006ad2:	61bb      	str	r3, [r7, #24]
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ad8:	d8f0      	bhi.n	8006abc <SEGGER_SYSVIEW_Warn+0x6c>
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	61fa      	str	r2, [r7, #28]
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006aea:	221a      	movs	r2, #26
 8006aec:	68f9      	ldr	r1, [r7, #12]
 8006aee:	6938      	ldr	r0, [r7, #16]
 8006af0:	f7fe fb9a 	bl	8005228 <_SendPacket>
  RECORD_END();
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f383 8811 	msr	BASEPRI, r3
}
 8006afa:	bf00      	nop
 8006afc:	3728      	adds	r7, #40	; 0x28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20014420 	.word	0x20014420

08006b08 <__libc_init_array>:
 8006b08:	b570      	push	{r4, r5, r6, lr}
 8006b0a:	4d0d      	ldr	r5, [pc, #52]	; (8006b40 <__libc_init_array+0x38>)
 8006b0c:	4c0d      	ldr	r4, [pc, #52]	; (8006b44 <__libc_init_array+0x3c>)
 8006b0e:	1b64      	subs	r4, r4, r5
 8006b10:	10a4      	asrs	r4, r4, #2
 8006b12:	2600      	movs	r6, #0
 8006b14:	42a6      	cmp	r6, r4
 8006b16:	d109      	bne.n	8006b2c <__libc_init_array+0x24>
 8006b18:	4d0b      	ldr	r5, [pc, #44]	; (8006b48 <__libc_init_array+0x40>)
 8006b1a:	4c0c      	ldr	r4, [pc, #48]	; (8006b4c <__libc_init_array+0x44>)
 8006b1c:	f000 fcc0 	bl	80074a0 <_init>
 8006b20:	1b64      	subs	r4, r4, r5
 8006b22:	10a4      	asrs	r4, r4, #2
 8006b24:	2600      	movs	r6, #0
 8006b26:	42a6      	cmp	r6, r4
 8006b28:	d105      	bne.n	8006b36 <__libc_init_array+0x2e>
 8006b2a:	bd70      	pop	{r4, r5, r6, pc}
 8006b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b30:	4798      	blx	r3
 8006b32:	3601      	adds	r6, #1
 8006b34:	e7ee      	b.n	8006b14 <__libc_init_array+0xc>
 8006b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b3a:	4798      	blx	r3
 8006b3c:	3601      	adds	r6, #1
 8006b3e:	e7f2      	b.n	8006b26 <__libc_init_array+0x1e>
 8006b40:	08007670 	.word	0x08007670
 8006b44:	08007670 	.word	0x08007670
 8006b48:	08007670 	.word	0x08007670
 8006b4c:	08007674 	.word	0x08007674

08006b50 <memcmp>:
 8006b50:	b510      	push	{r4, lr}
 8006b52:	3901      	subs	r1, #1
 8006b54:	4402      	add	r2, r0
 8006b56:	4290      	cmp	r0, r2
 8006b58:	d101      	bne.n	8006b5e <memcmp+0xe>
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	e005      	b.n	8006b6a <memcmp+0x1a>
 8006b5e:	7803      	ldrb	r3, [r0, #0]
 8006b60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006b64:	42a3      	cmp	r3, r4
 8006b66:	d001      	beq.n	8006b6c <memcmp+0x1c>
 8006b68:	1b18      	subs	r0, r3, r4
 8006b6a:	bd10      	pop	{r4, pc}
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	e7f2      	b.n	8006b56 <memcmp+0x6>

08006b70 <memcpy>:
 8006b70:	440a      	add	r2, r1
 8006b72:	4291      	cmp	r1, r2
 8006b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b78:	d100      	bne.n	8006b7c <memcpy+0xc>
 8006b7a:	4770      	bx	lr
 8006b7c:	b510      	push	{r4, lr}
 8006b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b86:	4291      	cmp	r1, r2
 8006b88:	d1f9      	bne.n	8006b7e <memcpy+0xe>
 8006b8a:	bd10      	pop	{r4, pc}

08006b8c <memset>:
 8006b8c:	4402      	add	r2, r0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d100      	bne.n	8006b96 <memset+0xa>
 8006b94:	4770      	bx	lr
 8006b96:	f803 1b01 	strb.w	r1, [r3], #1
 8006b9a:	e7f9      	b.n	8006b90 <memset+0x4>

08006b9c <sniprintf>:
 8006b9c:	b40c      	push	{r2, r3}
 8006b9e:	b530      	push	{r4, r5, lr}
 8006ba0:	4b17      	ldr	r3, [pc, #92]	; (8006c00 <sniprintf+0x64>)
 8006ba2:	1e0c      	subs	r4, r1, #0
 8006ba4:	681d      	ldr	r5, [r3, #0]
 8006ba6:	b09d      	sub	sp, #116	; 0x74
 8006ba8:	da08      	bge.n	8006bbc <sniprintf+0x20>
 8006baa:	238b      	movs	r3, #139	; 0x8b
 8006bac:	602b      	str	r3, [r5, #0]
 8006bae:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb2:	b01d      	add	sp, #116	; 0x74
 8006bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bb8:	b002      	add	sp, #8
 8006bba:	4770      	bx	lr
 8006bbc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006bc0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006bc4:	bf14      	ite	ne
 8006bc6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006bca:	4623      	moveq	r3, r4
 8006bcc:	9304      	str	r3, [sp, #16]
 8006bce:	9307      	str	r3, [sp, #28]
 8006bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006bd4:	9002      	str	r0, [sp, #8]
 8006bd6:	9006      	str	r0, [sp, #24]
 8006bd8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006bdc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006bde:	ab21      	add	r3, sp, #132	; 0x84
 8006be0:	a902      	add	r1, sp, #8
 8006be2:	4628      	mov	r0, r5
 8006be4:	9301      	str	r3, [sp, #4]
 8006be6:	f000 f869 	bl	8006cbc <_svfiprintf_r>
 8006bea:	1c43      	adds	r3, r0, #1
 8006bec:	bfbc      	itt	lt
 8006bee:	238b      	movlt	r3, #139	; 0x8b
 8006bf0:	602b      	strlt	r3, [r5, #0]
 8006bf2:	2c00      	cmp	r4, #0
 8006bf4:	d0dd      	beq.n	8006bb2 <sniprintf+0x16>
 8006bf6:	9b02      	ldr	r3, [sp, #8]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	701a      	strb	r2, [r3, #0]
 8006bfc:	e7d9      	b.n	8006bb2 <sniprintf+0x16>
 8006bfe:	bf00      	nop
 8006c00:	20000014 	.word	0x20000014

08006c04 <__ssputs_r>:
 8006c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c08:	688e      	ldr	r6, [r1, #8]
 8006c0a:	429e      	cmp	r6, r3
 8006c0c:	4682      	mov	sl, r0
 8006c0e:	460c      	mov	r4, r1
 8006c10:	4690      	mov	r8, r2
 8006c12:	461f      	mov	r7, r3
 8006c14:	d838      	bhi.n	8006c88 <__ssputs_r+0x84>
 8006c16:	898a      	ldrh	r2, [r1, #12]
 8006c18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c1c:	d032      	beq.n	8006c84 <__ssputs_r+0x80>
 8006c1e:	6825      	ldr	r5, [r4, #0]
 8006c20:	6909      	ldr	r1, [r1, #16]
 8006c22:	eba5 0901 	sub.w	r9, r5, r1
 8006c26:	6965      	ldr	r5, [r4, #20]
 8006c28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c30:	3301      	adds	r3, #1
 8006c32:	444b      	add	r3, r9
 8006c34:	106d      	asrs	r5, r5, #1
 8006c36:	429d      	cmp	r5, r3
 8006c38:	bf38      	it	cc
 8006c3a:	461d      	movcc	r5, r3
 8006c3c:	0553      	lsls	r3, r2, #21
 8006c3e:	d531      	bpl.n	8006ca4 <__ssputs_r+0xa0>
 8006c40:	4629      	mov	r1, r5
 8006c42:	f000 fb55 	bl	80072f0 <_malloc_r>
 8006c46:	4606      	mov	r6, r0
 8006c48:	b950      	cbnz	r0, 8006c60 <__ssputs_r+0x5c>
 8006c4a:	230c      	movs	r3, #12
 8006c4c:	f8ca 3000 	str.w	r3, [sl]
 8006c50:	89a3      	ldrh	r3, [r4, #12]
 8006c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c56:	81a3      	strh	r3, [r4, #12]
 8006c58:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c60:	6921      	ldr	r1, [r4, #16]
 8006c62:	464a      	mov	r2, r9
 8006c64:	f7ff ff84 	bl	8006b70 <memcpy>
 8006c68:	89a3      	ldrh	r3, [r4, #12]
 8006c6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c72:	81a3      	strh	r3, [r4, #12]
 8006c74:	6126      	str	r6, [r4, #16]
 8006c76:	6165      	str	r5, [r4, #20]
 8006c78:	444e      	add	r6, r9
 8006c7a:	eba5 0509 	sub.w	r5, r5, r9
 8006c7e:	6026      	str	r6, [r4, #0]
 8006c80:	60a5      	str	r5, [r4, #8]
 8006c82:	463e      	mov	r6, r7
 8006c84:	42be      	cmp	r6, r7
 8006c86:	d900      	bls.n	8006c8a <__ssputs_r+0x86>
 8006c88:	463e      	mov	r6, r7
 8006c8a:	6820      	ldr	r0, [r4, #0]
 8006c8c:	4632      	mov	r2, r6
 8006c8e:	4641      	mov	r1, r8
 8006c90:	f000 faa8 	bl	80071e4 <memmove>
 8006c94:	68a3      	ldr	r3, [r4, #8]
 8006c96:	1b9b      	subs	r3, r3, r6
 8006c98:	60a3      	str	r3, [r4, #8]
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	4433      	add	r3, r6
 8006c9e:	6023      	str	r3, [r4, #0]
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	e7db      	b.n	8006c5c <__ssputs_r+0x58>
 8006ca4:	462a      	mov	r2, r5
 8006ca6:	f000 fb97 	bl	80073d8 <_realloc_r>
 8006caa:	4606      	mov	r6, r0
 8006cac:	2800      	cmp	r0, #0
 8006cae:	d1e1      	bne.n	8006c74 <__ssputs_r+0x70>
 8006cb0:	6921      	ldr	r1, [r4, #16]
 8006cb2:	4650      	mov	r0, sl
 8006cb4:	f000 fab0 	bl	8007218 <_free_r>
 8006cb8:	e7c7      	b.n	8006c4a <__ssputs_r+0x46>
	...

08006cbc <_svfiprintf_r>:
 8006cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc0:	4698      	mov	r8, r3
 8006cc2:	898b      	ldrh	r3, [r1, #12]
 8006cc4:	061b      	lsls	r3, r3, #24
 8006cc6:	b09d      	sub	sp, #116	; 0x74
 8006cc8:	4607      	mov	r7, r0
 8006cca:	460d      	mov	r5, r1
 8006ccc:	4614      	mov	r4, r2
 8006cce:	d50e      	bpl.n	8006cee <_svfiprintf_r+0x32>
 8006cd0:	690b      	ldr	r3, [r1, #16]
 8006cd2:	b963      	cbnz	r3, 8006cee <_svfiprintf_r+0x32>
 8006cd4:	2140      	movs	r1, #64	; 0x40
 8006cd6:	f000 fb0b 	bl	80072f0 <_malloc_r>
 8006cda:	6028      	str	r0, [r5, #0]
 8006cdc:	6128      	str	r0, [r5, #16]
 8006cde:	b920      	cbnz	r0, 8006cea <_svfiprintf_r+0x2e>
 8006ce0:	230c      	movs	r3, #12
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce8:	e0d1      	b.n	8006e8e <_svfiprintf_r+0x1d2>
 8006cea:	2340      	movs	r3, #64	; 0x40
 8006cec:	616b      	str	r3, [r5, #20]
 8006cee:	2300      	movs	r3, #0
 8006cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf2:	2320      	movs	r3, #32
 8006cf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cfc:	2330      	movs	r3, #48	; 0x30
 8006cfe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ea8 <_svfiprintf_r+0x1ec>
 8006d02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d06:	f04f 0901 	mov.w	r9, #1
 8006d0a:	4623      	mov	r3, r4
 8006d0c:	469a      	mov	sl, r3
 8006d0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d12:	b10a      	cbz	r2, 8006d18 <_svfiprintf_r+0x5c>
 8006d14:	2a25      	cmp	r2, #37	; 0x25
 8006d16:	d1f9      	bne.n	8006d0c <_svfiprintf_r+0x50>
 8006d18:	ebba 0b04 	subs.w	fp, sl, r4
 8006d1c:	d00b      	beq.n	8006d36 <_svfiprintf_r+0x7a>
 8006d1e:	465b      	mov	r3, fp
 8006d20:	4622      	mov	r2, r4
 8006d22:	4629      	mov	r1, r5
 8006d24:	4638      	mov	r0, r7
 8006d26:	f7ff ff6d 	bl	8006c04 <__ssputs_r>
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	f000 80aa 	beq.w	8006e84 <_svfiprintf_r+0x1c8>
 8006d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d32:	445a      	add	r2, fp
 8006d34:	9209      	str	r2, [sp, #36]	; 0x24
 8006d36:	f89a 3000 	ldrb.w	r3, [sl]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 80a2 	beq.w	8006e84 <_svfiprintf_r+0x1c8>
 8006d40:	2300      	movs	r3, #0
 8006d42:	f04f 32ff 	mov.w	r2, #4294967295
 8006d46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d4a:	f10a 0a01 	add.w	sl, sl, #1
 8006d4e:	9304      	str	r3, [sp, #16]
 8006d50:	9307      	str	r3, [sp, #28]
 8006d52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d56:	931a      	str	r3, [sp, #104]	; 0x68
 8006d58:	4654      	mov	r4, sl
 8006d5a:	2205      	movs	r2, #5
 8006d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d60:	4851      	ldr	r0, [pc, #324]	; (8006ea8 <_svfiprintf_r+0x1ec>)
 8006d62:	f7f9 fa85 	bl	8000270 <memchr>
 8006d66:	9a04      	ldr	r2, [sp, #16]
 8006d68:	b9d8      	cbnz	r0, 8006da2 <_svfiprintf_r+0xe6>
 8006d6a:	06d0      	lsls	r0, r2, #27
 8006d6c:	bf44      	itt	mi
 8006d6e:	2320      	movmi	r3, #32
 8006d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d74:	0711      	lsls	r1, r2, #28
 8006d76:	bf44      	itt	mi
 8006d78:	232b      	movmi	r3, #43	; 0x2b
 8006d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d82:	2b2a      	cmp	r3, #42	; 0x2a
 8006d84:	d015      	beq.n	8006db2 <_svfiprintf_r+0xf6>
 8006d86:	9a07      	ldr	r2, [sp, #28]
 8006d88:	4654      	mov	r4, sl
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	f04f 0c0a 	mov.w	ip, #10
 8006d90:	4621      	mov	r1, r4
 8006d92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d96:	3b30      	subs	r3, #48	; 0x30
 8006d98:	2b09      	cmp	r3, #9
 8006d9a:	d94e      	bls.n	8006e3a <_svfiprintf_r+0x17e>
 8006d9c:	b1b0      	cbz	r0, 8006dcc <_svfiprintf_r+0x110>
 8006d9e:	9207      	str	r2, [sp, #28]
 8006da0:	e014      	b.n	8006dcc <_svfiprintf_r+0x110>
 8006da2:	eba0 0308 	sub.w	r3, r0, r8
 8006da6:	fa09 f303 	lsl.w	r3, r9, r3
 8006daa:	4313      	orrs	r3, r2
 8006dac:	9304      	str	r3, [sp, #16]
 8006dae:	46a2      	mov	sl, r4
 8006db0:	e7d2      	b.n	8006d58 <_svfiprintf_r+0x9c>
 8006db2:	9b03      	ldr	r3, [sp, #12]
 8006db4:	1d19      	adds	r1, r3, #4
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	9103      	str	r1, [sp, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	bfbb      	ittet	lt
 8006dbe:	425b      	neglt	r3, r3
 8006dc0:	f042 0202 	orrlt.w	r2, r2, #2
 8006dc4:	9307      	strge	r3, [sp, #28]
 8006dc6:	9307      	strlt	r3, [sp, #28]
 8006dc8:	bfb8      	it	lt
 8006dca:	9204      	strlt	r2, [sp, #16]
 8006dcc:	7823      	ldrb	r3, [r4, #0]
 8006dce:	2b2e      	cmp	r3, #46	; 0x2e
 8006dd0:	d10c      	bne.n	8006dec <_svfiprintf_r+0x130>
 8006dd2:	7863      	ldrb	r3, [r4, #1]
 8006dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8006dd6:	d135      	bne.n	8006e44 <_svfiprintf_r+0x188>
 8006dd8:	9b03      	ldr	r3, [sp, #12]
 8006dda:	1d1a      	adds	r2, r3, #4
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	9203      	str	r2, [sp, #12]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	bfb8      	it	lt
 8006de4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006de8:	3402      	adds	r4, #2
 8006dea:	9305      	str	r3, [sp, #20]
 8006dec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006eb8 <_svfiprintf_r+0x1fc>
 8006df0:	7821      	ldrb	r1, [r4, #0]
 8006df2:	2203      	movs	r2, #3
 8006df4:	4650      	mov	r0, sl
 8006df6:	f7f9 fa3b 	bl	8000270 <memchr>
 8006dfa:	b140      	cbz	r0, 8006e0e <_svfiprintf_r+0x152>
 8006dfc:	2340      	movs	r3, #64	; 0x40
 8006dfe:	eba0 000a 	sub.w	r0, r0, sl
 8006e02:	fa03 f000 	lsl.w	r0, r3, r0
 8006e06:	9b04      	ldr	r3, [sp, #16]
 8006e08:	4303      	orrs	r3, r0
 8006e0a:	3401      	adds	r4, #1
 8006e0c:	9304      	str	r3, [sp, #16]
 8006e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e12:	4826      	ldr	r0, [pc, #152]	; (8006eac <_svfiprintf_r+0x1f0>)
 8006e14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e18:	2206      	movs	r2, #6
 8006e1a:	f7f9 fa29 	bl	8000270 <memchr>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	d038      	beq.n	8006e94 <_svfiprintf_r+0x1d8>
 8006e22:	4b23      	ldr	r3, [pc, #140]	; (8006eb0 <_svfiprintf_r+0x1f4>)
 8006e24:	bb1b      	cbnz	r3, 8006e6e <_svfiprintf_r+0x1b2>
 8006e26:	9b03      	ldr	r3, [sp, #12]
 8006e28:	3307      	adds	r3, #7
 8006e2a:	f023 0307 	bic.w	r3, r3, #7
 8006e2e:	3308      	adds	r3, #8
 8006e30:	9303      	str	r3, [sp, #12]
 8006e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e34:	4433      	add	r3, r6
 8006e36:	9309      	str	r3, [sp, #36]	; 0x24
 8006e38:	e767      	b.n	8006d0a <_svfiprintf_r+0x4e>
 8006e3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e3e:	460c      	mov	r4, r1
 8006e40:	2001      	movs	r0, #1
 8006e42:	e7a5      	b.n	8006d90 <_svfiprintf_r+0xd4>
 8006e44:	2300      	movs	r3, #0
 8006e46:	3401      	adds	r4, #1
 8006e48:	9305      	str	r3, [sp, #20]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	f04f 0c0a 	mov.w	ip, #10
 8006e50:	4620      	mov	r0, r4
 8006e52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e56:	3a30      	subs	r2, #48	; 0x30
 8006e58:	2a09      	cmp	r2, #9
 8006e5a:	d903      	bls.n	8006e64 <_svfiprintf_r+0x1a8>
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d0c5      	beq.n	8006dec <_svfiprintf_r+0x130>
 8006e60:	9105      	str	r1, [sp, #20]
 8006e62:	e7c3      	b.n	8006dec <_svfiprintf_r+0x130>
 8006e64:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e68:	4604      	mov	r4, r0
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e7f0      	b.n	8006e50 <_svfiprintf_r+0x194>
 8006e6e:	ab03      	add	r3, sp, #12
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	462a      	mov	r2, r5
 8006e74:	4b0f      	ldr	r3, [pc, #60]	; (8006eb4 <_svfiprintf_r+0x1f8>)
 8006e76:	a904      	add	r1, sp, #16
 8006e78:	4638      	mov	r0, r7
 8006e7a:	f3af 8000 	nop.w
 8006e7e:	1c42      	adds	r2, r0, #1
 8006e80:	4606      	mov	r6, r0
 8006e82:	d1d6      	bne.n	8006e32 <_svfiprintf_r+0x176>
 8006e84:	89ab      	ldrh	r3, [r5, #12]
 8006e86:	065b      	lsls	r3, r3, #25
 8006e88:	f53f af2c 	bmi.w	8006ce4 <_svfiprintf_r+0x28>
 8006e8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e8e:	b01d      	add	sp, #116	; 0x74
 8006e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e94:	ab03      	add	r3, sp, #12
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	462a      	mov	r2, r5
 8006e9a:	4b06      	ldr	r3, [pc, #24]	; (8006eb4 <_svfiprintf_r+0x1f8>)
 8006e9c:	a904      	add	r1, sp, #16
 8006e9e:	4638      	mov	r0, r7
 8006ea0:	f000 f87a 	bl	8006f98 <_printf_i>
 8006ea4:	e7eb      	b.n	8006e7e <_svfiprintf_r+0x1c2>
 8006ea6:	bf00      	nop
 8006ea8:	0800763c 	.word	0x0800763c
 8006eac:	08007646 	.word	0x08007646
 8006eb0:	00000000 	.word	0x00000000
 8006eb4:	08006c05 	.word	0x08006c05
 8006eb8:	08007642 	.word	0x08007642

08006ebc <_printf_common>:
 8006ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ec0:	4616      	mov	r6, r2
 8006ec2:	4699      	mov	r9, r3
 8006ec4:	688a      	ldr	r2, [r1, #8]
 8006ec6:	690b      	ldr	r3, [r1, #16]
 8006ec8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	bfb8      	it	lt
 8006ed0:	4613      	movlt	r3, r2
 8006ed2:	6033      	str	r3, [r6, #0]
 8006ed4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ed8:	4607      	mov	r7, r0
 8006eda:	460c      	mov	r4, r1
 8006edc:	b10a      	cbz	r2, 8006ee2 <_printf_common+0x26>
 8006ede:	3301      	adds	r3, #1
 8006ee0:	6033      	str	r3, [r6, #0]
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	0699      	lsls	r1, r3, #26
 8006ee6:	bf42      	ittt	mi
 8006ee8:	6833      	ldrmi	r3, [r6, #0]
 8006eea:	3302      	addmi	r3, #2
 8006eec:	6033      	strmi	r3, [r6, #0]
 8006eee:	6825      	ldr	r5, [r4, #0]
 8006ef0:	f015 0506 	ands.w	r5, r5, #6
 8006ef4:	d106      	bne.n	8006f04 <_printf_common+0x48>
 8006ef6:	f104 0a19 	add.w	sl, r4, #25
 8006efa:	68e3      	ldr	r3, [r4, #12]
 8006efc:	6832      	ldr	r2, [r6, #0]
 8006efe:	1a9b      	subs	r3, r3, r2
 8006f00:	42ab      	cmp	r3, r5
 8006f02:	dc26      	bgt.n	8006f52 <_printf_common+0x96>
 8006f04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f08:	1e13      	subs	r3, r2, #0
 8006f0a:	6822      	ldr	r2, [r4, #0]
 8006f0c:	bf18      	it	ne
 8006f0e:	2301      	movne	r3, #1
 8006f10:	0692      	lsls	r2, r2, #26
 8006f12:	d42b      	bmi.n	8006f6c <_printf_common+0xb0>
 8006f14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f18:	4649      	mov	r1, r9
 8006f1a:	4638      	mov	r0, r7
 8006f1c:	47c0      	blx	r8
 8006f1e:	3001      	adds	r0, #1
 8006f20:	d01e      	beq.n	8006f60 <_printf_common+0xa4>
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	68e5      	ldr	r5, [r4, #12]
 8006f26:	6832      	ldr	r2, [r6, #0]
 8006f28:	f003 0306 	and.w	r3, r3, #6
 8006f2c:	2b04      	cmp	r3, #4
 8006f2e:	bf08      	it	eq
 8006f30:	1aad      	subeq	r5, r5, r2
 8006f32:	68a3      	ldr	r3, [r4, #8]
 8006f34:	6922      	ldr	r2, [r4, #16]
 8006f36:	bf0c      	ite	eq
 8006f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f3c:	2500      	movne	r5, #0
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	bfc4      	itt	gt
 8006f42:	1a9b      	subgt	r3, r3, r2
 8006f44:	18ed      	addgt	r5, r5, r3
 8006f46:	2600      	movs	r6, #0
 8006f48:	341a      	adds	r4, #26
 8006f4a:	42b5      	cmp	r5, r6
 8006f4c:	d11a      	bne.n	8006f84 <_printf_common+0xc8>
 8006f4e:	2000      	movs	r0, #0
 8006f50:	e008      	b.n	8006f64 <_printf_common+0xa8>
 8006f52:	2301      	movs	r3, #1
 8006f54:	4652      	mov	r2, sl
 8006f56:	4649      	mov	r1, r9
 8006f58:	4638      	mov	r0, r7
 8006f5a:	47c0      	blx	r8
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	d103      	bne.n	8006f68 <_printf_common+0xac>
 8006f60:	f04f 30ff 	mov.w	r0, #4294967295
 8006f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f68:	3501      	adds	r5, #1
 8006f6a:	e7c6      	b.n	8006efa <_printf_common+0x3e>
 8006f6c:	18e1      	adds	r1, r4, r3
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	2030      	movs	r0, #48	; 0x30
 8006f72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f76:	4422      	add	r2, r4
 8006f78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f80:	3302      	adds	r3, #2
 8006f82:	e7c7      	b.n	8006f14 <_printf_common+0x58>
 8006f84:	2301      	movs	r3, #1
 8006f86:	4622      	mov	r2, r4
 8006f88:	4649      	mov	r1, r9
 8006f8a:	4638      	mov	r0, r7
 8006f8c:	47c0      	blx	r8
 8006f8e:	3001      	adds	r0, #1
 8006f90:	d0e6      	beq.n	8006f60 <_printf_common+0xa4>
 8006f92:	3601      	adds	r6, #1
 8006f94:	e7d9      	b.n	8006f4a <_printf_common+0x8e>
	...

08006f98 <_printf_i>:
 8006f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f9c:	7e0f      	ldrb	r7, [r1, #24]
 8006f9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fa0:	2f78      	cmp	r7, #120	; 0x78
 8006fa2:	4691      	mov	r9, r2
 8006fa4:	4680      	mov	r8, r0
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	469a      	mov	sl, r3
 8006faa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fae:	d807      	bhi.n	8006fc0 <_printf_i+0x28>
 8006fb0:	2f62      	cmp	r7, #98	; 0x62
 8006fb2:	d80a      	bhi.n	8006fca <_printf_i+0x32>
 8006fb4:	2f00      	cmp	r7, #0
 8006fb6:	f000 80d8 	beq.w	800716a <_printf_i+0x1d2>
 8006fba:	2f58      	cmp	r7, #88	; 0x58
 8006fbc:	f000 80a3 	beq.w	8007106 <_printf_i+0x16e>
 8006fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fc8:	e03a      	b.n	8007040 <_printf_i+0xa8>
 8006fca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fce:	2b15      	cmp	r3, #21
 8006fd0:	d8f6      	bhi.n	8006fc0 <_printf_i+0x28>
 8006fd2:	a101      	add	r1, pc, #4	; (adr r1, 8006fd8 <_printf_i+0x40>)
 8006fd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fd8:	08007031 	.word	0x08007031
 8006fdc:	08007045 	.word	0x08007045
 8006fe0:	08006fc1 	.word	0x08006fc1
 8006fe4:	08006fc1 	.word	0x08006fc1
 8006fe8:	08006fc1 	.word	0x08006fc1
 8006fec:	08006fc1 	.word	0x08006fc1
 8006ff0:	08007045 	.word	0x08007045
 8006ff4:	08006fc1 	.word	0x08006fc1
 8006ff8:	08006fc1 	.word	0x08006fc1
 8006ffc:	08006fc1 	.word	0x08006fc1
 8007000:	08006fc1 	.word	0x08006fc1
 8007004:	08007151 	.word	0x08007151
 8007008:	08007075 	.word	0x08007075
 800700c:	08007133 	.word	0x08007133
 8007010:	08006fc1 	.word	0x08006fc1
 8007014:	08006fc1 	.word	0x08006fc1
 8007018:	08007173 	.word	0x08007173
 800701c:	08006fc1 	.word	0x08006fc1
 8007020:	08007075 	.word	0x08007075
 8007024:	08006fc1 	.word	0x08006fc1
 8007028:	08006fc1 	.word	0x08006fc1
 800702c:	0800713b 	.word	0x0800713b
 8007030:	682b      	ldr	r3, [r5, #0]
 8007032:	1d1a      	adds	r2, r3, #4
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	602a      	str	r2, [r5, #0]
 8007038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800703c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007040:	2301      	movs	r3, #1
 8007042:	e0a3      	b.n	800718c <_printf_i+0x1f4>
 8007044:	6820      	ldr	r0, [r4, #0]
 8007046:	6829      	ldr	r1, [r5, #0]
 8007048:	0606      	lsls	r6, r0, #24
 800704a:	f101 0304 	add.w	r3, r1, #4
 800704e:	d50a      	bpl.n	8007066 <_printf_i+0xce>
 8007050:	680e      	ldr	r6, [r1, #0]
 8007052:	602b      	str	r3, [r5, #0]
 8007054:	2e00      	cmp	r6, #0
 8007056:	da03      	bge.n	8007060 <_printf_i+0xc8>
 8007058:	232d      	movs	r3, #45	; 0x2d
 800705a:	4276      	negs	r6, r6
 800705c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007060:	485e      	ldr	r0, [pc, #376]	; (80071dc <_printf_i+0x244>)
 8007062:	230a      	movs	r3, #10
 8007064:	e019      	b.n	800709a <_printf_i+0x102>
 8007066:	680e      	ldr	r6, [r1, #0]
 8007068:	602b      	str	r3, [r5, #0]
 800706a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800706e:	bf18      	it	ne
 8007070:	b236      	sxthne	r6, r6
 8007072:	e7ef      	b.n	8007054 <_printf_i+0xbc>
 8007074:	682b      	ldr	r3, [r5, #0]
 8007076:	6820      	ldr	r0, [r4, #0]
 8007078:	1d19      	adds	r1, r3, #4
 800707a:	6029      	str	r1, [r5, #0]
 800707c:	0601      	lsls	r1, r0, #24
 800707e:	d501      	bpl.n	8007084 <_printf_i+0xec>
 8007080:	681e      	ldr	r6, [r3, #0]
 8007082:	e002      	b.n	800708a <_printf_i+0xf2>
 8007084:	0646      	lsls	r6, r0, #25
 8007086:	d5fb      	bpl.n	8007080 <_printf_i+0xe8>
 8007088:	881e      	ldrh	r6, [r3, #0]
 800708a:	4854      	ldr	r0, [pc, #336]	; (80071dc <_printf_i+0x244>)
 800708c:	2f6f      	cmp	r7, #111	; 0x6f
 800708e:	bf0c      	ite	eq
 8007090:	2308      	moveq	r3, #8
 8007092:	230a      	movne	r3, #10
 8007094:	2100      	movs	r1, #0
 8007096:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800709a:	6865      	ldr	r5, [r4, #4]
 800709c:	60a5      	str	r5, [r4, #8]
 800709e:	2d00      	cmp	r5, #0
 80070a0:	bfa2      	ittt	ge
 80070a2:	6821      	ldrge	r1, [r4, #0]
 80070a4:	f021 0104 	bicge.w	r1, r1, #4
 80070a8:	6021      	strge	r1, [r4, #0]
 80070aa:	b90e      	cbnz	r6, 80070b0 <_printf_i+0x118>
 80070ac:	2d00      	cmp	r5, #0
 80070ae:	d04d      	beq.n	800714c <_printf_i+0x1b4>
 80070b0:	4615      	mov	r5, r2
 80070b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80070b6:	fb03 6711 	mls	r7, r3, r1, r6
 80070ba:	5dc7      	ldrb	r7, [r0, r7]
 80070bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070c0:	4637      	mov	r7, r6
 80070c2:	42bb      	cmp	r3, r7
 80070c4:	460e      	mov	r6, r1
 80070c6:	d9f4      	bls.n	80070b2 <_printf_i+0x11a>
 80070c8:	2b08      	cmp	r3, #8
 80070ca:	d10b      	bne.n	80070e4 <_printf_i+0x14c>
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	07de      	lsls	r6, r3, #31
 80070d0:	d508      	bpl.n	80070e4 <_printf_i+0x14c>
 80070d2:	6923      	ldr	r3, [r4, #16]
 80070d4:	6861      	ldr	r1, [r4, #4]
 80070d6:	4299      	cmp	r1, r3
 80070d8:	bfde      	ittt	le
 80070da:	2330      	movle	r3, #48	; 0x30
 80070dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070e4:	1b52      	subs	r2, r2, r5
 80070e6:	6122      	str	r2, [r4, #16]
 80070e8:	f8cd a000 	str.w	sl, [sp]
 80070ec:	464b      	mov	r3, r9
 80070ee:	aa03      	add	r2, sp, #12
 80070f0:	4621      	mov	r1, r4
 80070f2:	4640      	mov	r0, r8
 80070f4:	f7ff fee2 	bl	8006ebc <_printf_common>
 80070f8:	3001      	adds	r0, #1
 80070fa:	d14c      	bne.n	8007196 <_printf_i+0x1fe>
 80070fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007100:	b004      	add	sp, #16
 8007102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007106:	4835      	ldr	r0, [pc, #212]	; (80071dc <_printf_i+0x244>)
 8007108:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800710c:	6829      	ldr	r1, [r5, #0]
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	f851 6b04 	ldr.w	r6, [r1], #4
 8007114:	6029      	str	r1, [r5, #0]
 8007116:	061d      	lsls	r5, r3, #24
 8007118:	d514      	bpl.n	8007144 <_printf_i+0x1ac>
 800711a:	07df      	lsls	r7, r3, #31
 800711c:	bf44      	itt	mi
 800711e:	f043 0320 	orrmi.w	r3, r3, #32
 8007122:	6023      	strmi	r3, [r4, #0]
 8007124:	b91e      	cbnz	r6, 800712e <_printf_i+0x196>
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	f023 0320 	bic.w	r3, r3, #32
 800712c:	6023      	str	r3, [r4, #0]
 800712e:	2310      	movs	r3, #16
 8007130:	e7b0      	b.n	8007094 <_printf_i+0xfc>
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	f043 0320 	orr.w	r3, r3, #32
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	2378      	movs	r3, #120	; 0x78
 800713c:	4828      	ldr	r0, [pc, #160]	; (80071e0 <_printf_i+0x248>)
 800713e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007142:	e7e3      	b.n	800710c <_printf_i+0x174>
 8007144:	0659      	lsls	r1, r3, #25
 8007146:	bf48      	it	mi
 8007148:	b2b6      	uxthmi	r6, r6
 800714a:	e7e6      	b.n	800711a <_printf_i+0x182>
 800714c:	4615      	mov	r5, r2
 800714e:	e7bb      	b.n	80070c8 <_printf_i+0x130>
 8007150:	682b      	ldr	r3, [r5, #0]
 8007152:	6826      	ldr	r6, [r4, #0]
 8007154:	6961      	ldr	r1, [r4, #20]
 8007156:	1d18      	adds	r0, r3, #4
 8007158:	6028      	str	r0, [r5, #0]
 800715a:	0635      	lsls	r5, r6, #24
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	d501      	bpl.n	8007164 <_printf_i+0x1cc>
 8007160:	6019      	str	r1, [r3, #0]
 8007162:	e002      	b.n	800716a <_printf_i+0x1d2>
 8007164:	0670      	lsls	r0, r6, #25
 8007166:	d5fb      	bpl.n	8007160 <_printf_i+0x1c8>
 8007168:	8019      	strh	r1, [r3, #0]
 800716a:	2300      	movs	r3, #0
 800716c:	6123      	str	r3, [r4, #16]
 800716e:	4615      	mov	r5, r2
 8007170:	e7ba      	b.n	80070e8 <_printf_i+0x150>
 8007172:	682b      	ldr	r3, [r5, #0]
 8007174:	1d1a      	adds	r2, r3, #4
 8007176:	602a      	str	r2, [r5, #0]
 8007178:	681d      	ldr	r5, [r3, #0]
 800717a:	6862      	ldr	r2, [r4, #4]
 800717c:	2100      	movs	r1, #0
 800717e:	4628      	mov	r0, r5
 8007180:	f7f9 f876 	bl	8000270 <memchr>
 8007184:	b108      	cbz	r0, 800718a <_printf_i+0x1f2>
 8007186:	1b40      	subs	r0, r0, r5
 8007188:	6060      	str	r0, [r4, #4]
 800718a:	6863      	ldr	r3, [r4, #4]
 800718c:	6123      	str	r3, [r4, #16]
 800718e:	2300      	movs	r3, #0
 8007190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007194:	e7a8      	b.n	80070e8 <_printf_i+0x150>
 8007196:	6923      	ldr	r3, [r4, #16]
 8007198:	462a      	mov	r2, r5
 800719a:	4649      	mov	r1, r9
 800719c:	4640      	mov	r0, r8
 800719e:	47d0      	blx	sl
 80071a0:	3001      	adds	r0, #1
 80071a2:	d0ab      	beq.n	80070fc <_printf_i+0x164>
 80071a4:	6823      	ldr	r3, [r4, #0]
 80071a6:	079b      	lsls	r3, r3, #30
 80071a8:	d413      	bmi.n	80071d2 <_printf_i+0x23a>
 80071aa:	68e0      	ldr	r0, [r4, #12]
 80071ac:	9b03      	ldr	r3, [sp, #12]
 80071ae:	4298      	cmp	r0, r3
 80071b0:	bfb8      	it	lt
 80071b2:	4618      	movlt	r0, r3
 80071b4:	e7a4      	b.n	8007100 <_printf_i+0x168>
 80071b6:	2301      	movs	r3, #1
 80071b8:	4632      	mov	r2, r6
 80071ba:	4649      	mov	r1, r9
 80071bc:	4640      	mov	r0, r8
 80071be:	47d0      	blx	sl
 80071c0:	3001      	adds	r0, #1
 80071c2:	d09b      	beq.n	80070fc <_printf_i+0x164>
 80071c4:	3501      	adds	r5, #1
 80071c6:	68e3      	ldr	r3, [r4, #12]
 80071c8:	9903      	ldr	r1, [sp, #12]
 80071ca:	1a5b      	subs	r3, r3, r1
 80071cc:	42ab      	cmp	r3, r5
 80071ce:	dcf2      	bgt.n	80071b6 <_printf_i+0x21e>
 80071d0:	e7eb      	b.n	80071aa <_printf_i+0x212>
 80071d2:	2500      	movs	r5, #0
 80071d4:	f104 0619 	add.w	r6, r4, #25
 80071d8:	e7f5      	b.n	80071c6 <_printf_i+0x22e>
 80071da:	bf00      	nop
 80071dc:	0800764d 	.word	0x0800764d
 80071e0:	0800765e 	.word	0x0800765e

080071e4 <memmove>:
 80071e4:	4288      	cmp	r0, r1
 80071e6:	b510      	push	{r4, lr}
 80071e8:	eb01 0402 	add.w	r4, r1, r2
 80071ec:	d902      	bls.n	80071f4 <memmove+0x10>
 80071ee:	4284      	cmp	r4, r0
 80071f0:	4623      	mov	r3, r4
 80071f2:	d807      	bhi.n	8007204 <memmove+0x20>
 80071f4:	1e43      	subs	r3, r0, #1
 80071f6:	42a1      	cmp	r1, r4
 80071f8:	d008      	beq.n	800720c <memmove+0x28>
 80071fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007202:	e7f8      	b.n	80071f6 <memmove+0x12>
 8007204:	4402      	add	r2, r0
 8007206:	4601      	mov	r1, r0
 8007208:	428a      	cmp	r2, r1
 800720a:	d100      	bne.n	800720e <memmove+0x2a>
 800720c:	bd10      	pop	{r4, pc}
 800720e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007212:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007216:	e7f7      	b.n	8007208 <memmove+0x24>

08007218 <_free_r>:
 8007218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800721a:	2900      	cmp	r1, #0
 800721c:	d044      	beq.n	80072a8 <_free_r+0x90>
 800721e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007222:	9001      	str	r0, [sp, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	f1a1 0404 	sub.w	r4, r1, #4
 800722a:	bfb8      	it	lt
 800722c:	18e4      	addlt	r4, r4, r3
 800722e:	f000 f913 	bl	8007458 <__malloc_lock>
 8007232:	4a1e      	ldr	r2, [pc, #120]	; (80072ac <_free_r+0x94>)
 8007234:	9801      	ldr	r0, [sp, #4]
 8007236:	6813      	ldr	r3, [r2, #0]
 8007238:	b933      	cbnz	r3, 8007248 <_free_r+0x30>
 800723a:	6063      	str	r3, [r4, #4]
 800723c:	6014      	str	r4, [r2, #0]
 800723e:	b003      	add	sp, #12
 8007240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007244:	f000 b90e 	b.w	8007464 <__malloc_unlock>
 8007248:	42a3      	cmp	r3, r4
 800724a:	d908      	bls.n	800725e <_free_r+0x46>
 800724c:	6825      	ldr	r5, [r4, #0]
 800724e:	1961      	adds	r1, r4, r5
 8007250:	428b      	cmp	r3, r1
 8007252:	bf01      	itttt	eq
 8007254:	6819      	ldreq	r1, [r3, #0]
 8007256:	685b      	ldreq	r3, [r3, #4]
 8007258:	1949      	addeq	r1, r1, r5
 800725a:	6021      	streq	r1, [r4, #0]
 800725c:	e7ed      	b.n	800723a <_free_r+0x22>
 800725e:	461a      	mov	r2, r3
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	b10b      	cbz	r3, 8007268 <_free_r+0x50>
 8007264:	42a3      	cmp	r3, r4
 8007266:	d9fa      	bls.n	800725e <_free_r+0x46>
 8007268:	6811      	ldr	r1, [r2, #0]
 800726a:	1855      	adds	r5, r2, r1
 800726c:	42a5      	cmp	r5, r4
 800726e:	d10b      	bne.n	8007288 <_free_r+0x70>
 8007270:	6824      	ldr	r4, [r4, #0]
 8007272:	4421      	add	r1, r4
 8007274:	1854      	adds	r4, r2, r1
 8007276:	42a3      	cmp	r3, r4
 8007278:	6011      	str	r1, [r2, #0]
 800727a:	d1e0      	bne.n	800723e <_free_r+0x26>
 800727c:	681c      	ldr	r4, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	6053      	str	r3, [r2, #4]
 8007282:	4421      	add	r1, r4
 8007284:	6011      	str	r1, [r2, #0]
 8007286:	e7da      	b.n	800723e <_free_r+0x26>
 8007288:	d902      	bls.n	8007290 <_free_r+0x78>
 800728a:	230c      	movs	r3, #12
 800728c:	6003      	str	r3, [r0, #0]
 800728e:	e7d6      	b.n	800723e <_free_r+0x26>
 8007290:	6825      	ldr	r5, [r4, #0]
 8007292:	1961      	adds	r1, r4, r5
 8007294:	428b      	cmp	r3, r1
 8007296:	bf04      	itt	eq
 8007298:	6819      	ldreq	r1, [r3, #0]
 800729a:	685b      	ldreq	r3, [r3, #4]
 800729c:	6063      	str	r3, [r4, #4]
 800729e:	bf04      	itt	eq
 80072a0:	1949      	addeq	r1, r1, r5
 80072a2:	6021      	streq	r1, [r4, #0]
 80072a4:	6054      	str	r4, [r2, #4]
 80072a6:	e7ca      	b.n	800723e <_free_r+0x26>
 80072a8:	b003      	add	sp, #12
 80072aa:	bd30      	pop	{r4, r5, pc}
 80072ac:	20014504 	.word	0x20014504

080072b0 <sbrk_aligned>:
 80072b0:	b570      	push	{r4, r5, r6, lr}
 80072b2:	4e0e      	ldr	r6, [pc, #56]	; (80072ec <sbrk_aligned+0x3c>)
 80072b4:	460c      	mov	r4, r1
 80072b6:	6831      	ldr	r1, [r6, #0]
 80072b8:	4605      	mov	r5, r0
 80072ba:	b911      	cbnz	r1, 80072c2 <sbrk_aligned+0x12>
 80072bc:	f000 f8bc 	bl	8007438 <_sbrk_r>
 80072c0:	6030      	str	r0, [r6, #0]
 80072c2:	4621      	mov	r1, r4
 80072c4:	4628      	mov	r0, r5
 80072c6:	f000 f8b7 	bl	8007438 <_sbrk_r>
 80072ca:	1c43      	adds	r3, r0, #1
 80072cc:	d00a      	beq.n	80072e4 <sbrk_aligned+0x34>
 80072ce:	1cc4      	adds	r4, r0, #3
 80072d0:	f024 0403 	bic.w	r4, r4, #3
 80072d4:	42a0      	cmp	r0, r4
 80072d6:	d007      	beq.n	80072e8 <sbrk_aligned+0x38>
 80072d8:	1a21      	subs	r1, r4, r0
 80072da:	4628      	mov	r0, r5
 80072dc:	f000 f8ac 	bl	8007438 <_sbrk_r>
 80072e0:	3001      	adds	r0, #1
 80072e2:	d101      	bne.n	80072e8 <sbrk_aligned+0x38>
 80072e4:	f04f 34ff 	mov.w	r4, #4294967295
 80072e8:	4620      	mov	r0, r4
 80072ea:	bd70      	pop	{r4, r5, r6, pc}
 80072ec:	20014508 	.word	0x20014508

080072f0 <_malloc_r>:
 80072f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f4:	1ccd      	adds	r5, r1, #3
 80072f6:	f025 0503 	bic.w	r5, r5, #3
 80072fa:	3508      	adds	r5, #8
 80072fc:	2d0c      	cmp	r5, #12
 80072fe:	bf38      	it	cc
 8007300:	250c      	movcc	r5, #12
 8007302:	2d00      	cmp	r5, #0
 8007304:	4607      	mov	r7, r0
 8007306:	db01      	blt.n	800730c <_malloc_r+0x1c>
 8007308:	42a9      	cmp	r1, r5
 800730a:	d905      	bls.n	8007318 <_malloc_r+0x28>
 800730c:	230c      	movs	r3, #12
 800730e:	603b      	str	r3, [r7, #0]
 8007310:	2600      	movs	r6, #0
 8007312:	4630      	mov	r0, r6
 8007314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007318:	4e2e      	ldr	r6, [pc, #184]	; (80073d4 <_malloc_r+0xe4>)
 800731a:	f000 f89d 	bl	8007458 <__malloc_lock>
 800731e:	6833      	ldr	r3, [r6, #0]
 8007320:	461c      	mov	r4, r3
 8007322:	bb34      	cbnz	r4, 8007372 <_malloc_r+0x82>
 8007324:	4629      	mov	r1, r5
 8007326:	4638      	mov	r0, r7
 8007328:	f7ff ffc2 	bl	80072b0 <sbrk_aligned>
 800732c:	1c43      	adds	r3, r0, #1
 800732e:	4604      	mov	r4, r0
 8007330:	d14d      	bne.n	80073ce <_malloc_r+0xde>
 8007332:	6834      	ldr	r4, [r6, #0]
 8007334:	4626      	mov	r6, r4
 8007336:	2e00      	cmp	r6, #0
 8007338:	d140      	bne.n	80073bc <_malloc_r+0xcc>
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	4631      	mov	r1, r6
 800733e:	4638      	mov	r0, r7
 8007340:	eb04 0803 	add.w	r8, r4, r3
 8007344:	f000 f878 	bl	8007438 <_sbrk_r>
 8007348:	4580      	cmp	r8, r0
 800734a:	d13a      	bne.n	80073c2 <_malloc_r+0xd2>
 800734c:	6821      	ldr	r1, [r4, #0]
 800734e:	3503      	adds	r5, #3
 8007350:	1a6d      	subs	r5, r5, r1
 8007352:	f025 0503 	bic.w	r5, r5, #3
 8007356:	3508      	adds	r5, #8
 8007358:	2d0c      	cmp	r5, #12
 800735a:	bf38      	it	cc
 800735c:	250c      	movcc	r5, #12
 800735e:	4629      	mov	r1, r5
 8007360:	4638      	mov	r0, r7
 8007362:	f7ff ffa5 	bl	80072b0 <sbrk_aligned>
 8007366:	3001      	adds	r0, #1
 8007368:	d02b      	beq.n	80073c2 <_malloc_r+0xd2>
 800736a:	6823      	ldr	r3, [r4, #0]
 800736c:	442b      	add	r3, r5
 800736e:	6023      	str	r3, [r4, #0]
 8007370:	e00e      	b.n	8007390 <_malloc_r+0xa0>
 8007372:	6822      	ldr	r2, [r4, #0]
 8007374:	1b52      	subs	r2, r2, r5
 8007376:	d41e      	bmi.n	80073b6 <_malloc_r+0xc6>
 8007378:	2a0b      	cmp	r2, #11
 800737a:	d916      	bls.n	80073aa <_malloc_r+0xba>
 800737c:	1961      	adds	r1, r4, r5
 800737e:	42a3      	cmp	r3, r4
 8007380:	6025      	str	r5, [r4, #0]
 8007382:	bf18      	it	ne
 8007384:	6059      	strne	r1, [r3, #4]
 8007386:	6863      	ldr	r3, [r4, #4]
 8007388:	bf08      	it	eq
 800738a:	6031      	streq	r1, [r6, #0]
 800738c:	5162      	str	r2, [r4, r5]
 800738e:	604b      	str	r3, [r1, #4]
 8007390:	4638      	mov	r0, r7
 8007392:	f104 060b 	add.w	r6, r4, #11
 8007396:	f000 f865 	bl	8007464 <__malloc_unlock>
 800739a:	f026 0607 	bic.w	r6, r6, #7
 800739e:	1d23      	adds	r3, r4, #4
 80073a0:	1af2      	subs	r2, r6, r3
 80073a2:	d0b6      	beq.n	8007312 <_malloc_r+0x22>
 80073a4:	1b9b      	subs	r3, r3, r6
 80073a6:	50a3      	str	r3, [r4, r2]
 80073a8:	e7b3      	b.n	8007312 <_malloc_r+0x22>
 80073aa:	6862      	ldr	r2, [r4, #4]
 80073ac:	42a3      	cmp	r3, r4
 80073ae:	bf0c      	ite	eq
 80073b0:	6032      	streq	r2, [r6, #0]
 80073b2:	605a      	strne	r2, [r3, #4]
 80073b4:	e7ec      	b.n	8007390 <_malloc_r+0xa0>
 80073b6:	4623      	mov	r3, r4
 80073b8:	6864      	ldr	r4, [r4, #4]
 80073ba:	e7b2      	b.n	8007322 <_malloc_r+0x32>
 80073bc:	4634      	mov	r4, r6
 80073be:	6876      	ldr	r6, [r6, #4]
 80073c0:	e7b9      	b.n	8007336 <_malloc_r+0x46>
 80073c2:	230c      	movs	r3, #12
 80073c4:	603b      	str	r3, [r7, #0]
 80073c6:	4638      	mov	r0, r7
 80073c8:	f000 f84c 	bl	8007464 <__malloc_unlock>
 80073cc:	e7a1      	b.n	8007312 <_malloc_r+0x22>
 80073ce:	6025      	str	r5, [r4, #0]
 80073d0:	e7de      	b.n	8007390 <_malloc_r+0xa0>
 80073d2:	bf00      	nop
 80073d4:	20014504 	.word	0x20014504

080073d8 <_realloc_r>:
 80073d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073dc:	4680      	mov	r8, r0
 80073de:	4614      	mov	r4, r2
 80073e0:	460e      	mov	r6, r1
 80073e2:	b921      	cbnz	r1, 80073ee <_realloc_r+0x16>
 80073e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073e8:	4611      	mov	r1, r2
 80073ea:	f7ff bf81 	b.w	80072f0 <_malloc_r>
 80073ee:	b92a      	cbnz	r2, 80073fc <_realloc_r+0x24>
 80073f0:	f7ff ff12 	bl	8007218 <_free_r>
 80073f4:	4625      	mov	r5, r4
 80073f6:	4628      	mov	r0, r5
 80073f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073fc:	f000 f838 	bl	8007470 <_malloc_usable_size_r>
 8007400:	4284      	cmp	r4, r0
 8007402:	4607      	mov	r7, r0
 8007404:	d802      	bhi.n	800740c <_realloc_r+0x34>
 8007406:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800740a:	d812      	bhi.n	8007432 <_realloc_r+0x5a>
 800740c:	4621      	mov	r1, r4
 800740e:	4640      	mov	r0, r8
 8007410:	f7ff ff6e 	bl	80072f0 <_malloc_r>
 8007414:	4605      	mov	r5, r0
 8007416:	2800      	cmp	r0, #0
 8007418:	d0ed      	beq.n	80073f6 <_realloc_r+0x1e>
 800741a:	42bc      	cmp	r4, r7
 800741c:	4622      	mov	r2, r4
 800741e:	4631      	mov	r1, r6
 8007420:	bf28      	it	cs
 8007422:	463a      	movcs	r2, r7
 8007424:	f7ff fba4 	bl	8006b70 <memcpy>
 8007428:	4631      	mov	r1, r6
 800742a:	4640      	mov	r0, r8
 800742c:	f7ff fef4 	bl	8007218 <_free_r>
 8007430:	e7e1      	b.n	80073f6 <_realloc_r+0x1e>
 8007432:	4635      	mov	r5, r6
 8007434:	e7df      	b.n	80073f6 <_realloc_r+0x1e>
	...

08007438 <_sbrk_r>:
 8007438:	b538      	push	{r3, r4, r5, lr}
 800743a:	4d06      	ldr	r5, [pc, #24]	; (8007454 <_sbrk_r+0x1c>)
 800743c:	2300      	movs	r3, #0
 800743e:	4604      	mov	r4, r0
 8007440:	4608      	mov	r0, r1
 8007442:	602b      	str	r3, [r5, #0]
 8007444:	f000 f81e 	bl	8007484 <_sbrk>
 8007448:	1c43      	adds	r3, r0, #1
 800744a:	d102      	bne.n	8007452 <_sbrk_r+0x1a>
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	b103      	cbz	r3, 8007452 <_sbrk_r+0x1a>
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	bd38      	pop	{r3, r4, r5, pc}
 8007454:	2001450c 	.word	0x2001450c

08007458 <__malloc_lock>:
 8007458:	4801      	ldr	r0, [pc, #4]	; (8007460 <__malloc_lock+0x8>)
 800745a:	f000 b811 	b.w	8007480 <__retarget_lock_acquire_recursive>
 800745e:	bf00      	nop
 8007460:	20014510 	.word	0x20014510

08007464 <__malloc_unlock>:
 8007464:	4801      	ldr	r0, [pc, #4]	; (800746c <__malloc_unlock+0x8>)
 8007466:	f000 b80c 	b.w	8007482 <__retarget_lock_release_recursive>
 800746a:	bf00      	nop
 800746c:	20014510 	.word	0x20014510

08007470 <_malloc_usable_size_r>:
 8007470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007474:	1f18      	subs	r0, r3, #4
 8007476:	2b00      	cmp	r3, #0
 8007478:	bfbc      	itt	lt
 800747a:	580b      	ldrlt	r3, [r1, r0]
 800747c:	18c0      	addlt	r0, r0, r3
 800747e:	4770      	bx	lr

08007480 <__retarget_lock_acquire_recursive>:
 8007480:	4770      	bx	lr

08007482 <__retarget_lock_release_recursive>:
 8007482:	4770      	bx	lr

08007484 <_sbrk>:
 8007484:	4a04      	ldr	r2, [pc, #16]	; (8007498 <_sbrk+0x14>)
 8007486:	6811      	ldr	r1, [r2, #0]
 8007488:	4603      	mov	r3, r0
 800748a:	b909      	cbnz	r1, 8007490 <_sbrk+0xc>
 800748c:	4903      	ldr	r1, [pc, #12]	; (800749c <_sbrk+0x18>)
 800748e:	6011      	str	r1, [r2, #0]
 8007490:	6810      	ldr	r0, [r2, #0]
 8007492:	4403      	add	r3, r0
 8007494:	6013      	str	r3, [r2, #0]
 8007496:	4770      	bx	lr
 8007498:	20014514 	.word	0x20014514
 800749c:	20014518 	.word	0x20014518

080074a0 <_init>:
 80074a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a2:	bf00      	nop
 80074a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074a6:	bc08      	pop	{r3}
 80074a8:	469e      	mov	lr, r3
 80074aa:	4770      	bx	lr

080074ac <_fini>:
 80074ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ae:	bf00      	nop
 80074b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074b2:	bc08      	pop	{r3}
 80074b4:	469e      	mov	lr, r3
 80074b6:	4770      	bx	lr
