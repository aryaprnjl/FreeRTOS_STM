
basic_segger_integrate_full.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007358  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  080074e8  080074e8  000174e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076a0  080076a0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080076a0  080076a0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080076a0  080076a0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076a0  080076a0  000176a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076a4  080076a4  000176a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080076a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144a0  20000078  08007720  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014518  08007720  00024518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157d3  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f7f  00000000  00000000  0003587b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00038800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001320  00000000  00000000  00039ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d8d  00000000  00000000  0003afc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169a9  00000000  00000000  00063d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb83e  00000000  00000000  0007a6fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00175f3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a18  00000000  00000000  00175f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080074d0 	.word	0x080074d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080074d0 	.word	0x080074d0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f30 	.word	0x20012f30
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fa6b 	bl	80007f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f851 	bl	80003c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031e:	f000 f8a1 	bl	8000464 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1<<0);
 8000322:	4b20      	ldr	r3, [pc, #128]	; (80003a4 <main+0x94>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a1f      	ldr	r2, [pc, #124]	; (80003a4 <main+0x94>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 800032e:	f004 fb59 	bl	80049e4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000332:	f005 fe21 	bl	8005f78 <SEGGER_SYSVIEW_Start>
  status  = xTaskCreate(task1_handler, "Task1", 200, "Hello from RTOS T1", 2, &task1_handle);
 8000336:	f107 0308 	add.w	r3, r7, #8
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	2302      	movs	r3, #2
 800033e:	9300      	str	r3, [sp, #0]
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <main+0x98>)
 8000342:	22c8      	movs	r2, #200	; 0xc8
 8000344:	4919      	ldr	r1, [pc, #100]	; (80003ac <main+0x9c>)
 8000346:	481a      	ldr	r0, [pc, #104]	; (80003b0 <main+0xa0>)
 8000348:	f002 fc96 	bl	8002c78 <xTaskCreate>
 800034c:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	2b01      	cmp	r3, #1
 8000352:	d00a      	beq.n	800036a <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000358:	f383 8811 	msr	BASEPRI, r3
 800035c:	f3bf 8f6f 	isb	sy
 8000360:	f3bf 8f4f 	dsb	sy
 8000364:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000366:	bf00      	nop
 8000368:	e7fe      	b.n	8000368 <main+0x58>
  status = xTaskCreate(task2_handler, "Task2", 200, "Hello from RTOS T2", 2, &task2_handle);
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	9301      	str	r3, [sp, #4]
 800036e:	2302      	movs	r3, #2
 8000370:	9300      	str	r3, [sp, #0]
 8000372:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <main+0xa4>)
 8000374:	22c8      	movs	r2, #200	; 0xc8
 8000376:	4910      	ldr	r1, [pc, #64]	; (80003b8 <main+0xa8>)
 8000378:	4810      	ldr	r0, [pc, #64]	; (80003bc <main+0xac>)
 800037a:	f002 fc7d 	bl	8002c78 <xTaskCreate>
 800037e:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	2b01      	cmp	r3, #1
 8000384:	d00a      	beq.n	800039c <main+0x8c>
        __asm volatile
 8000386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800038a:	f383 8811 	msr	BASEPRI, r3
 800038e:	f3bf 8f6f 	isb	sy
 8000392:	f3bf 8f4f 	dsb	sy
 8000396:	60fb      	str	r3, [r7, #12]
    }
 8000398:	bf00      	nop
 800039a:	e7fe      	b.n	800039a <main+0x8a>
  vTaskStartScheduler();
 800039c:	f002 fdd0 	bl	8002f40 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <main+0x90>
 80003a2:	bf00      	nop
 80003a4:	e0001000 	.word	0xe0001000
 80003a8:	080074e8 	.word	0x080074e8
 80003ac:	080074fc 	.word	0x080074fc
 80003b0:	08000555 	.word	0x08000555
 80003b4:	08007504 	.word	0x08007504
 80003b8:	08007518 	.word	0x08007518
 80003bc:	08000591 	.word	0x08000591

080003c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b096      	sub	sp, #88	; 0x58
 80003c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c6:	f107 0314 	add.w	r3, r7, #20
 80003ca:	2244      	movs	r2, #68	; 0x44
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f006 fbf4 	bl	8006bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d4:	463b      	mov	r3, r7
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003e6:	f000 fcf5 	bl	8000dd4 <HAL_PWREx_ControlVoltageScaling>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003f0:	f000 f8fe 	bl	80005f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f4:	2302      	movs	r3, #2
 80003f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003fe:	2310      	movs	r3, #16
 8000400:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000402:	2302      	movs	r3, #2
 8000404:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000406:	2302      	movs	r3, #2
 8000408:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800040a:	2301      	movs	r3, #1
 800040c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800040e:	230a      	movs	r3, #10
 8000410:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000412:	2307      	movs	r3, #7
 8000414:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000416:	2302      	movs	r3, #2
 8000418:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800041a:	2302      	movs	r3, #2
 800041c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041e:	f107 0314 	add.w	r3, r7, #20
 8000422:	4618      	mov	r0, r3
 8000424:	f000 fd2c 	bl	8000e80 <HAL_RCC_OscConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800042e:	f000 f8df 	bl	80005f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000432:	230f      	movs	r3, #15
 8000434:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000436:	2303      	movs	r3, #3
 8000438:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000446:	463b      	mov	r3, r7
 8000448:	2104      	movs	r1, #4
 800044a:	4618      	mov	r0, r3
 800044c:	f001 f8f4 	bl	8001638 <HAL_RCC_ClockConfig>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000456:	f000 f8cb 	bl	80005f0 <Error_Handler>
  }
}
 800045a:	bf00      	nop
 800045c:	3758      	adds	r7, #88	; 0x58
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b08a      	sub	sp, #40	; 0x28
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 0314 	add.w	r3, r7, #20
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
 8000478:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047a:	4b34      	ldr	r3, [pc, #208]	; (800054c <MX_GPIO_Init+0xe8>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	4a33      	ldr	r2, [pc, #204]	; (800054c <MX_GPIO_Init+0xe8>)
 8000480:	f043 0304 	orr.w	r3, r3, #4
 8000484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000486:	4b31      	ldr	r3, [pc, #196]	; (800054c <MX_GPIO_Init+0xe8>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048a:	f003 0304 	and.w	r3, r3, #4
 800048e:	613b      	str	r3, [r7, #16]
 8000490:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000492:	4b2e      	ldr	r3, [pc, #184]	; (800054c <MX_GPIO_Init+0xe8>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000496:	4a2d      	ldr	r2, [pc, #180]	; (800054c <MX_GPIO_Init+0xe8>)
 8000498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800049c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800049e:	4b2b      	ldr	r3, [pc, #172]	; (800054c <MX_GPIO_Init+0xe8>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	4b28      	ldr	r3, [pc, #160]	; (800054c <MX_GPIO_Init+0xe8>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ae:	4a27      	ldr	r2, [pc, #156]	; (800054c <MX_GPIO_Init+0xe8>)
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b6:	4b25      	ldr	r3, [pc, #148]	; (800054c <MX_GPIO_Init+0xe8>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c2:	4b22      	ldr	r3, [pc, #136]	; (800054c <MX_GPIO_Init+0xe8>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c6:	4a21      	ldr	r2, [pc, #132]	; (800054c <MX_GPIO_Init+0xe8>)
 80004c8:	f043 0302 	orr.w	r3, r3, #2
 80004cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ce:	4b1f      	ldr	r3, [pc, #124]	; (800054c <MX_GPIO_Init+0xe8>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d2:	f003 0302 	and.w	r3, r3, #2
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	2120      	movs	r1, #32
 80004de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e2:	f000 fc51 	bl	8000d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80004f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	4619      	mov	r1, r3
 80004fc:	4814      	ldr	r0, [pc, #80]	; (8000550 <MX_GPIO_Init+0xec>)
 80004fe:	f000 fa99 	bl	8000a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000502:	230c      	movs	r3, #12
 8000504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000506:	2302      	movs	r3, #2
 8000508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800050e:	2303      	movs	r3, #3
 8000510:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000512:	2307      	movs	r3, #7
 8000514:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	4619      	mov	r1, r3
 800051c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000520:	f000 fa88 	bl	8000a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000524:	2320      	movs	r3, #32
 8000526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	2301      	movs	r3, #1
 800052a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	2300      	movs	r3, #0
 8000532:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	4619      	mov	r1, r3
 800053a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053e:	f000 fa79 	bl	8000a34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000542:	bf00      	nop
 8000544:	3728      	adds	r7, #40	; 0x28
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000
 8000550:	48000800 	.word	0x48000800

08000554 <task1_handler>:

/* USER CODE BEGIN 4 */
void task1_handler(void *parameter)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b09c      	sub	sp, #112	; 0x70
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1){
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
		//printf("%s\n",(char*)parameter);
		snprintf(msg,100,"%s\n",(char*)parameter);
 800055c:	f107 000c 	add.w	r0, r7, #12
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4a09      	ldr	r2, [pc, #36]	; (8000588 <task1_handler+0x34>)
 8000564:	2164      	movs	r1, #100	; 0x64
 8000566:	f006 fb31 	bl	8006bcc <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 800056a:	f107 030c 	add.w	r3, r7, #12
 800056e:	4618      	mov	r0, r3
 8000570:	f006 fa72 	bl	8006a58 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <task1_handler+0x38>)
 8000576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	f3bf 8f4f 	dsb	sy
 8000580:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n",(char*)parameter);
 8000584:	e7ea      	b.n	800055c <task1_handler+0x8>
 8000586:	bf00      	nop
 8000588:	08007520 	.word	0x08007520
 800058c:	e000ed04 	.word	0xe000ed04

08000590 <task2_handler>:
		//HAL_Delay(500);
	}
}

void task2_handler(void *parameter)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b09c      	sub	sp, #112	; 0x70
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		//printf("%s\n",(char*)parameter);
		snprintf(msg,100,"%s\n",(char*)parameter);
 8000598:	f107 000c 	add.w	r0, r7, #12
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <task2_handler+0x34>)
 80005a0:	2164      	movs	r1, #100	; 0x64
 80005a2:	f006 fb13 	bl	8006bcc <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	4618      	mov	r0, r3
 80005ac:	f006 fa54 	bl	8006a58 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <task2_handler+0x38>)
 80005b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n",(char*)parameter);
 80005c0:	e7ea      	b.n	8000598 <task2_handler+0x8>
 80005c2:	bf00      	nop
 80005c4:	08007520 	.word	0x08007520
 80005c8:	e000ed04 	.word	0xe000ed04

080005cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a04      	ldr	r2, [pc, #16]	; (80005ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d101      	bne.n	80005e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005de:	f000 f927 	bl	8000830 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40001000 	.word	0x40001000

080005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f4:	b672      	cpsid	i
}
 80005f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <Error_Handler+0x8>
	...

080005fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_MspInit+0x44>)
 8000604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <HAL_MspInit+0x44>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6613      	str	r3, [r2, #96]	; 0x60
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <HAL_MspInit+0x44>)
 8000610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_MspInit+0x44>)
 800061c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <HAL_MspInit+0x44>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000624:	6593      	str	r3, [r2, #88]	; 0x58
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_MspInit+0x44>)
 8000628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000632:	f003 fe29 	bl	8004288 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40021000 	.word	0x40021000

08000644 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08e      	sub	sp, #56	; 0x38
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800064c:	2300      	movs	r3, #0
 800064e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000652:	4b34      	ldr	r3, [pc, #208]	; (8000724 <HAL_InitTick+0xe0>)
 8000654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000656:	4a33      	ldr	r2, [pc, #204]	; (8000724 <HAL_InitTick+0xe0>)
 8000658:	f043 0310 	orr.w	r3, r3, #16
 800065c:	6593      	str	r3, [r2, #88]	; 0x58
 800065e:	4b31      	ldr	r3, [pc, #196]	; (8000724 <HAL_InitTick+0xe0>)
 8000660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000662:	f003 0310 	and.w	r3, r3, #16
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800066a:	f107 0210 	add.w	r2, r7, #16
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4611      	mov	r1, r2
 8000674:	4618      	mov	r0, r3
 8000676:	f001 f98d 	bl	8001994 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800067a:	6a3b      	ldr	r3, [r7, #32]
 800067c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800067e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000680:	2b00      	cmp	r3, #0
 8000682:	d103      	bne.n	800068c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000684:	f001 f970 	bl	8001968 <HAL_RCC_GetPCLK1Freq>
 8000688:	6378      	str	r0, [r7, #52]	; 0x34
 800068a:	e004      	b.n	8000696 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800068c:	f001 f96c 	bl	8001968 <HAL_RCC_GetPCLK1Freq>
 8000690:	4603      	mov	r3, r0
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000698:	4a23      	ldr	r2, [pc, #140]	; (8000728 <HAL_InitTick+0xe4>)
 800069a:	fba2 2303 	umull	r2, r3, r2, r3
 800069e:	0c9b      	lsrs	r3, r3, #18
 80006a0:	3b01      	subs	r3, #1
 80006a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80006a4:	4b21      	ldr	r3, [pc, #132]	; (800072c <HAL_InitTick+0xe8>)
 80006a6:	4a22      	ldr	r2, [pc, #136]	; (8000730 <HAL_InitTick+0xec>)
 80006a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80006aa:	4b20      	ldr	r3, [pc, #128]	; (800072c <HAL_InitTick+0xe8>)
 80006ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006b0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80006b2:	4a1e      	ldr	r2, [pc, #120]	; (800072c <HAL_InitTick+0xe8>)
 80006b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006b6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <HAL_InitTick+0xe8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006be:	4b1b      	ldr	r3, [pc, #108]	; (800072c <HAL_InitTick+0xe8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <HAL_InitTick+0xe8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80006ca:	4818      	ldr	r0, [pc, #96]	; (800072c <HAL_InitTick+0xe8>)
 80006cc:	f001 f9f4 	bl	8001ab8 <HAL_TIM_Base_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80006d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d11b      	bne.n	8000716 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80006de:	4813      	ldr	r0, [pc, #76]	; (800072c <HAL_InitTick+0xe8>)
 80006e0:	f001 fa4c 	bl	8001b7c <HAL_TIM_Base_Start_IT>
 80006e4:	4603      	mov	r3, r0
 80006e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80006ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d111      	bne.n	8000716 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006f2:	2036      	movs	r0, #54	; 0x36
 80006f4:	f000 f990 	bl	8000a18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b0f      	cmp	r3, #15
 80006fc:	d808      	bhi.n	8000710 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80006fe:	2200      	movs	r2, #0
 8000700:	6879      	ldr	r1, [r7, #4]
 8000702:	2036      	movs	r0, #54	; 0x36
 8000704:	f000 f96c 	bl	80009e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000708:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <HAL_InitTick+0xf0>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6013      	str	r3, [r2, #0]
 800070e:	e002      	b.n	8000716 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000710:	2301      	movs	r3, #1
 8000712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000716:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800071a:	4618      	mov	r0, r3
 800071c:	3738      	adds	r7, #56	; 0x38
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000
 8000728:	431bde83 	.word	0x431bde83
 800072c:	20000094 	.word	0x20000094
 8000730:	40001000 	.word	0x40001000
 8000734:	20000004 	.word	0x20000004

08000738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800073c:	e7fe      	b.n	800073c <NMI_Handler+0x4>

0800073e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <HardFault_Handler+0x4>

08000744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <MemManage_Handler+0x4>

0800074a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <BusFault_Handler+0x4>

08000750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <UsageFault_Handler+0x4>

08000756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000768:	4802      	ldr	r0, [pc, #8]	; (8000774 <TIM6_DAC_IRQHandler+0x10>)
 800076a:	f001 fa77 	bl	8001c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000094 	.word	0x20000094

08000778 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <SystemInit+0x20>)
 800077e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000782:	4a05      	ldr	r2, [pc, #20]	; (8000798 <SystemInit+0x20>)
 8000784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800079c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a0:	f7ff ffea 	bl	8000778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007a6:	490d      	ldr	r1, [pc, #52]	; (80007dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a8:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <LoopForever+0xe>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ac:	e002      	b.n	80007b4 <LoopCopyDataInit>

080007ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b2:	3304      	adds	r3, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b8:	d3f9      	bcc.n	80007ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ba:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007bc:	4c0a      	ldr	r4, [pc, #40]	; (80007e8 <LoopForever+0x16>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c0:	e001      	b.n	80007c6 <LoopFillZerobss>

080007c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c4:	3204      	adds	r2, #4

080007c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c8:	d3fb      	bcc.n	80007c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ca:	f006 f9b5 	bl	8006b38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ce:	f7ff fd9f 	bl	8000310 <main>

080007d2 <LoopForever>:

LoopForever:
    b LoopForever
 80007d2:	e7fe      	b.n	80007d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007dc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80007e0:	080076a8 	.word	0x080076a8
  ldr r2, =_sbss
 80007e4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80007e8:	20014518 	.word	0x20014518

080007ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007ec:	e7fe      	b.n	80007ec <ADC1_2_IRQHandler>
	...

080007f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007f6:	2300      	movs	r3, #0
 80007f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <HAL_Init+0x3c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a0b      	ldr	r2, [pc, #44]	; (800082c <HAL_Init+0x3c>)
 8000800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000804:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000806:	2003      	movs	r0, #3
 8000808:	f000 f8df 	bl	80009ca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800080c:	200f      	movs	r0, #15
 800080e:	f7ff ff19 	bl	8000644 <HAL_InitTick>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d002      	beq.n	800081e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000818:	2301      	movs	r3, #1
 800081a:	71fb      	strb	r3, [r7, #7]
 800081c:	e001      	b.n	8000822 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800081e:	f7ff feed 	bl	80005fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000822:	79fb      	ldrb	r3, [r7, #7]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40022000 	.word	0x40022000

08000830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_IncTick+0x20>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_IncTick+0x24>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4413      	add	r3, r2
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <HAL_IncTick+0x24>)
 8000842:	6013      	str	r3, [r2, #0]
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000008 	.word	0x20000008
 8000854:	200000e0 	.word	0x200000e0

08000858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return uwTick;
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <HAL_GetTick+0x14>)
 800085e:	681b      	ldr	r3, [r3, #0]
}
 8000860:	4618      	mov	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	200000e0 	.word	0x200000e0

08000870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800088c:	4013      	ands	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a2:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	60d3      	str	r3, [r2, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <__NVIC_GetPriorityGrouping+0x18>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	f003 0307 	and.w	r3, r3, #7
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	db0b      	blt.n	80008fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	f003 021f 	and.w	r2, r3, #31
 80008ec:	4907      	ldr	r1, [pc, #28]	; (800090c <__NVIC_EnableIRQ+0x38>)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	095b      	lsrs	r3, r3, #5
 80008f4:	2001      	movs	r0, #1
 80008f6:	fa00 f202 	lsl.w	r2, r0, r2
 80008fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000e100 	.word	0xe000e100

08000910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000920:	2b00      	cmp	r3, #0
 8000922:	db0a      	blt.n	800093a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	b2da      	uxtb	r2, r3
 8000928:	490c      	ldr	r1, [pc, #48]	; (800095c <__NVIC_SetPriority+0x4c>)
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	0112      	lsls	r2, r2, #4
 8000930:	b2d2      	uxtb	r2, r2
 8000932:	440b      	add	r3, r1
 8000934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000938:	e00a      	b.n	8000950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4908      	ldr	r1, [pc, #32]	; (8000960 <__NVIC_SetPriority+0x50>)
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	f003 030f 	and.w	r3, r3, #15
 8000946:	3b04      	subs	r3, #4
 8000948:	0112      	lsls	r2, r2, #4
 800094a:	b2d2      	uxtb	r2, r2
 800094c:	440b      	add	r3, r1
 800094e:	761a      	strb	r2, [r3, #24]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	e000e100 	.word	0xe000e100
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000964:	b480      	push	{r7}
 8000966:	b089      	sub	sp, #36	; 0x24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	f1c3 0307 	rsb	r3, r3, #7
 800097e:	2b04      	cmp	r3, #4
 8000980:	bf28      	it	cs
 8000982:	2304      	movcs	r3, #4
 8000984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3304      	adds	r3, #4
 800098a:	2b06      	cmp	r3, #6
 800098c:	d902      	bls.n	8000994 <NVIC_EncodePriority+0x30>
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	3b03      	subs	r3, #3
 8000992:	e000      	b.n	8000996 <NVIC_EncodePriority+0x32>
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000998:	f04f 32ff 	mov.w	r2, #4294967295
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43da      	mvns	r2, r3
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	401a      	ands	r2, r3
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ac:	f04f 31ff 	mov.w	r1, #4294967295
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	fa01 f303 	lsl.w	r3, r1, r3
 80009b6:	43d9      	mvns	r1, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	4313      	orrs	r3, r2
         );
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3724      	adds	r7, #36	; 0x24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff ff4c 	bl	8000870 <__NVIC_SetPriorityGrouping>
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009f2:	f7ff ff61 	bl	80008b8 <__NVIC_GetPriorityGrouping>
 80009f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	68b9      	ldr	r1, [r7, #8]
 80009fc:	6978      	ldr	r0, [r7, #20]
 80009fe:	f7ff ffb1 	bl	8000964 <NVIC_EncodePriority>
 8000a02:	4602      	mov	r2, r0
 8000a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a08:	4611      	mov	r1, r2
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff80 	bl	8000910 <__NVIC_SetPriority>
}
 8000a10:	bf00      	nop
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff ff54 	bl	80008d4 <__NVIC_EnableIRQ>
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b087      	sub	sp, #28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a42:	e17f      	b.n	8000d44 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	2101      	movs	r1, #1
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a50:	4013      	ands	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f000 8171 	beq.w	8000d3e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f003 0303 	and.w	r3, r3, #3
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d005      	beq.n	8000a74 <HAL_GPIO_Init+0x40>
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f003 0303 	and.w	r3, r3, #3
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d130      	bne.n	8000ad6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	2203      	movs	r2, #3
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	68da      	ldr	r2, [r3, #12]
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aaa:	2201      	movs	r2, #1
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	091b      	lsrs	r3, r3, #4
 8000ac0:	f003 0201 	and.w	r2, r3, #1
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f003 0303 	and.w	r3, r3, #3
 8000ade:	2b03      	cmp	r3, #3
 8000ae0:	d118      	bne.n	8000b14 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ae8:	2201      	movs	r2, #1
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	43db      	mvns	r3, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	f003 0201 	and.w	r2, r3, #1
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f003 0303 	and.w	r3, r3, #3
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	d017      	beq.n	8000b50 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	689a      	ldr	r2, [r3, #8]
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f003 0303 	and.w	r3, r3, #3
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d123      	bne.n	8000ba4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	08da      	lsrs	r2, r3, #3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3208      	adds	r2, #8
 8000b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	f003 0307 	and.w	r3, r3, #7
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	220f      	movs	r2, #15
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	691a      	ldr	r2, [r3, #16]
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	08da      	lsrs	r2, r3, #3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3208      	adds	r2, #8
 8000b9e:	6939      	ldr	r1, [r7, #16]
 8000ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	2203      	movs	r2, #3
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 0203 	and.w	r2, r3, #3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	f000 80ac 	beq.w	8000d3e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b5f      	ldr	r3, [pc, #380]	; (8000d64 <HAL_GPIO_Init+0x330>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	4a5e      	ldr	r2, [pc, #376]	; (8000d64 <HAL_GPIO_Init+0x330>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf2:	4b5c      	ldr	r3, [pc, #368]	; (8000d64 <HAL_GPIO_Init+0x330>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bfe:	4a5a      	ldr	r2, [pc, #360]	; (8000d68 <HAL_GPIO_Init+0x334>)
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	089b      	lsrs	r3, r3, #2
 8000c04:	3302      	adds	r3, #2
 8000c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	f003 0303 	and.w	r3, r3, #3
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	220f      	movs	r2, #15
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c28:	d025      	beq.n	8000c76 <HAL_GPIO_Init+0x242>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a4f      	ldr	r2, [pc, #316]	; (8000d6c <HAL_GPIO_Init+0x338>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d01f      	beq.n	8000c72 <HAL_GPIO_Init+0x23e>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a4e      	ldr	r2, [pc, #312]	; (8000d70 <HAL_GPIO_Init+0x33c>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d019      	beq.n	8000c6e <HAL_GPIO_Init+0x23a>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a4d      	ldr	r2, [pc, #308]	; (8000d74 <HAL_GPIO_Init+0x340>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d013      	beq.n	8000c6a <HAL_GPIO_Init+0x236>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a4c      	ldr	r2, [pc, #304]	; (8000d78 <HAL_GPIO_Init+0x344>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d00d      	beq.n	8000c66 <HAL_GPIO_Init+0x232>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a4b      	ldr	r2, [pc, #300]	; (8000d7c <HAL_GPIO_Init+0x348>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d007      	beq.n	8000c62 <HAL_GPIO_Init+0x22e>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a4a      	ldr	r2, [pc, #296]	; (8000d80 <HAL_GPIO_Init+0x34c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d101      	bne.n	8000c5e <HAL_GPIO_Init+0x22a>
 8000c5a:	2306      	movs	r3, #6
 8000c5c:	e00c      	b.n	8000c78 <HAL_GPIO_Init+0x244>
 8000c5e:	2307      	movs	r3, #7
 8000c60:	e00a      	b.n	8000c78 <HAL_GPIO_Init+0x244>
 8000c62:	2305      	movs	r3, #5
 8000c64:	e008      	b.n	8000c78 <HAL_GPIO_Init+0x244>
 8000c66:	2304      	movs	r3, #4
 8000c68:	e006      	b.n	8000c78 <HAL_GPIO_Init+0x244>
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e004      	b.n	8000c78 <HAL_GPIO_Init+0x244>
 8000c6e:	2302      	movs	r3, #2
 8000c70:	e002      	b.n	8000c78 <HAL_GPIO_Init+0x244>
 8000c72:	2301      	movs	r3, #1
 8000c74:	e000      	b.n	8000c78 <HAL_GPIO_Init+0x244>
 8000c76:	2300      	movs	r3, #0
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	f002 0203 	and.w	r2, r2, #3
 8000c7e:	0092      	lsls	r2, r2, #2
 8000c80:	4093      	lsls	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c88:	4937      	ldr	r1, [pc, #220]	; (8000d68 <HAL_GPIO_Init+0x334>)
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	089b      	lsrs	r3, r3, #2
 8000c8e:	3302      	adds	r3, #2
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c96:	4b3b      	ldr	r3, [pc, #236]	; (8000d84 <HAL_GPIO_Init+0x350>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cba:	4a32      	ldr	r2, [pc, #200]	; (8000d84 <HAL_GPIO_Init+0x350>)
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000cc0:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <HAL_GPIO_Init+0x350>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d003      	beq.n	8000ce4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ce4:	4a27      	ldr	r2, [pc, #156]	; (8000d84 <HAL_GPIO_Init+0x350>)
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000cea:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <HAL_GPIO_Init+0x350>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d0e:	4a1d      	ldr	r2, [pc, #116]	; (8000d84 <HAL_GPIO_Init+0x350>)
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <HAL_GPIO_Init+0x350>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d003      	beq.n	8000d38 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d38:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <HAL_GPIO_Init+0x350>)
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3301      	adds	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f47f ae78 	bne.w	8000a44 <HAL_GPIO_Init+0x10>
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	371c      	adds	r7, #28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010000 	.word	0x40010000
 8000d6c:	48000400 	.word	0x48000400
 8000d70:	48000800 	.word	0x48000800
 8000d74:	48000c00 	.word	0x48000c00
 8000d78:	48001000 	.word	0x48001000
 8000d7c:	48001400 	.word	0x48001400
 8000d80:	48001800 	.word	0x48001800
 8000d84:	40010400 	.word	0x40010400

08000d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	807b      	strh	r3, [r7, #2]
 8000d94:	4613      	mov	r3, r2
 8000d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d98:	787b      	ldrb	r3, [r7, #1]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d9e:	887a      	ldrh	r2, [r7, #2]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000da4:	e002      	b.n	8000dac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000da6:	887a      	ldrh	r2, [r7, #2]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40007000 	.word	0x40007000

08000dd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000de2:	d130      	bne.n	8000e46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000de4:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000df0:	d038      	beq.n	8000e64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df2:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dfa:	4a1e      	ldr	r2, [pc, #120]	; (8000e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e02:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2232      	movs	r2, #50	; 0x32
 8000e08:	fb02 f303 	mul.w	r3, r2, r3
 8000e0c:	4a1b      	ldr	r2, [pc, #108]	; (8000e7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e12:	0c9b      	lsrs	r3, r3, #18
 8000e14:	3301      	adds	r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e18:	e002      	b.n	8000e20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e2c:	d102      	bne.n	8000e34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1f2      	bne.n	8000e1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e40:	d110      	bne.n	8000e64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e00f      	b.n	8000e66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e52:	d007      	beq.n	8000e64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e5c:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40007000 	.word	0x40007000
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	431bde83 	.word	0x431bde83

08000e80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e3ca      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e92:	4b97      	ldr	r3, [pc, #604]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 030c 	and.w	r3, r3, #12
 8000e9a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e9c:	4b94      	ldr	r3, [pc, #592]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0310 	and.w	r3, r3, #16
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 80e4 	beq.w	800107c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d007      	beq.n	8000eca <HAL_RCC_OscConfig+0x4a>
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	2b0c      	cmp	r3, #12
 8000ebe:	f040 808b 	bne.w	8000fd8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	f040 8087 	bne.w	8000fd8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000eca:	4b89      	ldr	r3, [pc, #548]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d005      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x62>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e3a2      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a1a      	ldr	r2, [r3, #32]
 8000ee6:	4b82      	ldr	r3, [pc, #520]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0308 	and.w	r3, r3, #8
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d004      	beq.n	8000efc <HAL_RCC_OscConfig+0x7c>
 8000ef2:	4b7f      	ldr	r3, [pc, #508]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000efa:	e005      	b.n	8000f08 <HAL_RCC_OscConfig+0x88>
 8000efc:	4b7c      	ldr	r3, [pc, #496]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8000efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f02:	091b      	lsrs	r3, r3, #4
 8000f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d223      	bcs.n	8000f54 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 fd71 	bl	80019f8 <RCC_SetFlashLatencyFromMSIRange>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e383      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f20:	4b73      	ldr	r3, [pc, #460]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a72      	ldr	r2, [pc, #456]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8000f26:	f043 0308 	orr.w	r3, r3, #8
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	4b70      	ldr	r3, [pc, #448]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a1b      	ldr	r3, [r3, #32]
 8000f38:	496d      	ldr	r1, [pc, #436]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f3e:	4b6c      	ldr	r3, [pc, #432]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	4968      	ldr	r1, [pc, #416]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	604b      	str	r3, [r1, #4]
 8000f52:	e025      	b.n	8000fa0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f54:	4b66      	ldr	r3, [pc, #408]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a65      	ldr	r2, [pc, #404]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8000f5a:	f043 0308 	orr.w	r3, r3, #8
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b63      	ldr	r3, [pc, #396]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a1b      	ldr	r3, [r3, #32]
 8000f6c:	4960      	ldr	r1, [pc, #384]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f72:	4b5f      	ldr	r3, [pc, #380]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	495b      	ldr	r1, [pc, #364]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8000f82:	4313      	orrs	r3, r2
 8000f84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d109      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 fd31 	bl	80019f8 <RCC_SetFlashLatencyFromMSIRange>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e343      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fa0:	f000 fc4a 	bl	8001838 <HAL_RCC_GetSysClockFreq>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	4b52      	ldr	r3, [pc, #328]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	091b      	lsrs	r3, r3, #4
 8000fac:	f003 030f 	and.w	r3, r3, #15
 8000fb0:	4950      	ldr	r1, [pc, #320]	; (80010f4 <HAL_RCC_OscConfig+0x274>)
 8000fb2:	5ccb      	ldrb	r3, [r1, r3]
 8000fb4:	f003 031f 	and.w	r3, r3, #31
 8000fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fbc:	4a4e      	ldr	r2, [pc, #312]	; (80010f8 <HAL_RCC_OscConfig+0x278>)
 8000fbe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000fc0:	4b4e      	ldr	r3, [pc, #312]	; (80010fc <HAL_RCC_OscConfig+0x27c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fb3d 	bl	8000644 <HAL_InitTick>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d052      	beq.n	800107a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	e327      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d032      	beq.n	8001046 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fe0:	4b43      	ldr	r3, [pc, #268]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a42      	ldr	r2, [pc, #264]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fc34 	bl	8000858 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ff4:	f7ff fc30 	bl	8000858 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e310      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001006:	4b3a      	ldr	r3, [pc, #232]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0f0      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001012:	4b37      	ldr	r3, [pc, #220]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a36      	ldr	r2, [pc, #216]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8001018:	f043 0308 	orr.w	r3, r3, #8
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	4b34      	ldr	r3, [pc, #208]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	4931      	ldr	r1, [pc, #196]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 800102c:	4313      	orrs	r3, r2
 800102e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001030:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	492c      	ldr	r1, [pc, #176]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8001040:	4313      	orrs	r3, r2
 8001042:	604b      	str	r3, [r1, #4]
 8001044:	e01a      	b.n	800107c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001046:	4b2a      	ldr	r3, [pc, #168]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a29      	ldr	r2, [pc, #164]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 800104c:	f023 0301 	bic.w	r3, r3, #1
 8001050:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001052:	f7ff fc01 	bl	8000858 <HAL_GetTick>
 8001056:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800105a:	f7ff fbfd 	bl	8000858 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e2dd      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800106c:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1f0      	bne.n	800105a <HAL_RCC_OscConfig+0x1da>
 8001078:	e000      	b.n	800107c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800107a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	2b00      	cmp	r3, #0
 8001086:	d074      	beq.n	8001172 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	2b08      	cmp	r3, #8
 800108c:	d005      	beq.n	800109a <HAL_RCC_OscConfig+0x21a>
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	2b0c      	cmp	r3, #12
 8001092:	d10e      	bne.n	80010b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	2b03      	cmp	r3, #3
 8001098:	d10b      	bne.n	80010b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d064      	beq.n	8001170 <HAL_RCC_OscConfig+0x2f0>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d160      	bne.n	8001170 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e2ba      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ba:	d106      	bne.n	80010ca <HAL_RCC_OscConfig+0x24a>
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 80010c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	e026      	b.n	8001118 <HAL_RCC_OscConfig+0x298>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010d2:	d115      	bne.n	8001100 <HAL_RCC_OscConfig+0x280>
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 80010da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a02      	ldr	r2, [pc, #8]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 80010e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	e014      	b.n	8001118 <HAL_RCC_OscConfig+0x298>
 80010ee:	bf00      	nop
 80010f0:	40021000 	.word	0x40021000
 80010f4:	08007600 	.word	0x08007600
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000004 	.word	0x20000004
 8001100:	4ba0      	ldr	r3, [pc, #640]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a9f      	ldr	r2, [pc, #636]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 8001106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b9d      	ldr	r3, [pc, #628]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a9c      	ldr	r2, [pc, #624]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 8001112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d013      	beq.n	8001148 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001120:	f7ff fb9a 	bl	8000858 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001128:	f7ff fb96 	bl	8000858 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b64      	cmp	r3, #100	; 0x64
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e276      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800113a:	4b92      	ldr	r3, [pc, #584]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0x2a8>
 8001146:	e014      	b.n	8001172 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001148:	f7ff fb86 	bl	8000858 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001150:	f7ff fb82 	bl	8000858 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b64      	cmp	r3, #100	; 0x64
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e262      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001162:	4b88      	ldr	r3, [pc, #544]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x2d0>
 800116e:	e000      	b.n	8001172 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d060      	beq.n	8001240 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	2b04      	cmp	r3, #4
 8001182:	d005      	beq.n	8001190 <HAL_RCC_OscConfig+0x310>
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	2b0c      	cmp	r3, #12
 8001188:	d119      	bne.n	80011be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d116      	bne.n	80011be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001190:	4b7c      	ldr	r3, [pc, #496]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <HAL_RCC_OscConfig+0x328>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e23f      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a8:	4b76      	ldr	r3, [pc, #472]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	061b      	lsls	r3, r3, #24
 80011b6:	4973      	ldr	r1, [pc, #460]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011bc:	e040      	b.n	8001240 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d023      	beq.n	800120e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c6:	4b6f      	ldr	r3, [pc, #444]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a6e      	ldr	r2, [pc, #440]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 80011cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d2:	f7ff fb41 	bl	8000858 <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011da:	f7ff fb3d 	bl	8000858 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e21d      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011ec:	4b65      	ldr	r3, [pc, #404]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f8:	4b62      	ldr	r3, [pc, #392]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	061b      	lsls	r3, r3, #24
 8001206:	495f      	ldr	r1, [pc, #380]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 8001208:	4313      	orrs	r3, r2
 800120a:	604b      	str	r3, [r1, #4]
 800120c:	e018      	b.n	8001240 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800120e:	4b5d      	ldr	r3, [pc, #372]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a5c      	ldr	r2, [pc, #368]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 8001214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121a:	f7ff fb1d 	bl	8000858 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001222:	f7ff fb19 	bl	8000858 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e1f9      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001234:	4b53      	ldr	r3, [pc, #332]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f0      	bne.n	8001222 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	2b00      	cmp	r3, #0
 800124a:	d03c      	beq.n	80012c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d01c      	beq.n	800128e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001254:	4b4b      	ldr	r3, [pc, #300]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 8001256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800125a:	4a4a      	ldr	r2, [pc, #296]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001264:	f7ff faf8 	bl	8000858 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800126c:	f7ff faf4 	bl	8000858 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e1d4      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800127e:	4b41      	ldr	r3, [pc, #260]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 8001280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0ef      	beq.n	800126c <HAL_RCC_OscConfig+0x3ec>
 800128c:	e01b      	b.n	80012c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800128e:	4b3d      	ldr	r3, [pc, #244]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 8001290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001294:	4a3b      	ldr	r2, [pc, #236]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 8001296:	f023 0301 	bic.w	r3, r3, #1
 800129a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800129e:	f7ff fadb 	bl	8000858 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a6:	f7ff fad7 	bl	8000858 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e1b7      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012b8:	4b32      	ldr	r3, [pc, #200]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 80012ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1ef      	bne.n	80012a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 80a6 	beq.w	8001420 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012d8:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 80012da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d10d      	bne.n	8001300 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 80012e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e8:	4a26      	ldr	r2, [pc, #152]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 80012ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ee:	6593      	str	r3, [r2, #88]	; 0x58
 80012f0:	4b24      	ldr	r3, [pc, #144]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 80012f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012fc:	2301      	movs	r3, #1
 80012fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001300:	4b21      	ldr	r3, [pc, #132]	; (8001388 <HAL_RCC_OscConfig+0x508>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001308:	2b00      	cmp	r3, #0
 800130a:	d118      	bne.n	800133e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <HAL_RCC_OscConfig+0x508>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a1d      	ldr	r2, [pc, #116]	; (8001388 <HAL_RCC_OscConfig+0x508>)
 8001312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001316:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001318:	f7ff fa9e 	bl	8000858 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001320:	f7ff fa9a 	bl	8000858 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e17a      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <HAL_RCC_OscConfig+0x508>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d108      	bne.n	8001358 <HAL_RCC_OscConfig+0x4d8>
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 8001348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800134c:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001356:	e029      	b.n	80013ac <HAL_RCC_OscConfig+0x52c>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b05      	cmp	r3, #5
 800135e:	d115      	bne.n	800138c <HAL_RCC_OscConfig+0x50c>
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 8001362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001366:	4a07      	ldr	r2, [pc, #28]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 8001372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001376:	4a03      	ldr	r2, [pc, #12]	; (8001384 <HAL_RCC_OscConfig+0x504>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001380:	e014      	b.n	80013ac <HAL_RCC_OscConfig+0x52c>
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000
 8001388:	40007000 	.word	0x40007000
 800138c:	4b9c      	ldr	r3, [pc, #624]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 800138e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001392:	4a9b      	ldr	r2, [pc, #620]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 8001394:	f023 0301 	bic.w	r3, r3, #1
 8001398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800139c:	4b98      	ldr	r3, [pc, #608]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 800139e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013a2:	4a97      	ldr	r2, [pc, #604]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 80013a4:	f023 0304 	bic.w	r3, r3, #4
 80013a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d016      	beq.n	80013e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b4:	f7ff fa50 	bl	8000858 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013ba:	e00a      	b.n	80013d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013bc:	f7ff fa4c 	bl	8000858 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e12a      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013d2:	4b8b      	ldr	r3, [pc, #556]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 80013d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0ed      	beq.n	80013bc <HAL_RCC_OscConfig+0x53c>
 80013e0:	e015      	b.n	800140e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e2:	f7ff fa39 	bl	8000858 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013e8:	e00a      	b.n	8001400 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ea:	f7ff fa35 	bl	8000858 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e113      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001400:	4b7f      	ldr	r3, [pc, #508]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 8001402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1ed      	bne.n	80013ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800140e:	7ffb      	ldrb	r3, [r7, #31]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d105      	bne.n	8001420 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001414:	4b7a      	ldr	r3, [pc, #488]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 8001416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001418:	4a79      	ldr	r2, [pc, #484]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 800141a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800141e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 80fe 	beq.w	8001626 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142e:	2b02      	cmp	r3, #2
 8001430:	f040 80d0 	bne.w	80015d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001434:	4b72      	ldr	r3, [pc, #456]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f003 0203 	and.w	r2, r3, #3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	429a      	cmp	r2, r3
 8001446:	d130      	bne.n	80014aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	3b01      	subs	r3, #1
 8001454:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001456:	429a      	cmp	r2, r3
 8001458:	d127      	bne.n	80014aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001464:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001466:	429a      	cmp	r2, r3
 8001468:	d11f      	bne.n	80014aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001474:	2a07      	cmp	r2, #7
 8001476:	bf14      	ite	ne
 8001478:	2201      	movne	r2, #1
 800147a:	2200      	moveq	r2, #0
 800147c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800147e:	4293      	cmp	r3, r2
 8001480:	d113      	bne.n	80014aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	3b01      	subs	r3, #1
 8001490:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001492:	429a      	cmp	r2, r3
 8001494:	d109      	bne.n	80014aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	085b      	lsrs	r3, r3, #1
 80014a2:	3b01      	subs	r3, #1
 80014a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d06e      	beq.n	8001588 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d069      	beq.n	8001584 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80014b0:	4b53      	ldr	r3, [pc, #332]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d105      	bne.n	80014c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80014bc:	4b50      	ldr	r3, [pc, #320]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e0ad      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014cc:	4b4c      	ldr	r3, [pc, #304]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a4b      	ldr	r2, [pc, #300]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 80014d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014d8:	f7ff f9be 	bl	8000858 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e0:	f7ff f9ba 	bl	8000858 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e09a      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014f2:	4b43      	ldr	r3, [pc, #268]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014fe:	4b40      	ldr	r3, [pc, #256]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 8001500:	68da      	ldr	r2, [r3, #12]
 8001502:	4b40      	ldr	r3, [pc, #256]	; (8001604 <HAL_RCC_OscConfig+0x784>)
 8001504:	4013      	ands	r3, r2
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800150e:	3a01      	subs	r2, #1
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	4311      	orrs	r1, r2
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001518:	0212      	lsls	r2, r2, #8
 800151a:	4311      	orrs	r1, r2
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001520:	0852      	lsrs	r2, r2, #1
 8001522:	3a01      	subs	r2, #1
 8001524:	0552      	lsls	r2, r2, #21
 8001526:	4311      	orrs	r1, r2
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800152c:	0852      	lsrs	r2, r2, #1
 800152e:	3a01      	subs	r2, #1
 8001530:	0652      	lsls	r2, r2, #25
 8001532:	4311      	orrs	r1, r2
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001538:	0912      	lsrs	r2, r2, #4
 800153a:	0452      	lsls	r2, r2, #17
 800153c:	430a      	orrs	r2, r1
 800153e:	4930      	ldr	r1, [pc, #192]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 8001540:	4313      	orrs	r3, r2
 8001542:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001544:	4b2e      	ldr	r3, [pc, #184]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a2d      	ldr	r2, [pc, #180]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 800154a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800154e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001550:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	4a2a      	ldr	r2, [pc, #168]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 8001556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800155a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800155c:	f7ff f97c 	bl	8000858 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001564:	f7ff f978 	bl	8000858 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e058      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001576:	4b22      	ldr	r3, [pc, #136]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001582:	e050      	b.n	8001626 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e04f      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001588:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d148      	bne.n	8001626 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001594:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a19      	ldr	r2, [pc, #100]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 800159a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800159e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015a0:	4b17      	ldr	r3, [pc, #92]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	4a16      	ldr	r2, [pc, #88]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 80015a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015ac:	f7ff f954 	bl	8000858 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff f950 	bl	8000858 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e030      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0x734>
 80015d2:	e028      	b.n	8001626 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2b0c      	cmp	r3, #12
 80015d8:	d023      	beq.n	8001622 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a08      	ldr	r2, [pc, #32]	; (8001600 <HAL_RCC_OscConfig+0x780>)
 80015e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e6:	f7ff f937 	bl	8000858 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015ec:	e00c      	b.n	8001608 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ee:	f7ff f933 	bl	8000858 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d905      	bls.n	8001608 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e013      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
 8001600:	40021000 	.word	0x40021000
 8001604:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_RCC_OscConfig+0x7b0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1ec      	bne.n	80015ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_RCC_OscConfig+0x7b0>)
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	4905      	ldr	r1, [pc, #20]	; (8001630 <HAL_RCC_OscConfig+0x7b0>)
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_RCC_OscConfig+0x7b4>)
 800161c:	4013      	ands	r3, r2
 800161e:	60cb      	str	r3, [r1, #12]
 8001620:	e001      	b.n	8001626 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3720      	adds	r7, #32
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021000 	.word	0x40021000
 8001634:	feeefffc 	.word	0xfeeefffc

08001638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0e7      	b.n	800181c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800164c:	4b75      	ldr	r3, [pc, #468]	; (8001824 <HAL_RCC_ClockConfig+0x1ec>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d910      	bls.n	800167c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b72      	ldr	r3, [pc, #456]	; (8001824 <HAL_RCC_ClockConfig+0x1ec>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 0207 	bic.w	r2, r3, #7
 8001662:	4970      	ldr	r1, [pc, #448]	; (8001824 <HAL_RCC_ClockConfig+0x1ec>)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b6e      	ldr	r3, [pc, #440]	; (8001824 <HAL_RCC_ClockConfig+0x1ec>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0cf      	b.n	800181c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d010      	beq.n	80016aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	4b66      	ldr	r3, [pc, #408]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001694:	429a      	cmp	r2, r3
 8001696:	d908      	bls.n	80016aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001698:	4b63      	ldr	r3, [pc, #396]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	4960      	ldr	r1, [pc, #384]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d04c      	beq.n	8001750 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016be:	4b5a      	ldr	r3, [pc, #360]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d121      	bne.n	800170e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e0a6      	b.n	800181c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016d6:	4b54      	ldr	r3, [pc, #336]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d115      	bne.n	800170e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e09a      	b.n	800181c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016ee:	4b4e      	ldr	r3, [pc, #312]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d109      	bne.n	800170e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e08e      	b.n	800181c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016fe:	4b4a      	ldr	r3, [pc, #296]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e086      	b.n	800181c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800170e:	4b46      	ldr	r3, [pc, #280]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f023 0203 	bic.w	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4943      	ldr	r1, [pc, #268]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 800171c:	4313      	orrs	r3, r2
 800171e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001720:	f7ff f89a 	bl	8000858 <HAL_GetTick>
 8001724:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001726:	e00a      	b.n	800173e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001728:	f7ff f896 	bl	8000858 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	; 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e06e      	b.n	800181c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	4b3a      	ldr	r3, [pc, #232]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 020c 	and.w	r2, r3, #12
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	429a      	cmp	r2, r3
 800174e:	d1eb      	bne.n	8001728 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d010      	beq.n	800177e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	4b31      	ldr	r3, [pc, #196]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001768:	429a      	cmp	r2, r3
 800176a:	d208      	bcs.n	800177e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176c:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	492b      	ldr	r1, [pc, #172]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800177e:	4b29      	ldr	r3, [pc, #164]	; (8001824 <HAL_RCC_ClockConfig+0x1ec>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d210      	bcs.n	80017ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178c:	4b25      	ldr	r3, [pc, #148]	; (8001824 <HAL_RCC_ClockConfig+0x1ec>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f023 0207 	bic.w	r2, r3, #7
 8001794:	4923      	ldr	r1, [pc, #140]	; (8001824 <HAL_RCC_ClockConfig+0x1ec>)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	4313      	orrs	r3, r2
 800179a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179c:	4b21      	ldr	r3, [pc, #132]	; (8001824 <HAL_RCC_ClockConfig+0x1ec>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d001      	beq.n	80017ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e036      	b.n	800181c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d008      	beq.n	80017cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ba:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	4918      	ldr	r1, [pc, #96]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d009      	beq.n	80017ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	4910      	ldr	r1, [pc, #64]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017ec:	f000 f824 	bl	8001838 <HAL_RCC_GetSysClockFreq>
 80017f0:	4602      	mov	r2, r0
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <HAL_RCC_ClockConfig+0x1f0>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	f003 030f 	and.w	r3, r3, #15
 80017fc:	490b      	ldr	r1, [pc, #44]	; (800182c <HAL_RCC_ClockConfig+0x1f4>)
 80017fe:	5ccb      	ldrb	r3, [r1, r3]
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	fa22 f303 	lsr.w	r3, r2, r3
 8001808:	4a09      	ldr	r2, [pc, #36]	; (8001830 <HAL_RCC_ClockConfig+0x1f8>)
 800180a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_RCC_ClockConfig+0x1fc>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe ff17 	bl	8000644 <HAL_InitTick>
 8001816:	4603      	mov	r3, r0
 8001818:	72fb      	strb	r3, [r7, #11]

  return status;
 800181a:	7afb      	ldrb	r3, [r7, #11]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40022000 	.word	0x40022000
 8001828:	40021000 	.word	0x40021000
 800182c:	08007600 	.word	0x08007600
 8001830:	20000000 	.word	0x20000000
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001846:	4b3e      	ldr	r3, [pc, #248]	; (8001940 <HAL_RCC_GetSysClockFreq+0x108>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001850:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <HAL_RCC_GetSysClockFreq+0x108>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_GetSysClockFreq+0x34>
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	2b0c      	cmp	r3, #12
 8001864:	d121      	bne.n	80018aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d11e      	bne.n	80018aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800186c:	4b34      	ldr	r3, [pc, #208]	; (8001940 <HAL_RCC_GetSysClockFreq+0x108>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	2b00      	cmp	r3, #0
 8001876:	d107      	bne.n	8001888 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001878:	4b31      	ldr	r3, [pc, #196]	; (8001940 <HAL_RCC_GetSysClockFreq+0x108>)
 800187a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800187e:	0a1b      	lsrs	r3, r3, #8
 8001880:	f003 030f 	and.w	r3, r3, #15
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	e005      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001888:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <HAL_RCC_GetSysClockFreq+0x108>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	091b      	lsrs	r3, r3, #4
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001894:	4a2b      	ldr	r2, [pc, #172]	; (8001944 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10d      	bne.n	80018c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018a8:	e00a      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d102      	bne.n	80018b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018b0:	4b25      	ldr	r3, [pc, #148]	; (8001948 <HAL_RCC_GetSysClockFreq+0x110>)
 80018b2:	61bb      	str	r3, [r7, #24]
 80018b4:	e004      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018bc:	4b23      	ldr	r3, [pc, #140]	; (800194c <HAL_RCC_GetSysClockFreq+0x114>)
 80018be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	2b0c      	cmp	r3, #12
 80018c4:	d134      	bne.n	8001930 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018c6:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <HAL_RCC_GetSysClockFreq+0x108>)
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d003      	beq.n	80018de <HAL_RCC_GetSysClockFreq+0xa6>
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d003      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0xac>
 80018dc:	e005      	b.n	80018ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <HAL_RCC_GetSysClockFreq+0x110>)
 80018e0:	617b      	str	r3, [r7, #20]
      break;
 80018e2:	e005      	b.n	80018f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_RCC_GetSysClockFreq+0x114>)
 80018e6:	617b      	str	r3, [r7, #20]
      break;
 80018e8:	e002      	b.n	80018f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	617b      	str	r3, [r7, #20]
      break;
 80018ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <HAL_RCC_GetSysClockFreq+0x108>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	3301      	adds	r3, #1
 80018fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_RCC_GetSysClockFreq+0x108>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	fb03 f202 	mul.w	r2, r3, r2
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	fbb2 f3f3 	udiv	r3, r2, r3
 8001914:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_RCC_GetSysClockFreq+0x108>)
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	0e5b      	lsrs	r3, r3, #25
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	3301      	adds	r3, #1
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	fbb2 f3f3 	udiv	r3, r2, r3
 800192e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001930:	69bb      	ldr	r3, [r7, #24]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3724      	adds	r7, #36	; 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000
 8001944:	08007618 	.word	0x08007618
 8001948:	00f42400 	.word	0x00f42400
 800194c:	007a1200 	.word	0x007a1200

08001950 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_RCC_GetHCLKFreq+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000000 	.word	0x20000000

08001968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800196c:	f7ff fff0 	bl	8001950 <HAL_RCC_GetHCLKFreq>
 8001970:	4602      	mov	r2, r0
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	0a1b      	lsrs	r3, r3, #8
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	4904      	ldr	r1, [pc, #16]	; (8001990 <HAL_RCC_GetPCLK1Freq+0x28>)
 800197e:	5ccb      	ldrb	r3, [r1, r3]
 8001980:	f003 031f 	and.w	r3, r3, #31
 8001984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001988:	4618      	mov	r0, r3
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40021000 	.word	0x40021000
 8001990:	08007610 	.word	0x08007610

08001994 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	220f      	movs	r2, #15
 80019a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_RCC_GetClockConfig+0x5c>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 0203 	and.w	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <HAL_RCC_GetClockConfig+0x5c>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <HAL_RCC_GetClockConfig+0x5c>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_RCC_GetClockConfig+0x5c>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	08db      	lsrs	r3, r3, #3
 80019ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <HAL_RCC_GetClockConfig+0x60>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0207 	and.w	r2, r3, #7
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	601a      	str	r2, [r3, #0]
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40022000 	.word	0x40022000

080019f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a04:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a10:	f7ff f9d2 	bl	8000db8 <HAL_PWREx_GetVoltageRange>
 8001a14:	6178      	str	r0, [r7, #20]
 8001a16:	e014      	b.n	8001a42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1c:	4a24      	ldr	r2, [pc, #144]	; (8001ab0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a22:	6593      	str	r3, [r2, #88]	; 0x58
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a30:	f7ff f9c2 	bl	8000db8 <HAL_PWREx_GetVoltageRange>
 8001a34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a36:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3a:	4a1d      	ldr	r2, [pc, #116]	; (8001ab0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a48:	d10b      	bne.n	8001a62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b80      	cmp	r3, #128	; 0x80
 8001a4e:	d919      	bls.n	8001a84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2ba0      	cmp	r3, #160	; 0xa0
 8001a54:	d902      	bls.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a56:	2302      	movs	r3, #2
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	e013      	b.n	8001a84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	e010      	b.n	8001a84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b80      	cmp	r3, #128	; 0x80
 8001a66:	d902      	bls.n	8001a6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a68:	2303      	movs	r3, #3
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	e00a      	b.n	8001a84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b80      	cmp	r3, #128	; 0x80
 8001a72:	d102      	bne.n	8001a7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a74:	2302      	movs	r3, #2
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	e004      	b.n	8001a84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b70      	cmp	r3, #112	; 0x70
 8001a7e:	d101      	bne.n	8001a84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a80:	2301      	movs	r3, #1
 8001a82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f023 0207 	bic.w	r2, r3, #7
 8001a8c:	4909      	ldr	r1, [pc, #36]	; (8001ab4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d001      	beq.n	8001aa6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40022000 	.word	0x40022000

08001ab8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e049      	b.n	8001b5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d106      	bne.n	8001ae4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f841 	bl	8001b66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3304      	adds	r3, #4
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f000 f9f8 	bl	8001eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d001      	beq.n	8001b94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e04f      	b.n	8001c34 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a23      	ldr	r2, [pc, #140]	; (8001c40 <HAL_TIM_Base_Start_IT+0xc4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d01d      	beq.n	8001bf2 <HAL_TIM_Base_Start_IT+0x76>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bbe:	d018      	beq.n	8001bf2 <HAL_TIM_Base_Start_IT+0x76>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a1f      	ldr	r2, [pc, #124]	; (8001c44 <HAL_TIM_Base_Start_IT+0xc8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d013      	beq.n	8001bf2 <HAL_TIM_Base_Start_IT+0x76>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a1e      	ldr	r2, [pc, #120]	; (8001c48 <HAL_TIM_Base_Start_IT+0xcc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d00e      	beq.n	8001bf2 <HAL_TIM_Base_Start_IT+0x76>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <HAL_TIM_Base_Start_IT+0xd0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d009      	beq.n	8001bf2 <HAL_TIM_Base_Start_IT+0x76>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a1b      	ldr	r2, [pc, #108]	; (8001c50 <HAL_TIM_Base_Start_IT+0xd4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d004      	beq.n	8001bf2 <HAL_TIM_Base_Start_IT+0x76>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a19      	ldr	r2, [pc, #100]	; (8001c54 <HAL_TIM_Base_Start_IT+0xd8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d115      	bne.n	8001c1e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_TIM_Base_Start_IT+0xdc>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2b06      	cmp	r3, #6
 8001c02:	d015      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0xb4>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0a:	d011      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c1c:	e008      	b.n	8001c30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0201 	orr.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	e000      	b.n	8001c32 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	40012c00 	.word	0x40012c00
 8001c44:	40000400 	.word	0x40000400
 8001c48:	40000800 	.word	0x40000800
 8001c4c:	40000c00 	.word	0x40000c00
 8001c50:	40013400 	.word	0x40013400
 8001c54:	40014000 	.word	0x40014000
 8001c58:	00010007 	.word	0x00010007

08001c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d122      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d11b      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0202 	mvn.w	r2, #2
 8001c88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f905 	bl	8001eae <HAL_TIM_IC_CaptureCallback>
 8001ca4:	e005      	b.n	8001cb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f8f7 	bl	8001e9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f908 	bl	8001ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d122      	bne.n	8001d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d11b      	bne.n	8001d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f06f 0204 	mvn.w	r2, #4
 8001cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f8db 	bl	8001eae <HAL_TIM_IC_CaptureCallback>
 8001cf8:	e005      	b.n	8001d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f8cd 	bl	8001e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f8de 	bl	8001ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d122      	bne.n	8001d60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d11b      	bne.n	8001d60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0208 	mvn.w	r2, #8
 8001d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2204      	movs	r2, #4
 8001d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f8b1 	bl	8001eae <HAL_TIM_IC_CaptureCallback>
 8001d4c:	e005      	b.n	8001d5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f8a3 	bl	8001e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f8b4 	bl	8001ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	f003 0310 	and.w	r3, r3, #16
 8001d6a:	2b10      	cmp	r3, #16
 8001d6c:	d122      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	2b10      	cmp	r3, #16
 8001d7a:	d11b      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f06f 0210 	mvn.w	r2, #16
 8001d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2208      	movs	r2, #8
 8001d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f887 	bl	8001eae <HAL_TIM_IC_CaptureCallback>
 8001da0:	e005      	b.n	8001dae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f879 	bl	8001e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f88a 	bl	8001ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d10e      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d107      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0201 	mvn.w	r2, #1
 8001dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7fe fbf6 	bl	80005cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dea:	2b80      	cmp	r3, #128	; 0x80
 8001dec:	d10e      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df8:	2b80      	cmp	r3, #128	; 0x80
 8001dfa:	d107      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f914 	bl	8002034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e1a:	d10e      	bne.n	8001e3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e26:	2b80      	cmp	r3, #128	; 0x80
 8001e28:	d107      	bne.n	8001e3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f907 	bl	8002048 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e44:	2b40      	cmp	r3, #64	; 0x40
 8001e46:	d10e      	bne.n	8001e66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e52:	2b40      	cmp	r3, #64	; 0x40
 8001e54:	d107      	bne.n	8001e66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f838 	bl	8001ed6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	f003 0320 	and.w	r3, r3, #32
 8001e70:	2b20      	cmp	r3, #32
 8001e72:	d10e      	bne.n	8001e92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f003 0320 	and.w	r3, r3, #32
 8001e7e:	2b20      	cmp	r3, #32
 8001e80:	d107      	bne.n	8001e92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f06f 0220 	mvn.w	r2, #32
 8001e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f8c7 	bl	8002020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a40      	ldr	r2, [pc, #256]	; (8002000 <TIM_Base_SetConfig+0x114>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d013      	beq.n	8001f2c <TIM_Base_SetConfig+0x40>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0a:	d00f      	beq.n	8001f2c <TIM_Base_SetConfig+0x40>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a3d      	ldr	r2, [pc, #244]	; (8002004 <TIM_Base_SetConfig+0x118>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d00b      	beq.n	8001f2c <TIM_Base_SetConfig+0x40>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a3c      	ldr	r2, [pc, #240]	; (8002008 <TIM_Base_SetConfig+0x11c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d007      	beq.n	8001f2c <TIM_Base_SetConfig+0x40>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a3b      	ldr	r2, [pc, #236]	; (800200c <TIM_Base_SetConfig+0x120>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d003      	beq.n	8001f2c <TIM_Base_SetConfig+0x40>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a3a      	ldr	r2, [pc, #232]	; (8002010 <TIM_Base_SetConfig+0x124>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d108      	bne.n	8001f3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a2f      	ldr	r2, [pc, #188]	; (8002000 <TIM_Base_SetConfig+0x114>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d01f      	beq.n	8001f86 <TIM_Base_SetConfig+0x9a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f4c:	d01b      	beq.n	8001f86 <TIM_Base_SetConfig+0x9a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a2c      	ldr	r2, [pc, #176]	; (8002004 <TIM_Base_SetConfig+0x118>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d017      	beq.n	8001f86 <TIM_Base_SetConfig+0x9a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a2b      	ldr	r2, [pc, #172]	; (8002008 <TIM_Base_SetConfig+0x11c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d013      	beq.n	8001f86 <TIM_Base_SetConfig+0x9a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a2a      	ldr	r2, [pc, #168]	; (800200c <TIM_Base_SetConfig+0x120>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00f      	beq.n	8001f86 <TIM_Base_SetConfig+0x9a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a29      	ldr	r2, [pc, #164]	; (8002010 <TIM_Base_SetConfig+0x124>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00b      	beq.n	8001f86 <TIM_Base_SetConfig+0x9a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a28      	ldr	r2, [pc, #160]	; (8002014 <TIM_Base_SetConfig+0x128>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d007      	beq.n	8001f86 <TIM_Base_SetConfig+0x9a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a27      	ldr	r2, [pc, #156]	; (8002018 <TIM_Base_SetConfig+0x12c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d003      	beq.n	8001f86 <TIM_Base_SetConfig+0x9a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a26      	ldr	r2, [pc, #152]	; (800201c <TIM_Base_SetConfig+0x130>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d108      	bne.n	8001f98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a10      	ldr	r2, [pc, #64]	; (8002000 <TIM_Base_SetConfig+0x114>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d00f      	beq.n	8001fe4 <TIM_Base_SetConfig+0xf8>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a12      	ldr	r2, [pc, #72]	; (8002010 <TIM_Base_SetConfig+0x124>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d00b      	beq.n	8001fe4 <TIM_Base_SetConfig+0xf8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a11      	ldr	r2, [pc, #68]	; (8002014 <TIM_Base_SetConfig+0x128>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d007      	beq.n	8001fe4 <TIM_Base_SetConfig+0xf8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a10      	ldr	r2, [pc, #64]	; (8002018 <TIM_Base_SetConfig+0x12c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d003      	beq.n	8001fe4 <TIM_Base_SetConfig+0xf8>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a0f      	ldr	r2, [pc, #60]	; (800201c <TIM_Base_SetConfig+0x130>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d103      	bne.n	8001fec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	615a      	str	r2, [r3, #20]
}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40012c00 	.word	0x40012c00
 8002004:	40000400 	.word	0x40000400
 8002008:	40000800 	.word	0x40000800
 800200c:	40000c00 	.word	0x40000c00
 8002010:	40013400 	.word	0x40013400
 8002014:	40014000 	.word	0x40014000
 8002018:	40014400 	.word	0x40014400
 800201c:	40014800 	.word	0x40014800

08002020 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f103 0208 	add.w	r2, r3, #8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f04f 32ff 	mov.w	r2, #4294967295
 8002074:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f103 0208 	add.w	r2, r3, #8
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f103 0208 	add.w	r2, r3, #8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80020b6:	b480      	push	{r7}
 80020b8:	b085      	sub	sp, #20
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	601a      	str	r2, [r3, #0]
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80020fe:	b480      	push	{r7}
 8002100:	b085      	sub	sp, #20
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d103      	bne.n	800211e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	e00c      	b.n	8002138 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3308      	adds	r3, #8
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	e002      	b.n	800212c <vListInsert+0x2e>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	429a      	cmp	r2, r3
 8002136:	d2f6      	bcs.n	8002126 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	601a      	str	r2, [r3, #0]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6892      	ldr	r2, [r2, #8]
 8002186:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6852      	ldr	r2, [r2, #4]
 8002190:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	d103      	bne.n	80021a4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	1e5a      	subs	r2, r3, #1
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10a      	bne.n	80021ee <xQueueGenericReset+0x2a>
        __asm volatile
 80021d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021dc:	f383 8811 	msr	BASEPRI, r3
 80021e0:	f3bf 8f6f 	isb	sy
 80021e4:	f3bf 8f4f 	dsb	sy
 80021e8:	60bb      	str	r3, [r7, #8]
    }
 80021ea:	bf00      	nop
 80021ec:	e7fe      	b.n	80021ec <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80021ee:	f002 f8c9 	bl	8004384 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	68f9      	ldr	r1, [r7, #12]
 80021fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	441a      	add	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221e:	3b01      	subs	r3, #1
 8002220:	68f9      	ldr	r1, [r7, #12]
 8002222:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	441a      	add	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	22ff      	movs	r2, #255	; 0xff
 8002232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	22ff      	movs	r2, #255	; 0xff
 800223a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d114      	bne.n	800226e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01a      	beq.n	8002282 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	3310      	adds	r3, #16
 8002250:	4618      	mov	r0, r3
 8002252:	f001 f91f 	bl	8003494 <xTaskRemoveFromEventList>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d012      	beq.n	8002282 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <xQueueGenericReset+0xcc>)
 800225e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	f3bf 8f4f 	dsb	sy
 8002268:	f3bf 8f6f 	isb	sy
 800226c:	e009      	b.n	8002282 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	3310      	adds	r3, #16
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fef2 	bl	800205c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3324      	adds	r3, #36	; 0x24
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff feed 	bl	800205c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002282:	f002 f8af 	bl	80043e4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002286:	2301      	movs	r3, #1
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	e000ed04 	.word	0xe000ed04

08002294 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002294:	b580      	push	{r7, lr}
 8002296:	b08c      	sub	sp, #48	; 0x30
 8002298:	af02      	add	r7, sp, #8
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	4613      	mov	r3, r2
 80022a0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10a      	bne.n	80022be <xQueueGenericCreate+0x2a>
        __asm volatile
 80022a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ac:	f383 8811 	msr	BASEPRI, r3
 80022b0:	f3bf 8f6f 	isb	sy
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	61bb      	str	r3, [r7, #24]
    }
 80022ba:	bf00      	nop
 80022bc:	e7fe      	b.n	80022bc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d006      	beq.n	80022dc <xQueueGenericCreate+0x48>
 80022ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d101      	bne.n	80022e0 <xQueueGenericCreate+0x4c>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <xQueueGenericCreate+0x4e>
 80022e0:	2300      	movs	r3, #0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10a      	bne.n	80022fc <xQueueGenericCreate+0x68>
        __asm volatile
 80022e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ea:	f383 8811 	msr	BASEPRI, r3
 80022ee:	f3bf 8f6f 	isb	sy
 80022f2:	f3bf 8f4f 	dsb	sy
 80022f6:	617b      	str	r3, [r7, #20]
    }
 80022f8:	bf00      	nop
 80022fa:	e7fe      	b.n	80022fa <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002302:	d90a      	bls.n	800231a <xQueueGenericCreate+0x86>
        __asm volatile
 8002304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002308:	f383 8811 	msr	BASEPRI, r3
 800230c:	f3bf 8f6f 	isb	sy
 8002310:	f3bf 8f4f 	dsb	sy
 8002314:	613b      	str	r3, [r7, #16]
    }
 8002316:	bf00      	nop
 8002318:	e7fe      	b.n	8002318 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	3350      	adds	r3, #80	; 0x50
 800231e:	4618      	mov	r0, r3
 8002320:	f002 f954 	bl	80045cc <pvPortMalloc>
 8002324:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00d      	beq.n	8002348 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	3350      	adds	r3, #80	; 0x50
 8002334:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002336:	79fa      	ldrb	r2, [r7, #7]
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 f805 	bl	8002352 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002348:	6a3b      	ldr	r3, [r7, #32]
    }
 800234a:	4618      	mov	r0, r3
 800234c:	3728      	adds	r7, #40	; 0x28
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d103      	bne.n	800236e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	e002      	b.n	8002374 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002380:	2101      	movs	r1, #1
 8002382:	69b8      	ldr	r0, [r7, #24]
 8002384:	f7ff ff1e 	bl	80021c4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	68f9      	ldr	r1, [r7, #12]
 8002396:	2073      	movs	r0, #115	; 0x73
 8002398:	f003 fce6 	bl	8005d68 <SEGGER_SYSVIEW_RecordU32x3>
}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b090      	sub	sp, #64	; 0x40
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80023b2:	2300      	movs	r3, #0
 80023b4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80023ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10a      	bne.n	80023d6 <xQueueGenericSend+0x32>
        __asm volatile
 80023c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c4:	f383 8811 	msr	BASEPRI, r3
 80023c8:	f3bf 8f6f 	isb	sy
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80023d2:	bf00      	nop
 80023d4:	e7fe      	b.n	80023d4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d103      	bne.n	80023e4 <xQueueGenericSend+0x40>
 80023dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <xQueueGenericSend+0x44>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <xQueueGenericSend+0x46>
 80023e8:	2300      	movs	r3, #0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10a      	bne.n	8002404 <xQueueGenericSend+0x60>
        __asm volatile
 80023ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f2:	f383 8811 	msr	BASEPRI, r3
 80023f6:	f3bf 8f6f 	isb	sy
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002400:	bf00      	nop
 8002402:	e7fe      	b.n	8002402 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d103      	bne.n	8002412 <xQueueGenericSend+0x6e>
 800240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <xQueueGenericSend+0x72>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <xQueueGenericSend+0x74>
 8002416:	2300      	movs	r3, #0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <xQueueGenericSend+0x8e>
        __asm volatile
 800241c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002420:	f383 8811 	msr	BASEPRI, r3
 8002424:	f3bf 8f6f 	isb	sy
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	623b      	str	r3, [r7, #32]
    }
 800242e:	bf00      	nop
 8002430:	e7fe      	b.n	8002430 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002432:	f001 f9cf 	bl	80037d4 <xTaskGetSchedulerState>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d102      	bne.n	8002442 <xQueueGenericSend+0x9e>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <xQueueGenericSend+0xa2>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <xQueueGenericSend+0xa4>
 8002446:	2300      	movs	r3, #0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10a      	bne.n	8002462 <xQueueGenericSend+0xbe>
        __asm volatile
 800244c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002450:	f383 8811 	msr	BASEPRI, r3
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	61fb      	str	r3, [r7, #28]
    }
 800245e:	bf00      	nop
 8002460:	e7fe      	b.n	8002460 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002462:	f001 ff8f 	bl	8004384 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800246a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246e:	429a      	cmp	r2, r3
 8002470:	d302      	bcc.n	8002478 <xQueueGenericSend+0xd4>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d136      	bne.n	80024e6 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247a:	4618      	mov	r0, r3
 800247c:	f004 fa00 	bl	8006880 <SEGGER_SYSVIEW_ShrinkId>
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	460b      	mov	r3, r1
 800248a:	4601      	mov	r1, r0
 800248c:	205a      	movs	r0, #90	; 0x5a
 800248e:	f003 fce1 	bl	8005e54 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	68b9      	ldr	r1, [r7, #8]
 8002496:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002498:	f000 fa78 	bl	800298c <prvCopyDataToQueue>
 800249c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d010      	beq.n	80024c8 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a8:	3324      	adds	r3, #36	; 0x24
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fff2 	bl	8003494 <xTaskRemoveFromEventList>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d013      	beq.n	80024de <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80024b6:	4b4d      	ldr	r3, [pc, #308]	; (80025ec <xQueueGenericSend+0x248>)
 80024b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	f3bf 8f4f 	dsb	sy
 80024c2:	f3bf 8f6f 	isb	sy
 80024c6:	e00a      	b.n	80024de <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80024c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d007      	beq.n	80024de <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80024ce:	4b47      	ldr	r3, [pc, #284]	; (80025ec <xQueueGenericSend+0x248>)
 80024d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	f3bf 8f4f 	dsb	sy
 80024da:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80024de:	f001 ff81 	bl	80043e4 <vPortExitCritical>
                return pdPASS;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e07d      	b.n	80025e2 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d110      	bne.n	800250e <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80024ec:	f001 ff7a 	bl	80043e4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80024f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f2:	4618      	mov	r0, r3
 80024f4:	f004 f9c4 	bl	8006880 <SEGGER_SYSVIEW_ShrinkId>
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	460b      	mov	r3, r1
 8002502:	4601      	mov	r1, r0
 8002504:	205a      	movs	r0, #90	; 0x5a
 8002506:	f003 fca5 	bl	8005e54 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800250a:	2300      	movs	r3, #0
 800250c:	e069      	b.n	80025e2 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800250e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002510:	2b00      	cmp	r3, #0
 8002512:	d106      	bne.n	8002522 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4618      	mov	r0, r3
 800251a:	f001 f821 	bl	8003560 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800251e:	2301      	movs	r3, #1
 8002520:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002522:	f001 ff5f 	bl	80043e4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002526:	f000 fd6d 	bl	8003004 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800252a:	f001 ff2b 	bl	8004384 <vPortEnterCritical>
 800252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002534:	b25b      	sxtb	r3, r3
 8002536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253a:	d103      	bne.n	8002544 <xQueueGenericSend+0x1a0>
 800253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800254a:	b25b      	sxtb	r3, r3
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d103      	bne.n	800255a <xQueueGenericSend+0x1b6>
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800255a:	f001 ff43 	bl	80043e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800255e:	1d3a      	adds	r2, r7, #4
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f001 f810 	bl	800358c <xTaskCheckForTimeOut>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d124      	bne.n	80025bc <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002572:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002574:	f000 fb02 	bl	8002b7c <prvIsQueueFull>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d018      	beq.n	80025b0 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002580:	3310      	adds	r3, #16
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f000 ff32 	bl	80033f0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800258c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800258e:	f000 fa8d 	bl	8002aac <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002592:	f000 fd45 	bl	8003020 <xTaskResumeAll>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	f47f af62 	bne.w	8002462 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800259e:	4b13      	ldr	r3, [pc, #76]	; (80025ec <xQueueGenericSend+0x248>)
 80025a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	f3bf 8f4f 	dsb	sy
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	e758      	b.n	8002462 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80025b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025b2:	f000 fa7b 	bl	8002aac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025b6:	f000 fd33 	bl	8003020 <xTaskResumeAll>
 80025ba:	e752      	b.n	8002462 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80025bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025be:	f000 fa75 	bl	8002aac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025c2:	f000 fd2d 	bl	8003020 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80025c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c8:	4618      	mov	r0, r3
 80025ca:	f004 f959 	bl	8006880 <SEGGER_SYSVIEW_ShrinkId>
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	460b      	mov	r3, r1
 80025d8:	4601      	mov	r1, r0
 80025da:	205a      	movs	r0, #90	; 0x5a
 80025dc:	f003 fc3a 	bl	8005e54 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80025e0:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3738      	adds	r7, #56	; 0x38
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	e000ed04 	.word	0xe000ed04

080025f0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b090      	sub	sp, #64	; 0x40
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10a      	bne.n	800261e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800261a:	bf00      	nop
 800261c:	e7fe      	b.n	800261c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d103      	bne.n	800262c <xQueueGenericSendFromISR+0x3c>
 8002624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <xQueueGenericSendFromISR+0x40>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <xQueueGenericSendFromISR+0x42>
 8002630:	2300      	movs	r3, #0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10a      	bne.n	800264c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263a:	f383 8811 	msr	BASEPRI, r3
 800263e:	f3bf 8f6f 	isb	sy
 8002642:	f3bf 8f4f 	dsb	sy
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002648:	bf00      	nop
 800264a:	e7fe      	b.n	800264a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d103      	bne.n	800265a <xQueueGenericSendFromISR+0x6a>
 8002652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <xQueueGenericSendFromISR+0x6e>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <xQueueGenericSendFromISR+0x70>
 800265e:	2300      	movs	r3, #0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10a      	bne.n	800267a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002668:	f383 8811 	msr	BASEPRI, r3
 800266c:	f3bf 8f6f 	isb	sy
 8002670:	f3bf 8f4f 	dsb	sy
 8002674:	623b      	str	r3, [r7, #32]
    }
 8002676:	bf00      	nop
 8002678:	e7fe      	b.n	8002678 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800267a:	f001 ff67 	bl	800454c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800267e:	f3ef 8211 	mrs	r2, BASEPRI
 8002682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002686:	f383 8811 	msr	BASEPRI, r3
 800268a:	f3bf 8f6f 	isb	sy
 800268e:	f3bf 8f4f 	dsb	sy
 8002692:	61fa      	str	r2, [r7, #28]
 8002694:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002696:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002698:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d302      	bcc.n	80026ac <xQueueGenericSendFromISR+0xbc>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d148      	bne.n	800273e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80026ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80026bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026be:	4618      	mov	r0, r3
 80026c0:	f004 f8de 	bl	8006880 <SEGGER_SYSVIEW_ShrinkId>
 80026c4:	4601      	mov	r1, r0
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	461a      	mov	r2, r3
 80026ca:	2060      	movs	r0, #96	; 0x60
 80026cc:	f003 faf2 	bl	8005cb4 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026d6:	f000 f959 	bl	800298c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80026da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80026de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e2:	d112      	bne.n	800270a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d025      	beq.n	8002738 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ee:	3324      	adds	r3, #36	; 0x24
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fecf 	bl	8003494 <xTaskRemoveFromEventList>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d01d      	beq.n	8002738 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d01a      	beq.n	8002738 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	e016      	b.n	8002738 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800270a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800270e:	2b7f      	cmp	r3, #127	; 0x7f
 8002710:	d10a      	bne.n	8002728 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002716:	f383 8811 	msr	BASEPRI, r3
 800271a:	f3bf 8f6f 	isb	sy
 800271e:	f3bf 8f4f 	dsb	sy
 8002722:	617b      	str	r3, [r7, #20]
    }
 8002724:	bf00      	nop
 8002726:	e7fe      	b.n	8002726 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002728:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800272c:	3301      	adds	r3, #1
 800272e:	b2db      	uxtb	r3, r3
 8002730:	b25a      	sxtb	r2, r3
 8002732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002738:	2301      	movs	r3, #1
 800273a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800273c:	e00b      	b.n	8002756 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800273e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002740:	4618      	mov	r0, r3
 8002742:	f004 f89d 	bl	8006880 <SEGGER_SYSVIEW_ShrinkId>
 8002746:	4601      	mov	r1, r0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	461a      	mov	r2, r3
 800274c:	2060      	movs	r0, #96	; 0x60
 800274e:	f003 fab1 	bl	8005cb4 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002752:	2300      	movs	r3, #0
 8002754:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002758:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002760:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002764:	4618      	mov	r0, r3
 8002766:	3740      	adds	r7, #64	; 0x40
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b08f      	sub	sp, #60	; 0x3c
 8002770:	af02      	add	r7, sp, #8
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002778:	2300      	movs	r3, #0
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10a      	bne.n	800279c <xQueueReceive+0x30>
        __asm volatile
 8002786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278a:	f383 8811 	msr	BASEPRI, r3
 800278e:	f3bf 8f6f 	isb	sy
 8002792:	f3bf 8f4f 	dsb	sy
 8002796:	623b      	str	r3, [r7, #32]
    }
 8002798:	bf00      	nop
 800279a:	e7fe      	b.n	800279a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d103      	bne.n	80027aa <xQueueReceive+0x3e>
 80027a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <xQueueReceive+0x42>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <xQueueReceive+0x44>
 80027ae:	2300      	movs	r3, #0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10a      	bne.n	80027ca <xQueueReceive+0x5e>
        __asm volatile
 80027b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b8:	f383 8811 	msr	BASEPRI, r3
 80027bc:	f3bf 8f6f 	isb	sy
 80027c0:	f3bf 8f4f 	dsb	sy
 80027c4:	61fb      	str	r3, [r7, #28]
    }
 80027c6:	bf00      	nop
 80027c8:	e7fe      	b.n	80027c8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027ca:	f001 f803 	bl	80037d4 <xTaskGetSchedulerState>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d102      	bne.n	80027da <xQueueReceive+0x6e>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <xQueueReceive+0x72>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <xQueueReceive+0x74>
 80027de:	2300      	movs	r3, #0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10a      	bne.n	80027fa <xQueueReceive+0x8e>
        __asm volatile
 80027e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	61bb      	str	r3, [r7, #24]
    }
 80027f6:	bf00      	nop
 80027f8:	e7fe      	b.n	80027f8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80027fa:	f001 fdc3 	bl	8004384 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	2b00      	cmp	r3, #0
 8002808:	d02f      	beq.n	800286a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800280e:	f000 f927 	bl	8002a60 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	4618      	mov	r0, r3
 8002816:	f004 f833 	bl	8006880 <SEGGER_SYSVIEW_ShrinkId>
 800281a:	4604      	mov	r4, r0
 800281c:	2000      	movs	r0, #0
 800281e:	f004 f82f 	bl	8006880 <SEGGER_SYSVIEW_ShrinkId>
 8002822:	4602      	mov	r2, r0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2101      	movs	r1, #1
 8002828:	9100      	str	r1, [sp, #0]
 800282a:	4621      	mov	r1, r4
 800282c:	205c      	movs	r0, #92	; 0x5c
 800282e:	f003 fb11 	bl	8005e54 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	1e5a      	subs	r2, r3, #1
 8002836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002838:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00f      	beq.n	8002862 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	3310      	adds	r3, #16
 8002846:	4618      	mov	r0, r3
 8002848:	f000 fe24 	bl	8003494 <xTaskRemoveFromEventList>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d007      	beq.n	8002862 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002852:	4b4d      	ldr	r3, [pc, #308]	; (8002988 <xQueueReceive+0x21c>)
 8002854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	f3bf 8f4f 	dsb	sy
 800285e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002862:	f001 fdbf 	bl	80043e4 <vPortExitCritical>
                return pdPASS;
 8002866:	2301      	movs	r3, #1
 8002868:	e08a      	b.n	8002980 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d113      	bne.n	8002898 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002870:	f001 fdb8 	bl	80043e4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002876:	4618      	mov	r0, r3
 8002878:	f004 f802 	bl	8006880 <SEGGER_SYSVIEW_ShrinkId>
 800287c:	4604      	mov	r4, r0
 800287e:	2000      	movs	r0, #0
 8002880:	f003 fffe 	bl	8006880 <SEGGER_SYSVIEW_ShrinkId>
 8002884:	4602      	mov	r2, r0
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2101      	movs	r1, #1
 800288a:	9100      	str	r1, [sp, #0]
 800288c:	4621      	mov	r1, r4
 800288e:	205c      	movs	r0, #92	; 0x5c
 8002890:	f003 fae0 	bl	8005e54 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002894:	2300      	movs	r3, #0
 8002896:	e073      	b.n	8002980 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800289e:	f107 0310 	add.w	r3, r7, #16
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fe5c 	bl	8003560 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80028a8:	2301      	movs	r3, #1
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80028ac:	f001 fd9a 	bl	80043e4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80028b0:	f000 fba8 	bl	8003004 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80028b4:	f001 fd66 	bl	8004384 <vPortEnterCritical>
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028be:	b25b      	sxtb	r3, r3
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d103      	bne.n	80028ce <xQueueReceive+0x162>
 80028c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028d4:	b25b      	sxtb	r3, r3
 80028d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028da:	d103      	bne.n	80028e4 <xQueueReceive+0x178>
 80028dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028e4:	f001 fd7e 	bl	80043e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028e8:	1d3a      	adds	r2, r7, #4
 80028ea:	f107 0310 	add.w	r3, r7, #16
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 fe4b 	bl	800358c <xTaskCheckForTimeOut>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d124      	bne.n	8002946 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028fe:	f000 f927 	bl	8002b50 <prvIsQueueEmpty>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d018      	beq.n	800293a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290a:	3324      	adds	r3, #36	; 0x24
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	4611      	mov	r1, r2
 8002910:	4618      	mov	r0, r3
 8002912:	f000 fd6d 	bl	80033f0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002918:	f000 f8c8 	bl	8002aac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800291c:	f000 fb80 	bl	8003020 <xTaskResumeAll>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	f47f af69 	bne.w	80027fa <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002928:	4b17      	ldr	r3, [pc, #92]	; (8002988 <xQueueReceive+0x21c>)
 800292a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	e75f      	b.n	80027fa <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800293a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800293c:	f000 f8b6 	bl	8002aac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002940:	f000 fb6e 	bl	8003020 <xTaskResumeAll>
 8002944:	e759      	b.n	80027fa <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002948:	f000 f8b0 	bl	8002aac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800294c:	f000 fb68 	bl	8003020 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002952:	f000 f8fd 	bl	8002b50 <prvIsQueueEmpty>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	f43f af4e 	beq.w	80027fa <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002960:	4618      	mov	r0, r3
 8002962:	f003 ff8d 	bl	8006880 <SEGGER_SYSVIEW_ShrinkId>
 8002966:	4604      	mov	r4, r0
 8002968:	2000      	movs	r0, #0
 800296a:	f003 ff89 	bl	8006880 <SEGGER_SYSVIEW_ShrinkId>
 800296e:	4602      	mov	r2, r0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2101      	movs	r1, #1
 8002974:	9100      	str	r1, [sp, #0]
 8002976:	4621      	mov	r1, r4
 8002978:	205c      	movs	r0, #92	; 0x5c
 800297a:	f003 fa6b 	bl	8005e54 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800297e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002980:	4618      	mov	r0, r3
 8002982:	3734      	adds	r7, #52	; 0x34
 8002984:	46bd      	mov	sp, r7
 8002986:	bd90      	pop	{r4, r7, pc}
 8002988:	e000ed04 	.word	0xe000ed04

0800298c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10d      	bne.n	80029c6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d14d      	bne.n	8002a4e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 ff2a 	bl	8003810 <xTaskPriorityDisinherit>
 80029bc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	e043      	b.n	8002a4e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d119      	bne.n	8002a00 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6858      	ldr	r0, [r3, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	461a      	mov	r2, r3
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	f004 f8e2 	bl	8006ba0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	441a      	add	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d32b      	bcc.n	8002a4e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	e026      	b.n	8002a4e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	68d8      	ldr	r0, [r3, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	461a      	mov	r2, r3
 8002a0a:	68b9      	ldr	r1, [r7, #8]
 8002a0c:	f004 f8c8 	bl	8006ba0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	425b      	negs	r3, r3
 8002a1a:	441a      	add	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d207      	bcs.n	8002a3c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	425b      	negs	r3, r3
 8002a36:	441a      	add	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d105      	bne.n	8002a4e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002a56:	697b      	ldr	r3, [r7, #20]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d018      	beq.n	8002aa4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	441a      	add	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d303      	bcc.n	8002a94 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68d9      	ldr	r1, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	6838      	ldr	r0, [r7, #0]
 8002aa0:	f004 f87e 	bl	8006ba0 <memcpy>
    }
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002ab4:	f001 fc66 	bl	8004384 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002abe:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ac0:	e011      	b.n	8002ae6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d012      	beq.n	8002af0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3324      	adds	r3, #36	; 0x24
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 fce0 	bl	8003494 <xTaskRemoveFromEventList>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002ada:	f000 fdbd 	bl	8003658 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	dce9      	bgt.n	8002ac2 <prvUnlockQueue+0x16>
 8002aee:	e000      	b.n	8002af2 <prvUnlockQueue+0x46>
                        break;
 8002af0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	22ff      	movs	r2, #255	; 0xff
 8002af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002afa:	f001 fc73 	bl	80043e4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002afe:	f001 fc41 	bl	8004384 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b08:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b0a:	e011      	b.n	8002b30 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d012      	beq.n	8002b3a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3310      	adds	r3, #16
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 fcbb 	bl	8003494 <xTaskRemoveFromEventList>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002b24:	f000 fd98 	bl	8003658 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002b28:	7bbb      	ldrb	r3, [r7, #14]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	dce9      	bgt.n	8002b0c <prvUnlockQueue+0x60>
 8002b38:	e000      	b.n	8002b3c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002b3a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	22ff      	movs	r2, #255	; 0xff
 8002b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002b44:	f001 fc4e 	bl	80043e4 <vPortExitCritical>
}
 8002b48:	bf00      	nop
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b58:	f001 fc14 	bl	8004384 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d102      	bne.n	8002b6a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002b64:	2301      	movs	r3, #1
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	e001      	b.n	8002b6e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b6e:	f001 fc39 	bl	80043e4 <vPortExitCritical>

    return xReturn;
 8002b72:	68fb      	ldr	r3, [r7, #12]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b84:	f001 fbfe 	bl	8004384 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d102      	bne.n	8002b9a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002b94:	2301      	movs	r3, #1
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	e001      	b.n	8002b9e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b9e:	f001 fc21 	bl	80043e4 <vPortExitCritical>

    return xReturn;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	e01e      	b.n	8002bfa <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002bbc:	4a13      	ldr	r2, [pc, #76]	; (8002c0c <vQueueAddToRegistry+0x60>)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d115      	bne.n	8002bf4 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002bc8:	4910      	ldr	r1, [pc, #64]	; (8002c0c <vQueueAddToRegistry+0x60>)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002bd2:	4a0e      	ldr	r2, [pc, #56]	; (8002c0c <vQueueAddToRegistry+0x60>)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f003 fe4d 	bl	8006880 <SEGGER_SYSVIEW_ShrinkId>
 8002be6:	4601      	mov	r1, r0
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	2071      	movs	r0, #113	; 0x71
 8002bee:	f003 f861 	bl	8005cb4 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002bf2:	e006      	b.n	8002c02 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b07      	cmp	r3, #7
 8002bfe:	d9dd      	bls.n	8002bbc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002c00:	bf00      	nop
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200000e4 	.word	0x200000e4

08002c10 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002c20:	f001 fbb0 	bl	8004384 <vPortEnterCritical>
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c2a:	b25b      	sxtb	r3, r3
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d103      	bne.n	8002c3a <vQueueWaitForMessageRestricted+0x2a>
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c40:	b25b      	sxtb	r3, r3
 8002c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c46:	d103      	bne.n	8002c50 <vQueueWaitForMessageRestricted+0x40>
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c50:	f001 fbc8 	bl	80043e4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d106      	bne.n	8002c6a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	3324      	adds	r3, #36	; 0x24
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fbe7 	bl	8003438 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002c6a:	6978      	ldr	r0, [r7, #20]
 8002c6c:	f7ff ff1e 	bl	8002aac <prvUnlockQueue>
    }
 8002c70:	bf00      	nop
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08c      	sub	sp, #48	; 0x30
 8002c7c:	af04      	add	r7, sp, #16
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	603b      	str	r3, [r7, #0]
 8002c84:	4613      	mov	r3, r2
 8002c86:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f001 fc9d 	bl	80045cc <pvPortMalloc>
 8002c92:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00e      	beq.n	8002cb8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c9a:	2058      	movs	r0, #88	; 0x58
 8002c9c:	f001 fc96 	bl	80045cc <pvPortMalloc>
 8002ca0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	631a      	str	r2, [r3, #48]	; 0x30
 8002cae:	e005      	b.n	8002cbc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002cb0:	6978      	ldr	r0, [r7, #20]
 8002cb2:	f001 fd6b 	bl	800478c <vPortFree>
 8002cb6:	e001      	b.n	8002cbc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d013      	beq.n	8002cea <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cc2:	88fa      	ldrh	r2, [r7, #6]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	9303      	str	r3, [sp, #12]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	9302      	str	r3, [sp, #8]
 8002ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68b9      	ldr	r1, [r7, #8]
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f80e 	bl	8002cfa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002cde:	69f8      	ldr	r0, [r7, #28]
 8002ce0:	f000 f8a2 	bl	8002e28 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	61bb      	str	r3, [r7, #24]
 8002ce8:	e002      	b.n	8002cf0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295
 8002cee:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002cf0:	69bb      	ldr	r3, [r7, #24]
    }
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3720      	adds	r7, #32
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b088      	sub	sp, #32
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
 8002d06:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	461a      	mov	r2, r3
 8002d12:	21a5      	movs	r1, #165	; 0xa5
 8002d14:	f003 ff52 	bl	8006bbc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d22:	3b01      	subs	r3, #1
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	f023 0307 	bic.w	r3, r3, #7
 8002d30:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00a      	beq.n	8002d52 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	617b      	str	r3, [r7, #20]
    }
 8002d4e:	bf00      	nop
 8002d50:	e7fe      	b.n	8002d50 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01f      	beq.n	8002d98 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61fb      	str	r3, [r7, #28]
 8002d5c:	e012      	b.n	8002d84 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	4413      	add	r3, r2
 8002d64:	7819      	ldrb	r1, [r3, #0]
 8002d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3334      	adds	r3, #52	; 0x34
 8002d6e:	460a      	mov	r2, r1
 8002d70:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	4413      	add	r3, r2
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d006      	beq.n	8002d8c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3301      	adds	r3, #1
 8002d82:	61fb      	str	r3, [r7, #28]
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	2b09      	cmp	r3, #9
 8002d88:	d9e9      	bls.n	8002d5e <prvInitialiseNewTask+0x64>
 8002d8a:	e000      	b.n	8002d8e <prvInitialiseNewTask+0x94>
            {
                break;
 8002d8c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d96:	e003      	b.n	8002da0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d901      	bls.n	8002daa <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002da6:	2304      	movs	r3, #4
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dae:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002db4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	2200      	movs	r2, #0
 8002dba:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff f96b 	bl	800209c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	3318      	adds	r3, #24
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff f966 	bl	800209c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dd4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd8:	f1c3 0205 	rsb	r2, r3, #5
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	3350      	adds	r3, #80	; 0x50
 8002dea:	2204      	movs	r2, #4
 8002dec:	2100      	movs	r1, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	f003 fee4 	bl	8006bbc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	3354      	adds	r3, #84	; 0x54
 8002df8:	2201      	movs	r2, #1
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f003 fedd 	bl	8006bbc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	68f9      	ldr	r1, [r7, #12]
 8002e06:	69b8      	ldr	r0, [r7, #24]
 8002e08:	f001 f90c 	bl	8004024 <pxPortInitialiseStack>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e1c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e1e:	bf00      	nop
 8002e20:	3720      	adds	r7, #32
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002e28:	b5b0      	push	{r4, r5, r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002e30:	f001 faa8 	bl	8004384 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002e34:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <prvAddNewTaskToReadyList+0xfc>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	4a3a      	ldr	r2, [pc, #232]	; (8002f24 <prvAddNewTaskToReadyList+0xfc>)
 8002e3c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002e3e:	4b3a      	ldr	r3, [pc, #232]	; (8002f28 <prvAddNewTaskToReadyList+0x100>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002e46:	4a38      	ldr	r2, [pc, #224]	; (8002f28 <prvAddNewTaskToReadyList+0x100>)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e4c:	4b35      	ldr	r3, [pc, #212]	; (8002f24 <prvAddNewTaskToReadyList+0xfc>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d110      	bne.n	8002e76 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002e54:	f000 fc24 	bl	80036a0 <prvInitialiseTaskLists>
 8002e58:	e00d      	b.n	8002e76 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002e5a:	4b34      	ldr	r3, [pc, #208]	; (8002f2c <prvAddNewTaskToReadyList+0x104>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e62:	4b31      	ldr	r3, [pc, #196]	; (8002f28 <prvAddNewTaskToReadyList+0x100>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d802      	bhi.n	8002e76 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002e70:	4a2d      	ldr	r2, [pc, #180]	; (8002f28 <prvAddNewTaskToReadyList+0x100>)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002e76:	4b2e      	ldr	r3, [pc, #184]	; (8002f30 <prvAddNewTaskToReadyList+0x108>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	4a2c      	ldr	r2, [pc, #176]	; (8002f30 <prvAddNewTaskToReadyList+0x108>)
 8002e7e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e80:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <prvAddNewTaskToReadyList+0x108>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d016      	beq.n	8002ebc <prvAddNewTaskToReadyList+0x94>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f003 fbcf 	bl	8006634 <SEGGER_SYSVIEW_OnTaskCreate>
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	461d      	mov	r5, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	461c      	mov	r4, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	1ae3      	subs	r3, r4, r3
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	462b      	mov	r3, r5
 8002eb8:	f001 fe34 	bl	8004b24 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f003 fc3c 	bl	800673c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	2201      	movs	r2, #1
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <prvAddNewTaskToReadyList+0x10c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	4a18      	ldr	r2, [pc, #96]	; (8002f34 <prvAddNewTaskToReadyList+0x10c>)
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4a15      	ldr	r2, [pc, #84]	; (8002f38 <prvAddNewTaskToReadyList+0x110>)
 8002ee4:	441a      	add	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	4619      	mov	r1, r3
 8002eec:	4610      	mov	r0, r2
 8002eee:	f7ff f8e2 	bl	80020b6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002ef2:	f001 fa77 	bl	80043e4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002ef6:	4b0d      	ldr	r3, [pc, #52]	; (8002f2c <prvAddNewTaskToReadyList+0x104>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00e      	beq.n	8002f1c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <prvAddNewTaskToReadyList+0x100>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d207      	bcs.n	8002f1c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <prvAddNewTaskToReadyList+0x114>)
 8002f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f1c:	bf00      	nop
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bdb0      	pop	{r4, r5, r7, pc}
 8002f24:	200001fc 	.word	0x200001fc
 8002f28:	20000124 	.word	0x20000124
 8002f2c:	20000208 	.word	0x20000208
 8002f30:	20000218 	.word	0x20000218
 8002f34:	20000204 	.word	0x20000204
 8002f38:	20000128 	.word	0x20000128
 8002f3c:	e000ed04 	.word	0xe000ed04

08002f40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002f46:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <vTaskStartScheduler+0xa4>)
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f54:	4924      	ldr	r1, [pc, #144]	; (8002fe8 <vTaskStartScheduler+0xa8>)
 8002f56:	4825      	ldr	r0, [pc, #148]	; (8002fec <vTaskStartScheduler+0xac>)
 8002f58:	f7ff fe8e 	bl	8002c78 <xTaskCreate>
 8002f5c:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d102      	bne.n	8002f6a <vTaskStartScheduler+0x2a>
            {
                xReturn = xTimerCreateTimerTask();
 8002f64:	f000 fd4c 	bl	8003a00 <xTimerCreateTimerTask>
 8002f68:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d124      	bne.n	8002fba <vTaskStartScheduler+0x7a>
        __asm volatile
 8002f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	60bb      	str	r3, [r7, #8]
    }
 8002f82:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f84:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <vTaskStartScheduler+0xb0>)
 8002f86:	f04f 32ff 	mov.w	r2, #4294967295
 8002f8a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <vTaskStartScheduler+0xb4>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f92:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <vTaskStartScheduler+0xb8>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002f98:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <vTaskStartScheduler+0xbc>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <vTaskStartScheduler+0xa4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d102      	bne.n	8002faa <vTaskStartScheduler+0x6a>
 8002fa4:	f003 fb2a 	bl	80065fc <SEGGER_SYSVIEW_OnIdle>
 8002fa8:	e004      	b.n	8002fb4 <vTaskStartScheduler+0x74>
 8002faa:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <vTaskStartScheduler+0xbc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f003 fb82 	bl	80066b8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002fb4:	f001 f8c6 	bl	8004144 <xPortStartScheduler>
 8002fb8:	e00e      	b.n	8002fd8 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d10a      	bne.n	8002fd8 <vTaskStartScheduler+0x98>
        __asm volatile
 8002fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc6:	f383 8811 	msr	BASEPRI, r3
 8002fca:	f3bf 8f6f 	isb	sy
 8002fce:	f3bf 8f4f 	dsb	sy
 8002fd2:	607b      	str	r3, [r7, #4]
    }
 8002fd4:	bf00      	nop
 8002fd6:	e7fe      	b.n	8002fd6 <vTaskStartScheduler+0x96>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002fd8:	4b09      	ldr	r3, [pc, #36]	; (8003000 <vTaskStartScheduler+0xc0>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	bf00      	nop
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000220 	.word	0x20000220
 8002fe8:	08007524 	.word	0x08007524
 8002fec:	08003671 	.word	0x08003671
 8002ff0:	2000021c 	.word	0x2000021c
 8002ff4:	20000208 	.word	0x20000208
 8002ff8:	20000200 	.word	0x20000200
 8002ffc:	20000124 	.word	0x20000124
 8003000:	2000000c 	.word	0x2000000c

08003004 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <vTaskSuspendAll+0x18>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3301      	adds	r3, #1
 800300e:	4a03      	ldr	r2, [pc, #12]	; (800301c <vTaskSuspendAll+0x18>)
 8003010:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003012:	bf00      	nop
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	20000224 	.word	0x20000224

08003020 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800302a:	2300      	movs	r3, #0
 800302c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800302e:	4b43      	ldr	r3, [pc, #268]	; (800313c <xTaskResumeAll+0x11c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10a      	bne.n	800304c <xTaskResumeAll+0x2c>
        __asm volatile
 8003036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303a:	f383 8811 	msr	BASEPRI, r3
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f3bf 8f4f 	dsb	sy
 8003046:	603b      	str	r3, [r7, #0]
    }
 8003048:	bf00      	nop
 800304a:	e7fe      	b.n	800304a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800304c:	f001 f99a 	bl	8004384 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003050:	4b3a      	ldr	r3, [pc, #232]	; (800313c <xTaskResumeAll+0x11c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3b01      	subs	r3, #1
 8003056:	4a39      	ldr	r2, [pc, #228]	; (800313c <xTaskResumeAll+0x11c>)
 8003058:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800305a:	4b38      	ldr	r3, [pc, #224]	; (800313c <xTaskResumeAll+0x11c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d165      	bne.n	800312e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003062:	4b37      	ldr	r3, [pc, #220]	; (8003140 <xTaskResumeAll+0x120>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d061      	beq.n	800312e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800306a:	e032      	b.n	80030d2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800306c:	4b35      	ldr	r3, [pc, #212]	; (8003144 <xTaskResumeAll+0x124>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	3318      	adds	r3, #24
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff f879 	bl	8002170 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	3304      	adds	r3, #4
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff f874 	bl	8002170 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4618      	mov	r0, r3
 800308c:	f003 fb56 	bl	800673c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	2201      	movs	r2, #1
 8003096:	409a      	lsls	r2, r3
 8003098:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <xTaskResumeAll+0x128>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4313      	orrs	r3, r2
 800309e:	4a2a      	ldr	r2, [pc, #168]	; (8003148 <xTaskResumeAll+0x128>)
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4a27      	ldr	r2, [pc, #156]	; (800314c <xTaskResumeAll+0x12c>)
 80030b0:	441a      	add	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	3304      	adds	r3, #4
 80030b6:	4619      	mov	r1, r3
 80030b8:	4610      	mov	r0, r2
 80030ba:	f7fe fffc 	bl	80020b6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c2:	4b23      	ldr	r3, [pc, #140]	; (8003150 <xTaskResumeAll+0x130>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d302      	bcc.n	80030d2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80030cc:	4b21      	ldr	r3, [pc, #132]	; (8003154 <xTaskResumeAll+0x134>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030d2:	4b1c      	ldr	r3, [pc, #112]	; (8003144 <xTaskResumeAll+0x124>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1c8      	bne.n	800306c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80030e0:	f000 fb5c 	bl	800379c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030e4:	4b1c      	ldr	r3, [pc, #112]	; (8003158 <xTaskResumeAll+0x138>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d010      	beq.n	8003112 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80030f0:	f000 f858 	bl	80031a4 <xTaskIncrementTick>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80030fa:	4b16      	ldr	r3, [pc, #88]	; (8003154 <xTaskResumeAll+0x134>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3b01      	subs	r3, #1
 8003104:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f1      	bne.n	80030f0 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800310c:	4b12      	ldr	r3, [pc, #72]	; (8003158 <xTaskResumeAll+0x138>)
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <xTaskResumeAll+0x134>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800311a:	2301      	movs	r3, #1
 800311c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800311e:	4b0f      	ldr	r3, [pc, #60]	; (800315c <xTaskResumeAll+0x13c>)
 8003120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800312e:	f001 f959 	bl	80043e4 <vPortExitCritical>

    return xAlreadyYielded;
 8003132:	68bb      	ldr	r3, [r7, #8]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20000224 	.word	0x20000224
 8003140:	200001fc 	.word	0x200001fc
 8003144:	200001bc 	.word	0x200001bc
 8003148:	20000204 	.word	0x20000204
 800314c:	20000128 	.word	0x20000128
 8003150:	20000124 	.word	0x20000124
 8003154:	20000210 	.word	0x20000210
 8003158:	2000020c 	.word	0x2000020c
 800315c:	e000ed04 	.word	0xe000ed04

08003160 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <xTaskGetTickCount+0x1c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800316c:	687b      	ldr	r3, [r7, #4]
}
 800316e:	4618      	mov	r0, r3
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20000200 	.word	0x20000200

08003180 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003186:	f001 f9e1 	bl	800454c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800318a:	2300      	movs	r3, #0
 800318c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800318e:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <xTaskGetTickCountFromISR+0x20>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003194:	683b      	ldr	r3, [r7, #0]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000200 	.word	0x20000200

080031a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ae:	4b50      	ldr	r3, [pc, #320]	; (80032f0 <xTaskIncrementTick+0x14c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f040 8092 	bne.w	80032dc <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031b8:	4b4e      	ldr	r3, [pc, #312]	; (80032f4 <xTaskIncrementTick+0x150>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3301      	adds	r3, #1
 80031be:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80031c0:	4a4c      	ldr	r2, [pc, #304]	; (80032f4 <xTaskIncrementTick+0x150>)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d120      	bne.n	800320e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80031cc:	4b4a      	ldr	r3, [pc, #296]	; (80032f8 <xTaskIncrementTick+0x154>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <xTaskIncrementTick+0x48>
        __asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	603b      	str	r3, [r7, #0]
    }
 80031e8:	bf00      	nop
 80031ea:	e7fe      	b.n	80031ea <xTaskIncrementTick+0x46>
 80031ec:	4b42      	ldr	r3, [pc, #264]	; (80032f8 <xTaskIncrementTick+0x154>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	4b42      	ldr	r3, [pc, #264]	; (80032fc <xTaskIncrementTick+0x158>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a40      	ldr	r2, [pc, #256]	; (80032f8 <xTaskIncrementTick+0x154>)
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	4a40      	ldr	r2, [pc, #256]	; (80032fc <xTaskIncrementTick+0x158>)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4b3f      	ldr	r3, [pc, #252]	; (8003300 <xTaskIncrementTick+0x15c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3301      	adds	r3, #1
 8003206:	4a3e      	ldr	r2, [pc, #248]	; (8003300 <xTaskIncrementTick+0x15c>)
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	f000 fac7 	bl	800379c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800320e:	4b3d      	ldr	r3, [pc, #244]	; (8003304 <xTaskIncrementTick+0x160>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	429a      	cmp	r2, r3
 8003216:	d34c      	bcc.n	80032b2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003218:	4b37      	ldr	r3, [pc, #220]	; (80032f8 <xTaskIncrementTick+0x154>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d104      	bne.n	800322c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003222:	4b38      	ldr	r3, [pc, #224]	; (8003304 <xTaskIncrementTick+0x160>)
 8003224:	f04f 32ff 	mov.w	r2, #4294967295
 8003228:	601a      	str	r2, [r3, #0]
                    break;
 800322a:	e042      	b.n	80032b2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800322c:	4b32      	ldr	r3, [pc, #200]	; (80032f8 <xTaskIncrementTick+0x154>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	429a      	cmp	r2, r3
 8003242:	d203      	bcs.n	800324c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003244:	4a2f      	ldr	r2, [pc, #188]	; (8003304 <xTaskIncrementTick+0x160>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800324a:	e032      	b.n	80032b2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	3304      	adds	r3, #4
 8003250:	4618      	mov	r0, r3
 8003252:	f7fe ff8d 	bl	8002170 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	2b00      	cmp	r3, #0
 800325c:	d004      	beq.n	8003268 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	3318      	adds	r3, #24
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe ff84 	bl	8002170 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4618      	mov	r0, r3
 800326c:	f003 fa66 	bl	800673c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	2201      	movs	r2, #1
 8003276:	409a      	lsls	r2, r3
 8003278:	4b23      	ldr	r3, [pc, #140]	; (8003308 <xTaskIncrementTick+0x164>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4313      	orrs	r3, r2
 800327e:	4a22      	ldr	r2, [pc, #136]	; (8003308 <xTaskIncrementTick+0x164>)
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4a1f      	ldr	r2, [pc, #124]	; (800330c <xTaskIncrementTick+0x168>)
 8003290:	441a      	add	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	3304      	adds	r3, #4
 8003296:	4619      	mov	r1, r3
 8003298:	4610      	mov	r0, r2
 800329a:	f7fe ff0c 	bl	80020b6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a2:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <xTaskIncrementTick+0x16c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d3b5      	bcc.n	8003218 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80032ac:	2301      	movs	r3, #1
 80032ae:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032b0:	e7b2      	b.n	8003218 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032b2:	4b17      	ldr	r3, [pc, #92]	; (8003310 <xTaskIncrementTick+0x16c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b8:	4914      	ldr	r1, [pc, #80]	; (800330c <xTaskIncrementTick+0x168>)
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d901      	bls.n	80032ce <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80032ca:	2301      	movs	r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <xTaskIncrementTick+0x170>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80032d6:	2301      	movs	r3, #1
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	e004      	b.n	80032e6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80032dc:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <xTaskIncrementTick+0x174>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3301      	adds	r3, #1
 80032e2:	4a0d      	ldr	r2, [pc, #52]	; (8003318 <xTaskIncrementTick+0x174>)
 80032e4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80032e6:	697b      	ldr	r3, [r7, #20]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20000224 	.word	0x20000224
 80032f4:	20000200 	.word	0x20000200
 80032f8:	200001b4 	.word	0x200001b4
 80032fc:	200001b8 	.word	0x200001b8
 8003300:	20000214 	.word	0x20000214
 8003304:	2000021c 	.word	0x2000021c
 8003308:	20000204 	.word	0x20000204
 800330c:	20000128 	.word	0x20000128
 8003310:	20000124 	.word	0x20000124
 8003314:	20000210 	.word	0x20000210
 8003318:	2000020c 	.word	0x2000020c

0800331c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003322:	4b2d      	ldr	r3, [pc, #180]	; (80033d8 <vTaskSwitchContext+0xbc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800332a:	4b2c      	ldr	r3, [pc, #176]	; (80033dc <vTaskSwitchContext+0xc0>)
 800332c:	2201      	movs	r2, #1
 800332e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003330:	e04d      	b.n	80033ce <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003332:	4b2a      	ldr	r3, [pc, #168]	; (80033dc <vTaskSwitchContext+0xc0>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003338:	4b29      	ldr	r3, [pc, #164]	; (80033e0 <vTaskSwitchContext+0xc4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003346:	7afb      	ldrb	r3, [r7, #11]
 8003348:	f1c3 031f 	rsb	r3, r3, #31
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	4925      	ldr	r1, [pc, #148]	; (80033e4 <vTaskSwitchContext+0xc8>)
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003366:	f383 8811 	msr	BASEPRI, r3
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	607b      	str	r3, [r7, #4]
    }
 8003374:	bf00      	nop
 8003376:	e7fe      	b.n	8003376 <vTaskSwitchContext+0x5a>
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4a18      	ldr	r2, [pc, #96]	; (80033e4 <vTaskSwitchContext+0xc8>)
 8003384:	4413      	add	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	3308      	adds	r3, #8
 800339a:	429a      	cmp	r2, r3
 800339c:	d104      	bne.n	80033a8 <vTaskSwitchContext+0x8c>
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	605a      	str	r2, [r3, #4]
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	4a0e      	ldr	r2, [pc, #56]	; (80033e8 <vTaskSwitchContext+0xcc>)
 80033b0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <vTaskSwitchContext+0xcc>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <vTaskSwitchContext+0xd0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d102      	bne.n	80033c4 <vTaskSwitchContext+0xa8>
 80033be:	f003 f91d 	bl	80065fc <SEGGER_SYSVIEW_OnIdle>
}
 80033c2:	e004      	b.n	80033ce <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80033c4:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <vTaskSwitchContext+0xcc>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f003 f975 	bl	80066b8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80033ce:	bf00      	nop
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000224 	.word	0x20000224
 80033dc:	20000210 	.word	0x20000210
 80033e0:	20000204 	.word	0x20000204
 80033e4:	20000128 	.word	0x20000128
 80033e8:	20000124 	.word	0x20000124
 80033ec:	20000220 	.word	0x20000220

080033f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10a      	bne.n	8003416 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	60fb      	str	r3, [r7, #12]
    }
 8003412:	bf00      	nop
 8003414:	e7fe      	b.n	8003414 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003416:	4b07      	ldr	r3, [pc, #28]	; (8003434 <vTaskPlaceOnEventList+0x44>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3318      	adds	r3, #24
 800341c:	4619      	mov	r1, r3
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fe fe6d 	bl	80020fe <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003424:	2101      	movs	r1, #1
 8003426:	6838      	ldr	r0, [r7, #0]
 8003428:	f000 fa72 	bl	8003910 <prvAddCurrentTaskToDelayedList>
}
 800342c:	bf00      	nop
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20000124 	.word	0x20000124

08003438 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10a      	bne.n	8003460 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800344a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	617b      	str	r3, [r7, #20]
    }
 800345c:	bf00      	nop
 800345e:	e7fe      	b.n	800345e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003460:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <vTaskPlaceOnEventListRestricted+0x58>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	3318      	adds	r3, #24
 8003466:	4619      	mov	r1, r3
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f7fe fe24 	bl	80020b6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003474:	f04f 33ff 	mov.w	r3, #4294967295
 8003478:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800347a:	2024      	movs	r0, #36	; 0x24
 800347c:	f002 fbc0 	bl	8005c00 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	68b8      	ldr	r0, [r7, #8]
 8003484:	f000 fa44 	bl	8003910 <prvAddCurrentTaskToDelayedList>
    }
 8003488:	bf00      	nop
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20000124 	.word	0x20000124

08003494 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10a      	bne.n	80034c0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80034aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ae:	f383 8811 	msr	BASEPRI, r3
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	f3bf 8f4f 	dsb	sy
 80034ba:	60fb      	str	r3, [r7, #12]
    }
 80034bc:	bf00      	nop
 80034be:	e7fe      	b.n	80034be <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	3318      	adds	r3, #24
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fe fe53 	bl	8002170 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ca:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <xTaskRemoveFromEventList+0xb4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d120      	bne.n	8003514 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	3304      	adds	r3, #4
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fe4a 	bl	8002170 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4618      	mov	r0, r3
 80034e0:	f003 f92c 	bl	800673c <SEGGER_SYSVIEW_OnTaskStartReady>
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	2201      	movs	r2, #1
 80034ea:	409a      	lsls	r2, r3
 80034ec:	4b17      	ldr	r3, [pc, #92]	; (800354c <xTaskRemoveFromEventList+0xb8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	4a16      	ldr	r2, [pc, #88]	; (800354c <xTaskRemoveFromEventList+0xb8>)
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4a13      	ldr	r2, [pc, #76]	; (8003550 <xTaskRemoveFromEventList+0xbc>)
 8003504:	441a      	add	r2, r3
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	3304      	adds	r3, #4
 800350a:	4619      	mov	r1, r3
 800350c:	4610      	mov	r0, r2
 800350e:	f7fe fdd2 	bl	80020b6 <vListInsertEnd>
 8003512:	e005      	b.n	8003520 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	3318      	adds	r3, #24
 8003518:	4619      	mov	r1, r3
 800351a:	480e      	ldr	r0, [pc, #56]	; (8003554 <xTaskRemoveFromEventList+0xc0>)
 800351c:	f7fe fdcb 	bl	80020b6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <xTaskRemoveFromEventList+0xc4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	429a      	cmp	r2, r3
 800352c:	d905      	bls.n	800353a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800352e:	2301      	movs	r3, #1
 8003530:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003532:	4b0a      	ldr	r3, [pc, #40]	; (800355c <xTaskRemoveFromEventList+0xc8>)
 8003534:	2201      	movs	r2, #1
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	e001      	b.n	800353e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800353e:	697b      	ldr	r3, [r7, #20]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000224 	.word	0x20000224
 800354c:	20000204 	.word	0x20000204
 8003550:	20000128 	.word	0x20000128
 8003554:	200001bc 	.word	0x200001bc
 8003558:	20000124 	.word	0x20000124
 800355c:	20000210 	.word	0x20000210

08003560 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003568:	4b06      	ldr	r3, [pc, #24]	; (8003584 <vTaskInternalSetTimeOutState+0x24>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <vTaskInternalSetTimeOutState+0x28>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	605a      	str	r2, [r3, #4]
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	20000214 	.word	0x20000214
 8003588:	20000200 	.word	0x20000200

0800358c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10a      	bne.n	80035b2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800359c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	613b      	str	r3, [r7, #16]
    }
 80035ae:	bf00      	nop
 80035b0:	e7fe      	b.n	80035b0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10a      	bne.n	80035ce <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80035b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	60fb      	str	r3, [r7, #12]
    }
 80035ca:	bf00      	nop
 80035cc:	e7fe      	b.n	80035cc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80035ce:	f000 fed9 	bl	8004384 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80035d2:	4b1f      	ldr	r3, [pc, #124]	; (8003650 <xTaskCheckForTimeOut+0xc4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ea:	d102      	bne.n	80035f2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61fb      	str	r3, [r7, #28]
 80035f0:	e026      	b.n	8003640 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	4b17      	ldr	r3, [pc, #92]	; (8003654 <xTaskCheckForTimeOut+0xc8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d00a      	beq.n	8003614 <xTaskCheckForTimeOut+0x88>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	429a      	cmp	r2, r3
 8003606:	d305      	bcc.n	8003614 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003608:	2301      	movs	r3, #1
 800360a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	e015      	b.n	8003640 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	429a      	cmp	r2, r3
 800361c:	d20b      	bcs.n	8003636 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	1ad2      	subs	r2, r2, r3
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff ff98 	bl	8003560 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003630:	2300      	movs	r3, #0
 8003632:	61fb      	str	r3, [r7, #28]
 8003634:	e004      	b.n	8003640 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800363c:	2301      	movs	r3, #1
 800363e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003640:	f000 fed0 	bl	80043e4 <vPortExitCritical>

    return xReturn;
 8003644:	69fb      	ldr	r3, [r7, #28]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3720      	adds	r7, #32
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	20000200 	.word	0x20000200
 8003654:	20000214 	.word	0x20000214

08003658 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <vTaskMissedYield+0x14>)
 800365e:	2201      	movs	r2, #1
 8003660:	601a      	str	r2, [r3, #0]
}
 8003662:	bf00      	nop
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	20000210 	.word	0x20000210

08003670 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003678:	f000 f852 	bl	8003720 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800367c:	4b06      	ldr	r3, [pc, #24]	; (8003698 <prvIdleTask+0x28>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d9f9      	bls.n	8003678 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <prvIdleTask+0x2c>)
 8003686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003694:	e7f0      	b.n	8003678 <prvIdleTask+0x8>
 8003696:	bf00      	nop
 8003698:	20000128 	.word	0x20000128
 800369c:	e000ed04 	.word	0xe000ed04

080036a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036a6:	2300      	movs	r3, #0
 80036a8:	607b      	str	r3, [r7, #4]
 80036aa:	e00c      	b.n	80036c6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4a12      	ldr	r2, [pc, #72]	; (8003700 <prvInitialiseTaskLists+0x60>)
 80036b8:	4413      	add	r3, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe fcce 	bl	800205c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3301      	adds	r3, #1
 80036c4:	607b      	str	r3, [r7, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d9ef      	bls.n	80036ac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80036cc:	480d      	ldr	r0, [pc, #52]	; (8003704 <prvInitialiseTaskLists+0x64>)
 80036ce:	f7fe fcc5 	bl	800205c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80036d2:	480d      	ldr	r0, [pc, #52]	; (8003708 <prvInitialiseTaskLists+0x68>)
 80036d4:	f7fe fcc2 	bl	800205c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80036d8:	480c      	ldr	r0, [pc, #48]	; (800370c <prvInitialiseTaskLists+0x6c>)
 80036da:	f7fe fcbf 	bl	800205c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80036de:	480c      	ldr	r0, [pc, #48]	; (8003710 <prvInitialiseTaskLists+0x70>)
 80036e0:	f7fe fcbc 	bl	800205c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80036e4:	480b      	ldr	r0, [pc, #44]	; (8003714 <prvInitialiseTaskLists+0x74>)
 80036e6:	f7fe fcb9 	bl	800205c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80036ea:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <prvInitialiseTaskLists+0x78>)
 80036ec:	4a05      	ldr	r2, [pc, #20]	; (8003704 <prvInitialiseTaskLists+0x64>)
 80036ee:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036f0:	4b0a      	ldr	r3, [pc, #40]	; (800371c <prvInitialiseTaskLists+0x7c>)
 80036f2:	4a05      	ldr	r2, [pc, #20]	; (8003708 <prvInitialiseTaskLists+0x68>)
 80036f4:	601a      	str	r2, [r3, #0]
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20000128 	.word	0x20000128
 8003704:	2000018c 	.word	0x2000018c
 8003708:	200001a0 	.word	0x200001a0
 800370c:	200001bc 	.word	0x200001bc
 8003710:	200001d0 	.word	0x200001d0
 8003714:	200001e8 	.word	0x200001e8
 8003718:	200001b4 	.word	0x200001b4
 800371c:	200001b8 	.word	0x200001b8

08003720 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003726:	e019      	b.n	800375c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003728:	f000 fe2c 	bl	8004384 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800372c:	4b10      	ldr	r3, [pc, #64]	; (8003770 <prvCheckTasksWaitingTermination+0x50>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3304      	adds	r3, #4
 8003738:	4618      	mov	r0, r3
 800373a:	f7fe fd19 	bl	8002170 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800373e:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <prvCheckTasksWaitingTermination+0x54>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3b01      	subs	r3, #1
 8003744:	4a0b      	ldr	r2, [pc, #44]	; (8003774 <prvCheckTasksWaitingTermination+0x54>)
 8003746:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <prvCheckTasksWaitingTermination+0x58>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3b01      	subs	r3, #1
 800374e:	4a0a      	ldr	r2, [pc, #40]	; (8003778 <prvCheckTasksWaitingTermination+0x58>)
 8003750:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003752:	f000 fe47 	bl	80043e4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f810 	bl	800377c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800375c:	4b06      	ldr	r3, [pc, #24]	; (8003778 <prvCheckTasksWaitingTermination+0x58>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e1      	bne.n	8003728 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003764:	bf00      	nop
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	200001d0 	.word	0x200001d0
 8003774:	200001fc 	.word	0x200001fc
 8003778:	200001e4 	.word	0x200001e4

0800377c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	4618      	mov	r0, r3
 800378a:	f000 ffff 	bl	800478c <vPortFree>
                vPortFree( pxTCB );
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fffc 	bl	800478c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037a0:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <prvResetNextTaskUnblockTime+0x30>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d104      	bne.n	80037b4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80037aa:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <prvResetNextTaskUnblockTime+0x34>)
 80037ac:	f04f 32ff 	mov.w	r2, #4294967295
 80037b0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80037b2:	e005      	b.n	80037c0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037b4:	4b05      	ldr	r3, [pc, #20]	; (80037cc <prvResetNextTaskUnblockTime+0x30>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a04      	ldr	r2, [pc, #16]	; (80037d0 <prvResetNextTaskUnblockTime+0x34>)
 80037be:	6013      	str	r3, [r2, #0]
}
 80037c0:	bf00      	nop
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	200001b4 	.word	0x200001b4
 80037d0:	2000021c 	.word	0x2000021c

080037d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80037da:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <xTaskGetSchedulerState+0x34>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d102      	bne.n	80037e8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80037e2:	2301      	movs	r3, #1
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	e008      	b.n	80037fa <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037e8:	4b08      	ldr	r3, [pc, #32]	; (800380c <xTaskGetSchedulerState+0x38>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d102      	bne.n	80037f6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80037f0:	2302      	movs	r3, #2
 80037f2:	607b      	str	r3, [r7, #4]
 80037f4:	e001      	b.n	80037fa <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80037f6:	2300      	movs	r3, #0
 80037f8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80037fa:	687b      	ldr	r3, [r7, #4]
    }
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	20000208 	.word	0x20000208
 800380c:	20000224 	.word	0x20000224

08003810 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d068      	beq.n	80038f8 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003826:	4b37      	ldr	r3, [pc, #220]	; (8003904 <xTaskPriorityDisinherit+0xf4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	429a      	cmp	r2, r3
 800382e:	d00a      	beq.n	8003846 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	60fb      	str	r3, [r7, #12]
    }
 8003842:	bf00      	nop
 8003844:	e7fe      	b.n	8003844 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10a      	bne.n	8003864 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003852:	f383 8811 	msr	BASEPRI, r3
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	60bb      	str	r3, [r7, #8]
    }
 8003860:	bf00      	nop
 8003862:	e7fe      	b.n	8003862 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003868:	1e5a      	subs	r2, r3, #1
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003876:	429a      	cmp	r2, r3
 8003878:	d03e      	beq.n	80038f8 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387e:	2b00      	cmp	r3, #0
 8003880:	d13a      	bne.n	80038f8 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	3304      	adds	r3, #4
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe fc72 	bl	8002170 <uxListRemove>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10a      	bne.n	80038a8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	2201      	movs	r2, #1
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43da      	mvns	r2, r3
 800389e:	4b1a      	ldr	r3, [pc, #104]	; (8003908 <xTaskPriorityDisinherit+0xf8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4013      	ands	r3, r2
 80038a4:	4a18      	ldr	r2, [pc, #96]	; (8003908 <xTaskPriorityDisinherit+0xf8>)
 80038a6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4619      	mov	r1, r3
 80038ac:	204a      	movs	r0, #74	; 0x4a
 80038ae:	f002 f9c5 	bl	8005c3c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038be:	f1c3 0205 	rsb	r2, r3, #5
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	2201      	movs	r2, #1
 80038cc:	409a      	lsls	r2, r3
 80038ce:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <xTaskPriorityDisinherit+0xf8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	4a0c      	ldr	r2, [pc, #48]	; (8003908 <xTaskPriorityDisinherit+0xf8>)
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4a09      	ldr	r2, [pc, #36]	; (800390c <xTaskPriorityDisinherit+0xfc>)
 80038e6:	441a      	add	r2, r3
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	3304      	adds	r3, #4
 80038ec:	4619      	mov	r1, r3
 80038ee:	4610      	mov	r0, r2
 80038f0:	f7fe fbe1 	bl	80020b6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80038f4:	2301      	movs	r3, #1
 80038f6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80038f8:	697b      	ldr	r3, [r7, #20]
    }
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000124 	.word	0x20000124
 8003908:	20000204 	.word	0x20000204
 800390c:	20000128 	.word	0x20000128

08003910 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800391a:	4b32      	ldr	r3, [pc, #200]	; (80039e4 <prvAddCurrentTaskToDelayedList+0xd4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003920:	4b31      	ldr	r3, [pc, #196]	; (80039e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3304      	adds	r3, #4
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe fc22 	bl	8002170 <uxListRemove>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10b      	bne.n	800394a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003932:	4b2d      	ldr	r3, [pc, #180]	; (80039e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	2201      	movs	r2, #1
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43da      	mvns	r2, r3
 8003940:	4b2a      	ldr	r3, [pc, #168]	; (80039ec <prvAddCurrentTaskToDelayedList+0xdc>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4013      	ands	r3, r2
 8003946:	4a29      	ldr	r2, [pc, #164]	; (80039ec <prvAddCurrentTaskToDelayedList+0xdc>)
 8003948:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003950:	d110      	bne.n	8003974 <prvAddCurrentTaskToDelayedList+0x64>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00d      	beq.n	8003974 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003958:	4b23      	ldr	r3, [pc, #140]	; (80039e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	211b      	movs	r1, #27
 800395e:	4618      	mov	r0, r3
 8003960:	f002 ff2e 	bl	80067c0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003964:	4b20      	ldr	r3, [pc, #128]	; (80039e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3304      	adds	r3, #4
 800396a:	4619      	mov	r1, r3
 800396c:	4820      	ldr	r0, [pc, #128]	; (80039f0 <prvAddCurrentTaskToDelayedList+0xe0>)
 800396e:	f7fe fba2 	bl	80020b6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003972:	e032      	b.n	80039da <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4413      	add	r3, r2
 800397a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800397c:	4b1a      	ldr	r3, [pc, #104]	; (80039e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	429a      	cmp	r2, r3
 800398a:	d20f      	bcs.n	80039ac <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800398c:	4b16      	ldr	r3, [pc, #88]	; (80039e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2104      	movs	r1, #4
 8003992:	4618      	mov	r0, r3
 8003994:	f002 ff14 	bl	80067c0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003998:	4b16      	ldr	r3, [pc, #88]	; (80039f4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3304      	adds	r3, #4
 80039a2:	4619      	mov	r1, r3
 80039a4:	4610      	mov	r0, r2
 80039a6:	f7fe fbaa 	bl	80020fe <vListInsert>
}
 80039aa:	e016      	b.n	80039da <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80039ac:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2104      	movs	r1, #4
 80039b2:	4618      	mov	r0, r3
 80039b4:	f002 ff04 	bl	80067c0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039b8:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3304      	adds	r3, #4
 80039c2:	4619      	mov	r1, r3
 80039c4:	4610      	mov	r0, r2
 80039c6:	f7fe fb9a 	bl	80020fe <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80039ca:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <prvAddCurrentTaskToDelayedList+0xec>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d202      	bcs.n	80039da <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80039d4:	4a09      	ldr	r2, [pc, #36]	; (80039fc <prvAddCurrentTaskToDelayedList+0xec>)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	6013      	str	r3, [r2, #0]
}
 80039da:	bf00      	nop
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20000200 	.word	0x20000200
 80039e8:	20000124 	.word	0x20000124
 80039ec:	20000204 	.word	0x20000204
 80039f0:	200001e8 	.word	0x200001e8
 80039f4:	200001b8 	.word	0x200001b8
 80039f8:	200001b4 	.word	0x200001b4
 80039fc:	2000021c 	.word	0x2000021c

08003a00 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003a0a:	f000 fad5 	bl	8003fb8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003a0e:	4b11      	ldr	r3, [pc, #68]	; (8003a54 <xTimerCreateTimerTask+0x54>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003a16:	4b10      	ldr	r3, [pc, #64]	; (8003a58 <xTimerCreateTimerTask+0x58>)
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a24:	490d      	ldr	r1, [pc, #52]	; (8003a5c <xTimerCreateTimerTask+0x5c>)
 8003a26:	480e      	ldr	r0, [pc, #56]	; (8003a60 <xTimerCreateTimerTask+0x60>)
 8003a28:	f7ff f926 	bl	8002c78 <xTaskCreate>
 8003a2c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	603b      	str	r3, [r7, #0]
    }
 8003a46:	bf00      	nop
 8003a48:	e7fe      	b.n	8003a48 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003a4a:	687b      	ldr	r3, [r7, #4]
    }
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	20000258 	.word	0x20000258
 8003a58:	2000025c 	.word	0x2000025c
 8003a5c:	0800752c 	.word	0x0800752c
 8003a60:	08003b99 	.word	0x08003b99

08003a64 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08a      	sub	sp, #40	; 0x28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10a      	bne.n	8003a92 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	623b      	str	r3, [r7, #32]
    }
 8003a8e:	bf00      	nop
 8003a90:	e7fe      	b.n	8003a90 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003a92:	4b1a      	ldr	r3, [pc, #104]	; (8003afc <xTimerGenericCommand+0x98>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d02a      	beq.n	8003af0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b05      	cmp	r3, #5
 8003aaa:	dc18      	bgt.n	8003ade <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003aac:	f7ff fe92 	bl	80037d4 <xTaskGetSchedulerState>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d109      	bne.n	8003aca <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003ab6:	4b11      	ldr	r3, [pc, #68]	; (8003afc <xTimerGenericCommand+0x98>)
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	f107 0114 	add.w	r1, r7, #20
 8003abe:	2300      	movs	r3, #0
 8003ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ac2:	f7fe fc6f 	bl	80023a4 <xQueueGenericSend>
 8003ac6:	6278      	str	r0, [r7, #36]	; 0x24
 8003ac8:	e012      	b.n	8003af0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003aca:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <xTimerGenericCommand+0x98>)
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	f107 0114 	add.w	r1, r7, #20
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f7fe fc65 	bl	80023a4 <xQueueGenericSend>
 8003ada:	6278      	str	r0, [r7, #36]	; 0x24
 8003adc:	e008      	b.n	8003af0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ade:	4b07      	ldr	r3, [pc, #28]	; (8003afc <xTimerGenericCommand+0x98>)
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	f107 0114 	add.w	r1, r7, #20
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	f7fe fd81 	bl	80025f0 <xQueueGenericSendFromISR>
 8003aee:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003af2:	4618      	mov	r0, r3
 8003af4:	3728      	adds	r7, #40	; 0x28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000258 	.word	0x20000258

08003b00 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b0a:	4b22      	ldr	r3, [pc, #136]	; (8003b94 <prvProcessExpiredTimer+0x94>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	3304      	adds	r3, #4
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fe fb29 	bl	8002170 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d022      	beq.n	8003b72 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	699a      	ldr	r2, [r3, #24]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	18d1      	adds	r1, r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	6978      	ldr	r0, [r7, #20]
 8003b3a:	f000 f8d1 	bl	8003ce0 <prvInsertTimerInActiveList>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d01f      	beq.n	8003b84 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b44:	2300      	movs	r3, #0
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	6978      	ldr	r0, [r7, #20]
 8003b50:	f7ff ff88 	bl	8003a64 <xTimerGenericCommand>
 8003b54:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d113      	bne.n	8003b84 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	60fb      	str	r3, [r7, #12]
    }
 8003b6e:	bf00      	nop
 8003b70:	e7fe      	b.n	8003b70 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b78:	f023 0301 	bic.w	r3, r3, #1
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	6978      	ldr	r0, [r7, #20]
 8003b8a:	4798      	blx	r3
    }
 8003b8c:	bf00      	nop
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	20000250 	.word	0x20000250

08003b98 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ba0:	f107 0308 	add.w	r3, r7, #8
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 f857 	bl	8003c58 <prvGetNextExpireTime>
 8003baa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4619      	mov	r1, r3
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 f803 	bl	8003bbc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003bb6:	f000 f8d5 	bl	8003d64 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bba:	e7f1      	b.n	8003ba0 <prvTimerTask+0x8>

08003bbc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003bc6:	f7ff fa1d 	bl	8003004 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bca:	f107 0308 	add.w	r3, r7, #8
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 f866 	bl	8003ca0 <prvSampleTimeNow>
 8003bd4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d130      	bne.n	8003c3e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10a      	bne.n	8003bf8 <prvProcessTimerOrBlockTask+0x3c>
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d806      	bhi.n	8003bf8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003bea:	f7ff fa19 	bl	8003020 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003bee:	68f9      	ldr	r1, [r7, #12]
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff ff85 	bl	8003b00 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003bf6:	e024      	b.n	8003c42 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d008      	beq.n	8003c10 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003bfe:	4b13      	ldr	r3, [pc, #76]	; (8003c4c <prvProcessTimerOrBlockTask+0x90>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <prvProcessTimerOrBlockTask+0x50>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <prvProcessTimerOrBlockTask+0x52>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c10:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <prvProcessTimerOrBlockTask+0x94>)
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	f7fe fff7 	bl	8002c10 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003c22:	f7ff f9fd 	bl	8003020 <xTaskResumeAll>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10a      	bne.n	8003c42 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003c2c:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <prvProcessTimerOrBlockTask+0x98>)
 8003c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	f3bf 8f6f 	isb	sy
    }
 8003c3c:	e001      	b.n	8003c42 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003c3e:	f7ff f9ef 	bl	8003020 <xTaskResumeAll>
    }
 8003c42:	bf00      	nop
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20000254 	.word	0x20000254
 8003c50:	20000258 	.word	0x20000258
 8003c54:	e000ed04 	.word	0xe000ed04

08003c58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c60:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <prvGetNextExpireTime+0x44>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <prvGetNextExpireTime+0x16>
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	e000      	b.n	8003c70 <prvGetNextExpireTime+0x18>
 8003c6e:	2200      	movs	r2, #0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d105      	bne.n	8003c88 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c7c:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <prvGetNextExpireTime+0x44>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	e001      	b.n	8003c8c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
    }
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	20000250 	.word	0x20000250

08003ca0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003ca8:	f7ff fa5a 	bl	8003160 <xTaskGetTickCount>
 8003cac:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003cae:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <prvSampleTimeNow+0x3c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d205      	bcs.n	8003cc4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003cb8:	f000 f91a 	bl	8003ef0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	e002      	b.n	8003cca <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003cca:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <prvSampleTimeNow+0x3c>)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
    }
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20000260 	.word	0x20000260

08003ce0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d812      	bhi.n	8003d2c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	1ad2      	subs	r2, r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d302      	bcc.n	8003d1a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003d14:	2301      	movs	r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e01b      	b.n	8003d52 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d1a:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <prvInsertTimerInActiveList+0x7c>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3304      	adds	r3, #4
 8003d22:	4619      	mov	r1, r3
 8003d24:	4610      	mov	r0, r2
 8003d26:	f7fe f9ea 	bl	80020fe <vListInsert>
 8003d2a:	e012      	b.n	8003d52 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d206      	bcs.n	8003d42 <prvInsertTimerInActiveList+0x62>
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d302      	bcc.n	8003d42 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e007      	b.n	8003d52 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d42:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <prvInsertTimerInActiveList+0x80>)
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	f7fe f9d6 	bl	80020fe <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003d52:	697b      	ldr	r3, [r7, #20]
    }
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	20000254 	.word	0x20000254
 8003d60:	20000250 	.word	0x20000250

08003d64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08c      	sub	sp, #48	; 0x30
 8003d68:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d6a:	e0ae      	b.n	8003eca <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f2c0 80aa 	blt.w	8003ec8 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d004      	beq.n	8003d8a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	3304      	adds	r3, #4
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fe f9f3 	bl	8002170 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d8a:	1d3b      	adds	r3, r7, #4
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff ff87 	bl	8003ca0 <prvSampleTimeNow>
 8003d92:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b09      	cmp	r3, #9
 8003d98:	f200 8097 	bhi.w	8003eca <prvProcessReceivedCommands+0x166>
 8003d9c:	a201      	add	r2, pc, #4	; (adr r2, 8003da4 <prvProcessReceivedCommands+0x40>)
 8003d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da2:	bf00      	nop
 8003da4:	08003dcd 	.word	0x08003dcd
 8003da8:	08003dcd 	.word	0x08003dcd
 8003dac:	08003dcd 	.word	0x08003dcd
 8003db0:	08003e41 	.word	0x08003e41
 8003db4:	08003e55 	.word	0x08003e55
 8003db8:	08003e9f 	.word	0x08003e9f
 8003dbc:	08003dcd 	.word	0x08003dcd
 8003dc0:	08003dcd 	.word	0x08003dcd
 8003dc4:	08003e41 	.word	0x08003e41
 8003dc8:	08003e55 	.word	0x08003e55
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dd2:	f043 0301 	orr.w	r3, r3, #1
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	18d1      	adds	r1, r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a3a      	ldr	r2, [r7, #32]
 8003dea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dec:	f7ff ff78 	bl	8003ce0 <prvInsertTimerInActiveList>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d069      	beq.n	8003eca <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dfc:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d05e      	beq.n	8003eca <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	441a      	add	r2, r3
 8003e14:	2300      	movs	r3, #0
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e1e:	f7ff fe21 	bl	8003a64 <xTimerGenericCommand>
 8003e22:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d14f      	bne.n	8003eca <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	61bb      	str	r3, [r7, #24]
    }
 8003e3c:	bf00      	nop
 8003e3e:	e7fe      	b.n	8003e3e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e46:	f023 0301 	bic.w	r3, r3, #1
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003e52:	e03a      	b.n	8003eca <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10a      	bne.n	8003e8a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	617b      	str	r3, [r7, #20]
    }
 8003e86:	bf00      	nop
 8003e88:	e7fe      	b.n	8003e88 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	18d1      	adds	r1, r2, r3
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	6a3a      	ldr	r2, [r7, #32]
 8003e96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e98:	f7ff ff22 	bl	8003ce0 <prvInsertTimerInActiveList>
                        break;
 8003e9c:	e015      	b.n	8003eca <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d103      	bne.n	8003eb4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003eac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eae:	f000 fc6d 	bl	800478c <vPortFree>
 8003eb2:	e00a      	b.n	8003eca <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003ec6:	e000      	b.n	8003eca <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003ec8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003eca:	4b08      	ldr	r3, [pc, #32]	; (8003eec <prvProcessReceivedCommands+0x188>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f107 0108 	add.w	r1, r7, #8
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fe fc49 	bl	800276c <xQueueReceive>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f47f af45 	bne.w	8003d6c <prvProcessReceivedCommands+0x8>
        }
    }
 8003ee2:	bf00      	nop
 8003ee4:	bf00      	nop
 8003ee6:	3728      	adds	r7, #40	; 0x28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	20000258 	.word	0x20000258

08003ef0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ef6:	e048      	b.n	8003f8a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ef8:	4b2d      	ldr	r3, [pc, #180]	; (8003fb0 <prvSwitchTimerLists+0xc0>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f02:	4b2b      	ldr	r3, [pc, #172]	; (8003fb0 <prvSwitchTimerLists+0xc0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe f92d 	bl	8002170 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d02e      	beq.n	8003f8a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4413      	add	r3, r2
 8003f34:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d90e      	bls.n	8003f5c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f4a:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <prvSwitchTimerLists+0xc0>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3304      	adds	r3, #4
 8003f52:	4619      	mov	r1, r3
 8003f54:	4610      	mov	r0, r2
 8003f56:	f7fe f8d2 	bl	80020fe <vListInsert>
 8003f5a:	e016      	b.n	8003f8a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	2300      	movs	r3, #0
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	2100      	movs	r1, #0
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f7ff fd7c 	bl	8003a64 <xTimerGenericCommand>
 8003f6c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10a      	bne.n	8003f8a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	603b      	str	r3, [r7, #0]
    }
 8003f86:	bf00      	nop
 8003f88:	e7fe      	b.n	8003f88 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f8a:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <prvSwitchTimerLists+0xc0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1b1      	bne.n	8003ef8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003f94:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <prvSwitchTimerLists+0xc0>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <prvSwitchTimerLists+0xc4>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a04      	ldr	r2, [pc, #16]	; (8003fb0 <prvSwitchTimerLists+0xc0>)
 8003fa0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003fa2:	4a04      	ldr	r2, [pc, #16]	; (8003fb4 <prvSwitchTimerLists+0xc4>)
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	6013      	str	r3, [r2, #0]
    }
 8003fa8:	bf00      	nop
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20000250 	.word	0x20000250
 8003fb4:	20000254 	.word	0x20000254

08003fb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003fbc:	f000 f9e2 	bl	8004384 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003fc0:	4b12      	ldr	r3, [pc, #72]	; (800400c <prvCheckForValidListAndQueue+0x54>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d11d      	bne.n	8004004 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003fc8:	4811      	ldr	r0, [pc, #68]	; (8004010 <prvCheckForValidListAndQueue+0x58>)
 8003fca:	f7fe f847 	bl	800205c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003fce:	4811      	ldr	r0, [pc, #68]	; (8004014 <prvCheckForValidListAndQueue+0x5c>)
 8003fd0:	f7fe f844 	bl	800205c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003fd4:	4b10      	ldr	r3, [pc, #64]	; (8004018 <prvCheckForValidListAndQueue+0x60>)
 8003fd6:	4a0e      	ldr	r2, [pc, #56]	; (8004010 <prvCheckForValidListAndQueue+0x58>)
 8003fd8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003fda:	4b10      	ldr	r3, [pc, #64]	; (800401c <prvCheckForValidListAndQueue+0x64>)
 8003fdc:	4a0d      	ldr	r2, [pc, #52]	; (8004014 <prvCheckForValidListAndQueue+0x5c>)
 8003fde:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	210c      	movs	r1, #12
 8003fe4:	200a      	movs	r0, #10
 8003fe6:	f7fe f955 	bl	8002294 <xQueueGenericCreate>
 8003fea:	4603      	mov	r3, r0
 8003fec:	4a07      	ldr	r2, [pc, #28]	; (800400c <prvCheckForValidListAndQueue+0x54>)
 8003fee:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <prvCheckForValidListAndQueue+0x54>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003ff8:	4b04      	ldr	r3, [pc, #16]	; (800400c <prvCheckForValidListAndQueue+0x54>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4908      	ldr	r1, [pc, #32]	; (8004020 <prvCheckForValidListAndQueue+0x68>)
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fe fdd4 	bl	8002bac <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004004:	f000 f9ee 	bl	80043e4 <vPortExitCritical>
    }
 8004008:	bf00      	nop
 800400a:	bd80      	pop	{r7, pc}
 800400c:	20000258 	.word	0x20000258
 8004010:	20000228 	.word	0x20000228
 8004014:	2000023c 	.word	0x2000023c
 8004018:	20000250 	.word	0x20000250
 800401c:	20000254 	.word	0x20000254
 8004020:	08007534 	.word	0x08007534

08004024 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3b04      	subs	r3, #4
 8004034:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800403c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3b04      	subs	r3, #4
 8004042:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f023 0201 	bic.w	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3b04      	subs	r3, #4
 8004052:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004054:	4a0c      	ldr	r2, [pc, #48]	; (8004088 <pxPortInitialiseStack+0x64>)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3b14      	subs	r3, #20
 800405e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3b04      	subs	r3, #4
 800406a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f06f 0202 	mvn.w	r2, #2
 8004072:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3b20      	subs	r3, #32
 8004078:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800407a:	68fb      	ldr	r3, [r7, #12]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	0800408d 	.word	0x0800408d

0800408c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004092:	2300      	movs	r3, #0
 8004094:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004096:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <prvTaskExitError+0x54>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d00a      	beq.n	80040b6 <prvTaskExitError+0x2a>
        __asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	60fb      	str	r3, [r7, #12]
    }
 80040b2:	bf00      	nop
 80040b4:	e7fe      	b.n	80040b4 <prvTaskExitError+0x28>
        __asm volatile
 80040b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ba:	f383 8811 	msr	BASEPRI, r3
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	60bb      	str	r3, [r7, #8]
    }
 80040c8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80040ca:	bf00      	nop
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0fc      	beq.n	80040cc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80040d2:	bf00      	nop
 80040d4:	bf00      	nop
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	20000010 	.word	0x20000010
	...

080040f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80040f0:	4b07      	ldr	r3, [pc, #28]	; (8004110 <pxCurrentTCBConst2>)
 80040f2:	6819      	ldr	r1, [r3, #0]
 80040f4:	6808      	ldr	r0, [r1, #0]
 80040f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040fa:	f380 8809 	msr	PSP, r0
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f04f 0000 	mov.w	r0, #0
 8004106:	f380 8811 	msr	BASEPRI, r0
 800410a:	4770      	bx	lr
 800410c:	f3af 8000 	nop.w

08004110 <pxCurrentTCBConst2>:
 8004110:	20000124 	.word	0x20000124
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop

08004118 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004118:	4808      	ldr	r0, [pc, #32]	; (800413c <prvPortStartFirstTask+0x24>)
 800411a:	6800      	ldr	r0, [r0, #0]
 800411c:	6800      	ldr	r0, [r0, #0]
 800411e:	f380 8808 	msr	MSP, r0
 8004122:	f04f 0000 	mov.w	r0, #0
 8004126:	f380 8814 	msr	CONTROL, r0
 800412a:	b662      	cpsie	i
 800412c:	b661      	cpsie	f
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	df00      	svc	0
 8004138:	bf00      	nop
 800413a:	0000      	.short	0x0000
 800413c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004140:	bf00      	nop
 8004142:	bf00      	nop

08004144 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800414a:	4b46      	ldr	r3, [pc, #280]	; (8004264 <xPortStartScheduler+0x120>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a46      	ldr	r2, [pc, #280]	; (8004268 <xPortStartScheduler+0x124>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d10a      	bne.n	800416a <xPortStartScheduler+0x26>
        __asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	613b      	str	r3, [r7, #16]
    }
 8004166:	bf00      	nop
 8004168:	e7fe      	b.n	8004168 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800416a:	4b3e      	ldr	r3, [pc, #248]	; (8004264 <xPortStartScheduler+0x120>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a3f      	ldr	r2, [pc, #252]	; (800426c <xPortStartScheduler+0x128>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d10a      	bne.n	800418a <xPortStartScheduler+0x46>
        __asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	60fb      	str	r3, [r7, #12]
    }
 8004186:	bf00      	nop
 8004188:	e7fe      	b.n	8004188 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800418a:	4b39      	ldr	r3, [pc, #228]	; (8004270 <xPortStartScheduler+0x12c>)
 800418c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	b2db      	uxtb	r3, r3
 8004194:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	22ff      	movs	r2, #255	; 0xff
 800419a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	4b31      	ldr	r3, [pc, #196]	; (8004274 <xPortStartScheduler+0x130>)
 80041b0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041b2:	4b31      	ldr	r3, [pc, #196]	; (8004278 <xPortStartScheduler+0x134>)
 80041b4:	2207      	movs	r2, #7
 80041b6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041b8:	e009      	b.n	80041ce <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80041ba:	4b2f      	ldr	r3, [pc, #188]	; (8004278 <xPortStartScheduler+0x134>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3b01      	subs	r3, #1
 80041c0:	4a2d      	ldr	r2, [pc, #180]	; (8004278 <xPortStartScheduler+0x134>)
 80041c2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041ce:	78fb      	ldrb	r3, [r7, #3]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d6:	2b80      	cmp	r3, #128	; 0x80
 80041d8:	d0ef      	beq.n	80041ba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041da:	4b27      	ldr	r3, [pc, #156]	; (8004278 <xPortStartScheduler+0x134>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f1c3 0307 	rsb	r3, r3, #7
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d00a      	beq.n	80041fc <xPortStartScheduler+0xb8>
        __asm volatile
 80041e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	60bb      	str	r3, [r7, #8]
    }
 80041f8:	bf00      	nop
 80041fa:	e7fe      	b.n	80041fa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041fc:	4b1e      	ldr	r3, [pc, #120]	; (8004278 <xPortStartScheduler+0x134>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	021b      	lsls	r3, r3, #8
 8004202:	4a1d      	ldr	r2, [pc, #116]	; (8004278 <xPortStartScheduler+0x134>)
 8004204:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004206:	4b1c      	ldr	r3, [pc, #112]	; (8004278 <xPortStartScheduler+0x134>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800420e:	4a1a      	ldr	r2, [pc, #104]	; (8004278 <xPortStartScheduler+0x134>)
 8004210:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	b2da      	uxtb	r2, r3
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800421a:	4b18      	ldr	r3, [pc, #96]	; (800427c <xPortStartScheduler+0x138>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a17      	ldr	r2, [pc, #92]	; (800427c <xPortStartScheduler+0x138>)
 8004220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004224:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004226:	4b15      	ldr	r3, [pc, #84]	; (800427c <xPortStartScheduler+0x138>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a14      	ldr	r2, [pc, #80]	; (800427c <xPortStartScheduler+0x138>)
 800422c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004230:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004232:	f000 f963 	bl	80044fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004236:	4b12      	ldr	r3, [pc, #72]	; (8004280 <xPortStartScheduler+0x13c>)
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800423c:	f000 f97a 	bl	8004534 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004240:	4b10      	ldr	r3, [pc, #64]	; (8004284 <xPortStartScheduler+0x140>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a0f      	ldr	r2, [pc, #60]	; (8004284 <xPortStartScheduler+0x140>)
 8004246:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800424a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800424c:	f7ff ff64 	bl	8004118 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004250:	f7ff f864 	bl	800331c <vTaskSwitchContext>
    prvTaskExitError();
 8004254:	f7ff ff1a 	bl	800408c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	e000ed00 	.word	0xe000ed00
 8004268:	410fc271 	.word	0x410fc271
 800426c:	410fc270 	.word	0x410fc270
 8004270:	e000e400 	.word	0xe000e400
 8004274:	20000264 	.word	0x20000264
 8004278:	20000268 	.word	0x20000268
 800427c:	e000ed20 	.word	0xe000ed20
 8004280:	20000010 	.word	0x20000010
 8004284:	e000ef34 	.word	0xe000ef34

08004288 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800428e:	4b37      	ldr	r3, [pc, #220]	; (800436c <vInitPrioGroupValue+0xe4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a37      	ldr	r2, [pc, #220]	; (8004370 <vInitPrioGroupValue+0xe8>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d10a      	bne.n	80042ae <vInitPrioGroupValue+0x26>
        __asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	613b      	str	r3, [r7, #16]
    }
 80042aa:	bf00      	nop
 80042ac:	e7fe      	b.n	80042ac <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042ae:	4b2f      	ldr	r3, [pc, #188]	; (800436c <vInitPrioGroupValue+0xe4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a30      	ldr	r2, [pc, #192]	; (8004374 <vInitPrioGroupValue+0xec>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d10a      	bne.n	80042ce <vInitPrioGroupValue+0x46>
        __asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	60fb      	str	r3, [r7, #12]
    }
 80042ca:	bf00      	nop
 80042cc:	e7fe      	b.n	80042cc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042ce:	4b2a      	ldr	r3, [pc, #168]	; (8004378 <vInitPrioGroupValue+0xf0>)
 80042d0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	22ff      	movs	r2, #255	; 0xff
 80042de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	4b22      	ldr	r3, [pc, #136]	; (800437c <vInitPrioGroupValue+0xf4>)
 80042f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042f6:	4b22      	ldr	r3, [pc, #136]	; (8004380 <vInitPrioGroupValue+0xf8>)
 80042f8:	2207      	movs	r2, #7
 80042fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042fc:	e009      	b.n	8004312 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80042fe:	4b20      	ldr	r3, [pc, #128]	; (8004380 <vInitPrioGroupValue+0xf8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3b01      	subs	r3, #1
 8004304:	4a1e      	ldr	r2, [pc, #120]	; (8004380 <vInitPrioGroupValue+0xf8>)
 8004306:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	b2db      	uxtb	r3, r3
 8004310:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431a:	2b80      	cmp	r3, #128	; 0x80
 800431c:	d0ef      	beq.n	80042fe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800431e:	4b18      	ldr	r3, [pc, #96]	; (8004380 <vInitPrioGroupValue+0xf8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f1c3 0307 	rsb	r3, r3, #7
 8004326:	2b04      	cmp	r3, #4
 8004328:	d00a      	beq.n	8004340 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	60bb      	str	r3, [r7, #8]
    }
 800433c:	bf00      	nop
 800433e:	e7fe      	b.n	800433e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004340:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <vInitPrioGroupValue+0xf8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	4a0e      	ldr	r2, [pc, #56]	; (8004380 <vInitPrioGroupValue+0xf8>)
 8004348:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800434a:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <vInitPrioGroupValue+0xf8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004352:	4a0b      	ldr	r2, [pc, #44]	; (8004380 <vInitPrioGroupValue+0xf8>)
 8004354:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	b2da      	uxtb	r2, r3
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	e000ed00 	.word	0xe000ed00
 8004370:	410fc271 	.word	0x410fc271
 8004374:	410fc270 	.word	0x410fc270
 8004378:	e000e400 	.word	0xe000e400
 800437c:	20000264 	.word	0x20000264
 8004380:	20000268 	.word	0x20000268

08004384 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
        __asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	607b      	str	r3, [r7, #4]
    }
 800439c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800439e:	4b0f      	ldr	r3, [pc, #60]	; (80043dc <vPortEnterCritical+0x58>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3301      	adds	r3, #1
 80043a4:	4a0d      	ldr	r2, [pc, #52]	; (80043dc <vPortEnterCritical+0x58>)
 80043a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80043a8:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <vPortEnterCritical+0x58>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d10f      	bne.n	80043d0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <vPortEnterCritical+0x5c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <vPortEnterCritical+0x4c>
        __asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	603b      	str	r3, [r7, #0]
    }
 80043cc:	bf00      	nop
 80043ce:	e7fe      	b.n	80043ce <vPortEnterCritical+0x4a>
    }
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	20000010 	.word	0x20000010
 80043e0:	e000ed04 	.word	0xe000ed04

080043e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80043ea:	4b12      	ldr	r3, [pc, #72]	; (8004434 <vPortExitCritical+0x50>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <vPortExitCritical+0x24>
        __asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	607b      	str	r3, [r7, #4]
    }
 8004404:	bf00      	nop
 8004406:	e7fe      	b.n	8004406 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004408:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <vPortExitCritical+0x50>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3b01      	subs	r3, #1
 800440e:	4a09      	ldr	r2, [pc, #36]	; (8004434 <vPortExitCritical+0x50>)
 8004410:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004412:	4b08      	ldr	r3, [pc, #32]	; (8004434 <vPortExitCritical+0x50>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d105      	bne.n	8004426 <vPortExitCritical+0x42>
 800441a:	2300      	movs	r3, #0
 800441c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	f383 8811 	msr	BASEPRI, r3
    }
 8004424:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	20000010 	.word	0x20000010
	...

08004440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004440:	f3ef 8009 	mrs	r0, PSP
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <pxCurrentTCBConst>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	f01e 0f10 	tst.w	lr, #16
 8004450:	bf08      	it	eq
 8004452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800445a:	6010      	str	r0, [r2, #0]
 800445c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004464:	f380 8811 	msr	BASEPRI, r0
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f7fe ff54 	bl	800331c <vTaskSwitchContext>
 8004474:	f04f 0000 	mov.w	r0, #0
 8004478:	f380 8811 	msr	BASEPRI, r0
 800447c:	bc09      	pop	{r0, r3}
 800447e:	6819      	ldr	r1, [r3, #0]
 8004480:	6808      	ldr	r0, [r1, #0]
 8004482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004486:	f01e 0f10 	tst.w	lr, #16
 800448a:	bf08      	it	eq
 800448c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004490:	f380 8809 	msr	PSP, r0
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	f3af 8000 	nop.w

080044a0 <pxCurrentTCBConst>:
 80044a0:	20000124 	.word	0x20000124
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop

080044a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
        __asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	607b      	str	r3, [r7, #4]
    }
 80044c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80044c2:	f002 f821 	bl	8006508 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80044c6:	f7fe fe6d 	bl	80031a4 <xTaskIncrementTick>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d006      	beq.n	80044de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80044d0:	f002 f878 	bl	80065c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044d4:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <SysTick_Handler+0x50>)
 80044d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	e001      	b.n	80044e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80044de:	f002 f855 	bl	800658c <SEGGER_SYSVIEW_RecordExitISR>
 80044e2:	2300      	movs	r3, #0
 80044e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	f383 8811 	msr	BASEPRI, r3
    }
 80044ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	e000ed04 	.word	0xe000ed04

080044fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004500:	4b08      	ldr	r3, [pc, #32]	; (8004524 <vPortSetupTimerInterrupt+0x28>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004506:	4b08      	ldr	r3, [pc, #32]	; (8004528 <vPortSetupTimerInterrupt+0x2c>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800450c:	4b07      	ldr	r3, [pc, #28]	; (800452c <vPortSetupTimerInterrupt+0x30>)
 800450e:	4a08      	ldr	r2, [pc, #32]	; (8004530 <vPortSetupTimerInterrupt+0x34>)
 8004510:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004512:	4b04      	ldr	r3, [pc, #16]	; (8004524 <vPortSetupTimerInterrupt+0x28>)
 8004514:	2207      	movs	r2, #7
 8004516:	601a      	str	r2, [r3, #0]
}
 8004518:	bf00      	nop
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	e000e010 	.word	0xe000e010
 8004528:	e000e018 	.word	0xe000e018
 800452c:	e000e014 	.word	0xe000e014
 8004530:	0001387f 	.word	0x0001387f

08004534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004544 <vPortEnableVFP+0x10>
 8004538:	6801      	ldr	r1, [r0, #0]
 800453a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800453e:	6001      	str	r1, [r0, #0]
 8004540:	4770      	bx	lr
 8004542:	0000      	.short	0x0000
 8004544:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004548:	bf00      	nop
 800454a:	bf00      	nop

0800454c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004552:	f3ef 8305 	mrs	r3, IPSR
 8004556:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b0f      	cmp	r3, #15
 800455c:	d914      	bls.n	8004588 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800455e:	4a17      	ldr	r2, [pc, #92]	; (80045bc <vPortValidateInterruptPriority+0x70>)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004568:	4b15      	ldr	r3, [pc, #84]	; (80045c0 <vPortValidateInterruptPriority+0x74>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	7afa      	ldrb	r2, [r7, #11]
 800456e:	429a      	cmp	r2, r3
 8004570:	d20a      	bcs.n	8004588 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	607b      	str	r3, [r7, #4]
    }
 8004584:	bf00      	nop
 8004586:	e7fe      	b.n	8004586 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004588:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <vPortValidateInterruptPriority+0x78>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004590:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <vPortValidateInterruptPriority+0x7c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d90a      	bls.n	80045ae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	603b      	str	r3, [r7, #0]
    }
 80045aa:	bf00      	nop
 80045ac:	e7fe      	b.n	80045ac <vPortValidateInterruptPriority+0x60>
    }
 80045ae:	bf00      	nop
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	e000e3f0 	.word	0xe000e3f0
 80045c0:	20000264 	.word	0x20000264
 80045c4:	e000ed0c 	.word	0xe000ed0c
 80045c8:	20000268 	.word	0x20000268

080045cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08a      	sub	sp, #40	; 0x28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80045d4:	2300      	movs	r3, #0
 80045d6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80045d8:	f7fe fd14 	bl	8003004 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80045dc:	4b65      	ldr	r3, [pc, #404]	; (8004774 <pvPortMalloc+0x1a8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80045e4:	f000 f934 	bl	8004850 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045e8:	4b63      	ldr	r3, [pc, #396]	; (8004778 <pvPortMalloc+0x1ac>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f040 80a7 	bne.w	8004744 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d02d      	beq.n	8004658 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80045fc:	2208      	movs	r2, #8
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	429a      	cmp	r2, r3
 8004606:	d227      	bcs.n	8004658 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004608:	2208      	movs	r2, #8
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4413      	add	r3, r2
 800460e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	2b00      	cmp	r3, #0
 8004618:	d021      	beq.n	800465e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f023 0307 	bic.w	r3, r3, #7
 8004620:	3308      	adds	r3, #8
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	429a      	cmp	r2, r3
 8004626:	d214      	bcs.n	8004652 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f023 0307 	bic.w	r3, r3, #7
 800462e:	3308      	adds	r3, #8
 8004630:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	2b00      	cmp	r3, #0
 800463a:	d010      	beq.n	800465e <pvPortMalloc+0x92>
        __asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	617b      	str	r3, [r7, #20]
    }
 800464e:	bf00      	nop
 8004650:	e7fe      	b.n	8004650 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004652:	2300      	movs	r3, #0
 8004654:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004656:	e002      	b.n	800465e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	607b      	str	r3, [r7, #4]
 800465c:	e000      	b.n	8004660 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800465e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d06e      	beq.n	8004744 <pvPortMalloc+0x178>
 8004666:	4b45      	ldr	r3, [pc, #276]	; (800477c <pvPortMalloc+0x1b0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	429a      	cmp	r2, r3
 800466e:	d869      	bhi.n	8004744 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004670:	4b43      	ldr	r3, [pc, #268]	; (8004780 <pvPortMalloc+0x1b4>)
 8004672:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004674:	4b42      	ldr	r3, [pc, #264]	; (8004780 <pvPortMalloc+0x1b4>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800467a:	e004      	b.n	8004686 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	429a      	cmp	r2, r3
 800468e:	d903      	bls.n	8004698 <pvPortMalloc+0xcc>
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f1      	bne.n	800467c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004698:	4b36      	ldr	r3, [pc, #216]	; (8004774 <pvPortMalloc+0x1a8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469e:	429a      	cmp	r2, r3
 80046a0:	d050      	beq.n	8004744 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2208      	movs	r2, #8
 80046a8:	4413      	add	r3, r2
 80046aa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	1ad2      	subs	r2, r2, r3
 80046bc:	2308      	movs	r3, #8
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d91f      	bls.n	8004704 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4413      	add	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <pvPortMalloc+0x120>
        __asm volatile
 80046d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	613b      	str	r3, [r7, #16]
    }
 80046e8:	bf00      	nop
 80046ea:	e7fe      	b.n	80046ea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	1ad2      	subs	r2, r2, r3
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046fe:	69b8      	ldr	r0, [r7, #24]
 8004700:	f000 f908 	bl	8004914 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004704:	4b1d      	ldr	r3, [pc, #116]	; (800477c <pvPortMalloc+0x1b0>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	4a1b      	ldr	r2, [pc, #108]	; (800477c <pvPortMalloc+0x1b0>)
 8004710:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004712:	4b1a      	ldr	r3, [pc, #104]	; (800477c <pvPortMalloc+0x1b0>)
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4b1b      	ldr	r3, [pc, #108]	; (8004784 <pvPortMalloc+0x1b8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d203      	bcs.n	8004726 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800471e:	4b17      	ldr	r3, [pc, #92]	; (800477c <pvPortMalloc+0x1b0>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a18      	ldr	r2, [pc, #96]	; (8004784 <pvPortMalloc+0x1b8>)
 8004724:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	4b13      	ldr	r3, [pc, #76]	; (8004778 <pvPortMalloc+0x1ac>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	431a      	orrs	r2, r3
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800473a:	4b13      	ldr	r3, [pc, #76]	; (8004788 <pvPortMalloc+0x1bc>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3301      	adds	r3, #1
 8004740:	4a11      	ldr	r2, [pc, #68]	; (8004788 <pvPortMalloc+0x1bc>)
 8004742:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004744:	f7fe fc6c 	bl	8003020 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <pvPortMalloc+0x19c>
        __asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	60fb      	str	r3, [r7, #12]
    }
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <pvPortMalloc+0x19a>
    return pvReturn;
 8004768:	69fb      	ldr	r3, [r7, #28]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3728      	adds	r7, #40	; 0x28
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20012e74 	.word	0x20012e74
 8004778:	20012e88 	.word	0x20012e88
 800477c:	20012e78 	.word	0x20012e78
 8004780:	20012e6c 	.word	0x20012e6c
 8004784:	20012e7c 	.word	0x20012e7c
 8004788:	20012e80 	.word	0x20012e80

0800478c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d04d      	beq.n	800483a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800479e:	2308      	movs	r3, #8
 80047a0:	425b      	negs	r3, r3
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4413      	add	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	4b24      	ldr	r3, [pc, #144]	; (8004844 <vPortFree+0xb8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4013      	ands	r3, r2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10a      	bne.n	80047d0 <vPortFree+0x44>
        __asm volatile
 80047ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	60fb      	str	r3, [r7, #12]
    }
 80047cc:	bf00      	nop
 80047ce:	e7fe      	b.n	80047ce <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <vPortFree+0x62>
        __asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	60bb      	str	r3, [r7, #8]
    }
 80047ea:	bf00      	nop
 80047ec:	e7fe      	b.n	80047ec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	4b14      	ldr	r3, [pc, #80]	; (8004844 <vPortFree+0xb8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01e      	beq.n	800483a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d11a      	bne.n	800483a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <vPortFree+0xb8>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	43db      	mvns	r3, r3
 800480e:	401a      	ands	r2, r3
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004814:	f7fe fbf6 	bl	8003004 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <vPortFree+0xbc>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4413      	add	r3, r2
 8004822:	4a09      	ldr	r2, [pc, #36]	; (8004848 <vPortFree+0xbc>)
 8004824:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004826:	6938      	ldr	r0, [r7, #16]
 8004828:	f000 f874 	bl	8004914 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800482c:	4b07      	ldr	r3, [pc, #28]	; (800484c <vPortFree+0xc0>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3301      	adds	r3, #1
 8004832:	4a06      	ldr	r2, [pc, #24]	; (800484c <vPortFree+0xc0>)
 8004834:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004836:	f7fe fbf3 	bl	8003020 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800483a:	bf00      	nop
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20012e88 	.word	0x20012e88
 8004848:	20012e78 	.word	0x20012e78
 800484c:	20012e84 	.word	0x20012e84

08004850 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004856:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800485a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800485c:	4b27      	ldr	r3, [pc, #156]	; (80048fc <prvHeapInit+0xac>)
 800485e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00c      	beq.n	8004884 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	3307      	adds	r3, #7
 800486e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0307 	bic.w	r3, r3, #7
 8004876:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	4a1f      	ldr	r2, [pc, #124]	; (80048fc <prvHeapInit+0xac>)
 8004880:	4413      	add	r3, r2
 8004882:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004888:	4a1d      	ldr	r2, [pc, #116]	; (8004900 <prvHeapInit+0xb0>)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800488e:	4b1c      	ldr	r3, [pc, #112]	; (8004900 <prvHeapInit+0xb0>)
 8004890:	2200      	movs	r2, #0
 8004892:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	4413      	add	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800489c:	2208      	movs	r2, #8
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1a9b      	subs	r3, r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0307 	bic.w	r3, r3, #7
 80048aa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4a15      	ldr	r2, [pc, #84]	; (8004904 <prvHeapInit+0xb4>)
 80048b0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80048b2:	4b14      	ldr	r3, [pc, #80]	; (8004904 <prvHeapInit+0xb4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2200      	movs	r2, #0
 80048b8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80048ba:	4b12      	ldr	r3, [pc, #72]	; (8004904 <prvHeapInit+0xb4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	1ad2      	subs	r2, r2, r3
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048d0:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <prvHeapInit+0xb4>)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	4a0a      	ldr	r2, [pc, #40]	; (8004908 <prvHeapInit+0xb8>)
 80048de:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	4a09      	ldr	r2, [pc, #36]	; (800490c <prvHeapInit+0xbc>)
 80048e6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048e8:	4b09      	ldr	r3, [pc, #36]	; (8004910 <prvHeapInit+0xc0>)
 80048ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048ee:	601a      	str	r2, [r3, #0]
}
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	2000026c 	.word	0x2000026c
 8004900:	20012e6c 	.word	0x20012e6c
 8004904:	20012e74 	.word	0x20012e74
 8004908:	20012e7c 	.word	0x20012e7c
 800490c:	20012e78 	.word	0x20012e78
 8004910:	20012e88 	.word	0x20012e88

08004914 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800491c:	4b28      	ldr	r3, [pc, #160]	; (80049c0 <prvInsertBlockIntoFreeList+0xac>)
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	e002      	b.n	8004928 <prvInsertBlockIntoFreeList+0x14>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	429a      	cmp	r2, r3
 8004930:	d8f7      	bhi.n	8004922 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	4413      	add	r3, r2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	429a      	cmp	r2, r3
 8004942:	d108      	bne.n	8004956 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	441a      	add	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	441a      	add	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d118      	bne.n	800499c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	4b15      	ldr	r3, [pc, #84]	; (80049c4 <prvInsertBlockIntoFreeList+0xb0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d00d      	beq.n	8004992 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	441a      	add	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	e008      	b.n	80049a4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004992:	4b0c      	ldr	r3, [pc, #48]	; (80049c4 <prvInsertBlockIntoFreeList+0xb0>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	e003      	b.n	80049a4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d002      	beq.n	80049b2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80049b2:	bf00      	nop
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20012e6c 	.word	0x20012e6c
 80049c4:	20012e74 	.word	0x20012e74

080049c8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80049cc:	4803      	ldr	r0, [pc, #12]	; (80049dc <_cbSendSystemDesc+0x14>)
 80049ce:	f001 fd45 	bl	800645c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80049d2:	4803      	ldr	r0, [pc, #12]	; (80049e0 <_cbSendSystemDesc+0x18>)
 80049d4:	f001 fd42 	bl	800645c <SEGGER_SYSVIEW_SendSysDesc>
}
 80049d8:	bf00      	nop
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	0800753c 	.word	0x0800753c
 80049e0:	08007578 	.word	0x08007578

080049e4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80049e8:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <SEGGER_SYSVIEW_Conf+0x1c>)
 80049ea:	4a06      	ldr	r2, [pc, #24]	; (8004a04 <SEGGER_SYSVIEW_Conf+0x20>)
 80049ec:	4906      	ldr	r1, [pc, #24]	; (8004a08 <SEGGER_SYSVIEW_Conf+0x24>)
 80049ee:	4806      	ldr	r0, [pc, #24]	; (8004a08 <SEGGER_SYSVIEW_Conf+0x24>)
 80049f0:	f001 f8b2 	bl	8005b58 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80049f4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80049f8:	f001 f8f2 	bl	8005be0 <SEGGER_SYSVIEW_SetRAMBase>
}
 80049fc:	bf00      	nop
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	080049c9 	.word	0x080049c9
 8004a04:	08007648 	.word	0x08007648
 8004a08:	04c4b400 	.word	0x04c4b400

08004a0c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004a12:	2300      	movs	r3, #0
 8004a14:	607b      	str	r3, [r7, #4]
 8004a16:	e033      	b.n	8004a80 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004a18:	491e      	ldr	r1, [pc, #120]	; (8004a94 <_cbSendTaskList+0x88>)
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	491a      	ldr	r1, [pc, #104]	; (8004a94 <_cbSendTaskList+0x88>)
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	3304      	adds	r3, #4
 8004a38:	6819      	ldr	r1, [r3, #0]
 8004a3a:	4c16      	ldr	r4, [pc, #88]	; (8004a94 <_cbSendTaskList+0x88>)
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4423      	add	r3, r4
 8004a48:	3308      	adds	r3, #8
 8004a4a:	681c      	ldr	r4, [r3, #0]
 8004a4c:	4d11      	ldr	r5, [pc, #68]	; (8004a94 <_cbSendTaskList+0x88>)
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	442b      	add	r3, r5
 8004a5a:	330c      	adds	r3, #12
 8004a5c:	681d      	ldr	r5, [r3, #0]
 8004a5e:	4e0d      	ldr	r6, [pc, #52]	; (8004a94 <_cbSendTaskList+0x88>)
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4433      	add	r3, r6
 8004a6c:	3310      	adds	r3, #16
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	462b      	mov	r3, r5
 8004a74:	4622      	mov	r2, r4
 8004a76:	f000 f8bd 	bl	8004bf4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	607b      	str	r3, [r7, #4]
 8004a80:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <_cbSendTaskList+0x8c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d3c6      	bcc.n	8004a18 <_cbSendTaskList+0xc>
  }
}
 8004a8a:	bf00      	nop
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a94:	20012e8c 	.word	0x20012e8c
 8004a98:	20012f2c 	.word	0x20012f2c

08004a9c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004aa4:	f7fe fb6c 	bl	8003180 <xTaskGetTickCountFromISR>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2200      	movs	r2, #0
 8004aac:	469a      	mov	sl, r3
 8004aae:	4693      	mov	fp, r2
 8004ab0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004ab4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	f04f 0a00 	mov.w	sl, #0
 8004ac0:	f04f 0b00 	mov.w	fp, #0
 8004ac4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004ac8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004acc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004ad0:	4652      	mov	r2, sl
 8004ad2:	465b      	mov	r3, fp
 8004ad4:	1a14      	subs	r4, r2, r0
 8004ad6:	eb63 0501 	sbc.w	r5, r3, r1
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	00ab      	lsls	r3, r5, #2
 8004ae4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004ae8:	00a2      	lsls	r2, r4, #2
 8004aea:	4614      	mov	r4, r2
 8004aec:	461d      	mov	r5, r3
 8004aee:	eb14 0800 	adds.w	r8, r4, r0
 8004af2:	eb45 0901 	adc.w	r9, r5, r1
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b0a:	4690      	mov	r8, r2
 8004b0c:	4699      	mov	r9, r3
 8004b0e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004b12:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004b16:	4610      	mov	r0, r2
 8004b18:	4619      	mov	r1, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004b24 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004b32:	2205      	movs	r2, #5
 8004b34:	492b      	ldr	r1, [pc, #172]	; (8004be4 <SYSVIEW_AddTask+0xc0>)
 8004b36:	68b8      	ldr	r0, [r7, #8]
 8004b38:	f002 f822 	bl	8006b80 <memcmp>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d04b      	beq.n	8004bda <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004b42:	4b29      	ldr	r3, [pc, #164]	; (8004be8 <SYSVIEW_AddTask+0xc4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b07      	cmp	r3, #7
 8004b48:	d903      	bls.n	8004b52 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004b4a:	4828      	ldr	r0, [pc, #160]	; (8004bec <SYSVIEW_AddTask+0xc8>)
 8004b4c:	f001 ff98 	bl	8006a80 <SEGGER_SYSVIEW_Warn>
    return;
 8004b50:	e044      	b.n	8004bdc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004b52:	4b25      	ldr	r3, [pc, #148]	; (8004be8 <SYSVIEW_AddTask+0xc4>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4926      	ldr	r1, [pc, #152]	; (8004bf0 <SYSVIEW_AddTask+0xcc>)
 8004b58:	4613      	mov	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004b66:	4b20      	ldr	r3, [pc, #128]	; (8004be8 <SYSVIEW_AddTask+0xc4>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4921      	ldr	r1, [pc, #132]	; (8004bf0 <SYSVIEW_AddTask+0xcc>)
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	3304      	adds	r3, #4
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004b7c:	4b1a      	ldr	r3, [pc, #104]	; (8004be8 <SYSVIEW_AddTask+0xc4>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	491b      	ldr	r1, [pc, #108]	; (8004bf0 <SYSVIEW_AddTask+0xcc>)
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	440b      	add	r3, r1
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004b92:	4b15      	ldr	r3, [pc, #84]	; (8004be8 <SYSVIEW_AddTask+0xc4>)
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	4916      	ldr	r1, [pc, #88]	; (8004bf0 <SYSVIEW_AddTask+0xcc>)
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	330c      	adds	r3, #12
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004ba8:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <SYSVIEW_AddTask+0xc4>)
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	4910      	ldr	r1, [pc, #64]	; (8004bf0 <SYSVIEW_AddTask+0xcc>)
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	440b      	add	r3, r1
 8004bb8:	3310      	adds	r3, #16
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004bbe:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <SYSVIEW_AddTask+0xc4>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	4a08      	ldr	r2, [pc, #32]	; (8004be8 <SYSVIEW_AddTask+0xc4>)
 8004bc6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 f80e 	bl	8004bf4 <SYSVIEW_SendTaskInfo>
 8004bd8:	e000      	b.n	8004bdc <SYSVIEW_AddTask+0xb8>
    return;
 8004bda:	bf00      	nop

}
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	08007588 	.word	0x08007588
 8004be8:	20012f2c 	.word	0x20012f2c
 8004bec:	08007590 	.word	0x08007590
 8004bf0:	20012e8c 	.word	0x20012e8c

08004bf4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08a      	sub	sp, #40	; 0x28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004c02:	f107 0314 	add.w	r3, r7, #20
 8004c06:	2214      	movs	r2, #20
 8004c08:	2100      	movs	r1, #0
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f001 ffd6 	bl	8006bbc <memset>
  TaskInfo.TaskID     = TaskID;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004c24:	f107 0314 	add.w	r3, r7, #20
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f001 fb1f 	bl	800626c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004c2e:	bf00      	nop
 8004c30:	3728      	adds	r7, #40	; 0x28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004c3e:	4b24      	ldr	r3, [pc, #144]	; (8004cd0 <_DoInit+0x98>)
 8004c40:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2203      	movs	r2, #3
 8004c46:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2203      	movs	r2, #3
 8004c4c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a20      	ldr	r2, [pc, #128]	; (8004cd4 <_DoInit+0x9c>)
 8004c52:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a20      	ldr	r2, [pc, #128]	; (8004cd8 <_DoInit+0xa0>)
 8004c58:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c60:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a17      	ldr	r2, [pc, #92]	; (8004cd4 <_DoInit+0x9c>)
 8004c78:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a17      	ldr	r2, [pc, #92]	; (8004cdc <_DoInit+0xa4>)
 8004c7e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2210      	movs	r2, #16
 8004c84:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3307      	adds	r3, #7
 8004c9c:	4a10      	ldr	r2, [pc, #64]	; (8004ce0 <_DoInit+0xa8>)
 8004c9e:	6810      	ldr	r0, [r2, #0]
 8004ca0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004ca2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a0e      	ldr	r2, [pc, #56]	; (8004ce4 <_DoInit+0xac>)
 8004caa:	6810      	ldr	r0, [r2, #0]
 8004cac:	6018      	str	r0, [r3, #0]
 8004cae:	8891      	ldrh	r1, [r2, #4]
 8004cb0:	7992      	ldrb	r2, [r2, #6]
 8004cb2:	8099      	strh	r1, [r3, #4]
 8004cb4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004cb6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004cc0:	f3bf 8f5f 	dmb	sy
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	20012f30 	.word	0x20012f30
 8004cd4:	080075e0 	.word	0x080075e0
 8004cd8:	20012fd8 	.word	0x20012fd8
 8004cdc:	200133d8 	.word	0x200133d8
 8004ce0:	080075ec 	.word	0x080075ec
 8004ce4:	080075f0 	.word	0x080075f0

08004ce8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08c      	sub	sp, #48	; 0x30
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004cf4:	4b3e      	ldr	r3, [pc, #248]	; (8004df0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004cf6:	623b      	str	r3, [r7, #32]
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <SEGGER_RTT_ReadNoLock+0x1e>
 8004d02:	f7ff ff99 	bl	8004c38 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	4413      	add	r3, r2
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	3360      	adds	r3, #96	; 0x60
 8004d12:	4a37      	ldr	r2, [pc, #220]	; (8004df0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d14:	4413      	add	r3, r2
 8004d16:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d92b      	bls.n	8004d8c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4293      	cmp	r3, r2
 8004d44:	bf28      	it	cs
 8004d46:	4613      	movcs	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d50:	4413      	add	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	6939      	ldr	r1, [r7, #16]
 8004d58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d5a:	f001 ff21 	bl	8006ba0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	4413      	add	r3, r2
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d101      	bne.n	8004d8c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	bf28      	it	cs
 8004d9c:	4613      	movcs	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d019      	beq.n	8004dda <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	4413      	add	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	6939      	ldr	r1, [r7, #16]
 8004db4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004db6:	f001 fef3 	bl	8006ba0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004de4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3730      	adds	r7, #48	; 0x30
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20012f30 	.word	0x20012f30

08004df4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004e02:	4b3d      	ldr	r3, [pc, #244]	; (8004ef8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004e10:	f7ff ff12 	bl	8004c38 <_DoInit>
  SEGGER_RTT_LOCK();
 8004e14:	f3ef 8311 	mrs	r3, BASEPRI
 8004e18:	f04f 0120 	mov.w	r1, #32
 8004e1c:	f381 8811 	msr	BASEPRI, r1
 8004e20:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e22:	4b35      	ldr	r3, [pc, #212]	; (8004ef8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004e24:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004e2a:	6939      	ldr	r1, [r7, #16]
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	4613      	mov	r3, r2
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	4413      	add	r3, r2
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	440b      	add	r3, r1
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d008      	beq.n	8004e54 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	3301      	adds	r3, #1
 8004e46:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	69fa      	ldr	r2, [r7, #28]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	dbeb      	blt.n	8004e2a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004e52:	e000      	b.n	8004e56 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004e54:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	da3f      	bge.n	8004ee0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004e60:	6939      	ldr	r1, [r7, #16]
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	4613      	mov	r3, r2
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	4413      	add	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	440b      	add	r3, r1
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004e74:	6939      	ldr	r1, [r7, #16]
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	4413      	add	r3, r2
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	440b      	add	r3, r1
 8004e84:	3304      	adds	r3, #4
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004e8a:	6939      	ldr	r1, [r7, #16]
 8004e8c:	69fa      	ldr	r2, [r7, #28]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	4413      	add	r3, r2
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	440b      	add	r3, r1
 8004e98:	3320      	adds	r3, #32
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004e9e:	6939      	ldr	r1, [r7, #16]
 8004ea0:	69fa      	ldr	r2, [r7, #28]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	4413      	add	r3, r2
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	440b      	add	r3, r1
 8004eac:	3328      	adds	r3, #40	; 0x28
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004eb2:	6939      	ldr	r1, [r7, #16]
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	4413      	add	r3, r2
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	440b      	add	r3, r1
 8004ec0:	3324      	adds	r3, #36	; 0x24
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004ec6:	6939      	ldr	r1, [r7, #16]
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	4413      	add	r3, r2
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	440b      	add	r3, r1
 8004ed4:	332c      	adds	r3, #44	; 0x2c
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004eda:	f3bf 8f5f 	dmb	sy
 8004ede:	e002      	b.n	8004ee6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004eec:	69fb      	ldr	r3, [r7, #28]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3720      	adds	r7, #32
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20012f30 	.word	0x20012f30

08004efc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004f0a:	4b33      	ldr	r3, [pc, #204]	; (8004fd8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004f0c:	61bb      	str	r3, [r7, #24]
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004f18:	f7ff fe8e 	bl	8004c38 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f1c:	4b2e      	ldr	r3, [pc, #184]	; (8004fd8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004f1e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	461a      	mov	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d24d      	bcs.n	8004fc8 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004f2c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f30:	f04f 0120 	mov.w	r1, #32
 8004f34:	f381 8811 	msr	BASEPRI, r1
 8004f38:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d031      	beq.n	8004fa4 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004f40:	6979      	ldr	r1, [r7, #20]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4613      	mov	r3, r2
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	4413      	add	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	440b      	add	r3, r1
 8004f4e:	3360      	adds	r3, #96	; 0x60
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004f54:	6979      	ldr	r1, [r7, #20]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	4413      	add	r3, r2
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	440b      	add	r3, r1
 8004f62:	3364      	adds	r3, #100	; 0x64
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004f68:	6979      	ldr	r1, [r7, #20]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	4413      	add	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	440b      	add	r3, r1
 8004f76:	3368      	adds	r3, #104	; 0x68
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004f7c:	6979      	ldr	r1, [r7, #20]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	4613      	mov	r3, r2
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	4413      	add	r3, r2
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	440b      	add	r3, r1
 8004f8a:	3370      	adds	r3, #112	; 0x70
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004f90:	6979      	ldr	r1, [r7, #20]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4613      	mov	r3, r2
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	4413      	add	r3, r2
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	440b      	add	r3, r1
 8004f9e:	336c      	adds	r3, #108	; 0x6c
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004fa4:	6979      	ldr	r1, [r7, #20]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	4413      	add	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	440b      	add	r3, r1
 8004fb2:	3374      	adds	r3, #116	; 0x74
 8004fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fb6:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004fb8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61fb      	str	r3, [r7, #28]
 8004fc6:	e002      	b.n	8004fce <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fcc:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004fce:	69fb      	ldr	r3, [r7, #28]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3720      	adds	r7, #32
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	20012f30 	.word	0x20012f30

08004fdc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004fec:	e002      	b.n	8004ff4 <_EncodeStr+0x18>
    Len++;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1f6      	bne.n	8004fee <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	429a      	cmp	r2, r3
 8005006:	d901      	bls.n	800500c <_EncodeStr+0x30>
    Len = Limit;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	2bfe      	cmp	r3, #254	; 0xfe
 8005010:	d806      	bhi.n	8005020 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	60fa      	str	r2, [r7, #12]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	e011      	b.n	8005044 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	60fa      	str	r2, [r7, #12]
 8005026:	22ff      	movs	r2, #255	; 0xff
 8005028:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	60fa      	str	r2, [r7, #12]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	0a19      	lsrs	r1, r3, #8
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	60fa      	str	r2, [r7, #12]
 8005040:	b2ca      	uxtb	r2, r1
 8005042:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005044:	2300      	movs	r3, #0
 8005046:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005048:	e00a      	b.n	8005060 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	1c53      	adds	r3, r2, #1
 800504e:	60bb      	str	r3, [r7, #8]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	1c59      	adds	r1, r3, #1
 8005054:	60f9      	str	r1, [r7, #12]
 8005056:	7812      	ldrb	r2, [r2, #0]
 8005058:	701a      	strb	r2, [r3, #0]
    n++;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	3301      	adds	r3, #1
 800505e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	429a      	cmp	r2, r3
 8005066:	d3f0      	bcc.n	800504a <_EncodeStr+0x6e>
  }
  return pPayload;
 8005068:	68fb      	ldr	r3, [r7, #12]
}
 800506a:	4618      	mov	r0, r3
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3304      	adds	r3, #4
}
 8005082:	4618      	mov	r0, r3
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
	...

08005090 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005096:	4b36      	ldr	r3, [pc, #216]	; (8005170 <_HandleIncomingPacket+0xe0>)
 8005098:	7e1b      	ldrb	r3, [r3, #24]
 800509a:	4618      	mov	r0, r3
 800509c:	1cfb      	adds	r3, r7, #3
 800509e:	2201      	movs	r2, #1
 80050a0:	4619      	mov	r1, r3
 80050a2:	f7ff fe21 	bl	8004ce8 <SEGGER_RTT_ReadNoLock>
 80050a6:	4603      	mov	r3, r0
 80050a8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	dd54      	ble.n	800515a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80050b0:	78fb      	ldrb	r3, [r7, #3]
 80050b2:	2b80      	cmp	r3, #128	; 0x80
 80050b4:	d032      	beq.n	800511c <_HandleIncomingPacket+0x8c>
 80050b6:	2b80      	cmp	r3, #128	; 0x80
 80050b8:	dc42      	bgt.n	8005140 <_HandleIncomingPacket+0xb0>
 80050ba:	2b07      	cmp	r3, #7
 80050bc:	dc16      	bgt.n	80050ec <_HandleIncomingPacket+0x5c>
 80050be:	2b00      	cmp	r3, #0
 80050c0:	dd3e      	ble.n	8005140 <_HandleIncomingPacket+0xb0>
 80050c2:	3b01      	subs	r3, #1
 80050c4:	2b06      	cmp	r3, #6
 80050c6:	d83b      	bhi.n	8005140 <_HandleIncomingPacket+0xb0>
 80050c8:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <_HandleIncomingPacket+0x40>)
 80050ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ce:	bf00      	nop
 80050d0:	080050f3 	.word	0x080050f3
 80050d4:	080050f9 	.word	0x080050f9
 80050d8:	080050ff 	.word	0x080050ff
 80050dc:	08005105 	.word	0x08005105
 80050e0:	0800510b 	.word	0x0800510b
 80050e4:	08005111 	.word	0x08005111
 80050e8:	08005117 	.word	0x08005117
 80050ec:	2b7f      	cmp	r3, #127	; 0x7f
 80050ee:	d036      	beq.n	800515e <_HandleIncomingPacket+0xce>
 80050f0:	e026      	b.n	8005140 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80050f2:	f000 ff41 	bl	8005f78 <SEGGER_SYSVIEW_Start>
      break;
 80050f6:	e037      	b.n	8005168 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80050f8:	f000 fff8 	bl	80060ec <SEGGER_SYSVIEW_Stop>
      break;
 80050fc:	e034      	b.n	8005168 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80050fe:	f001 f9d1 	bl	80064a4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005102:	e031      	b.n	8005168 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005104:	f001 f996 	bl	8006434 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005108:	e02e      	b.n	8005168 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800510a:	f001 f815 	bl	8006138 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800510e:	e02b      	b.n	8005168 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005110:	f001 fc64 	bl	80069dc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005114:	e028      	b.n	8005168 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005116:	f001 fc43 	bl	80069a0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800511a:	e025      	b.n	8005168 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800511c:	4b14      	ldr	r3, [pc, #80]	; (8005170 <_HandleIncomingPacket+0xe0>)
 800511e:	7e1b      	ldrb	r3, [r3, #24]
 8005120:	4618      	mov	r0, r3
 8005122:	1cfb      	adds	r3, r7, #3
 8005124:	2201      	movs	r2, #1
 8005126:	4619      	mov	r1, r3
 8005128:	f7ff fdde 	bl	8004ce8 <SEGGER_RTT_ReadNoLock>
 800512c:	4603      	mov	r3, r0
 800512e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	dd15      	ble.n	8005162 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005136:	78fb      	ldrb	r3, [r7, #3]
 8005138:	4618      	mov	r0, r3
 800513a:	f001 fbb1 	bl	80068a0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800513e:	e010      	b.n	8005162 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005140:	78fb      	ldrb	r3, [r7, #3]
 8005142:	b25b      	sxtb	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	da0e      	bge.n	8005166 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005148:	4b09      	ldr	r3, [pc, #36]	; (8005170 <_HandleIncomingPacket+0xe0>)
 800514a:	7e1b      	ldrb	r3, [r3, #24]
 800514c:	4618      	mov	r0, r3
 800514e:	1cfb      	adds	r3, r7, #3
 8005150:	2201      	movs	r2, #1
 8005152:	4619      	mov	r1, r3
 8005154:	f7ff fdc8 	bl	8004ce8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005158:	e005      	b.n	8005166 <_HandleIncomingPacket+0xd6>
    }
  }
 800515a:	bf00      	nop
 800515c:	e004      	b.n	8005168 <_HandleIncomingPacket+0xd8>
      break;
 800515e:	bf00      	nop
 8005160:	e002      	b.n	8005168 <_HandleIncomingPacket+0xd8>
      break;
 8005162:	bf00      	nop
 8005164:	e000      	b.n	8005168 <_HandleIncomingPacket+0xd8>
      break;
 8005166:	bf00      	nop
}
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	200143f0 	.word	0x200143f0

08005174 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005174:	b580      	push	{r7, lr}
 8005176:	b08c      	sub	sp, #48	; 0x30
 8005178:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800517a:	2301      	movs	r3, #1
 800517c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800517e:	1d3b      	adds	r3, r7, #4
 8005180:	3301      	adds	r3, #1
 8005182:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005188:	4b31      	ldr	r3, [pc, #196]	; (8005250 <_TrySendOverflowPacket+0xdc>)
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	62bb      	str	r3, [r7, #40]	; 0x28
 800518e:	e00b      	b.n	80051a8 <_TrySendOverflowPacket+0x34>
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	b2da      	uxtb	r2, r3
 8005194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005196:	1c59      	adds	r1, r3, #1
 8005198:	62f9      	str	r1, [r7, #44]	; 0x2c
 800519a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a4:	09db      	lsrs	r3, r3, #7
 80051a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051aa:	2b7f      	cmp	r3, #127	; 0x7f
 80051ac:	d8f0      	bhi.n	8005190 <_TrySendOverflowPacket+0x1c>
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051bc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80051be:	4b25      	ldr	r3, [pc, #148]	; (8005254 <_TrySendOverflowPacket+0xe0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80051c4:	4b22      	ldr	r3, [pc, #136]	; (8005250 <_TrySendOverflowPacket+0xdc>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	623b      	str	r3, [r7, #32]
 80051d6:	e00b      	b.n	80051f0 <_TrySendOverflowPacket+0x7c>
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	1c59      	adds	r1, r3, #1
 80051e0:	6279      	str	r1, [r7, #36]	; 0x24
 80051e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	09db      	lsrs	r3, r3, #7
 80051ee:	623b      	str	r3, [r7, #32]
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	2b7f      	cmp	r3, #127	; 0x7f
 80051f4:	d8f0      	bhi.n	80051d8 <_TrySendOverflowPacket+0x64>
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	627a      	str	r2, [r7, #36]	; 0x24
 80051fc:	6a3a      	ldr	r2, [r7, #32]
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005206:	4b12      	ldr	r3, [pc, #72]	; (8005250 <_TrySendOverflowPacket+0xdc>)
 8005208:	785b      	ldrb	r3, [r3, #1]
 800520a:	4618      	mov	r0, r3
 800520c:	1d3b      	adds	r3, r7, #4
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	461a      	mov	r2, r3
 8005214:	1d3b      	adds	r3, r7, #4
 8005216:	4619      	mov	r1, r3
 8005218:	f7fa ffda 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800521c:	4603      	mov	r3, r0
 800521e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005226:	4a0a      	ldr	r2, [pc, #40]	; (8005250 <_TrySendOverflowPacket+0xdc>)
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800522c:	4b08      	ldr	r3, [pc, #32]	; (8005250 <_TrySendOverflowPacket+0xdc>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	3b01      	subs	r3, #1
 8005232:	b2da      	uxtb	r2, r3
 8005234:	4b06      	ldr	r3, [pc, #24]	; (8005250 <_TrySendOverflowPacket+0xdc>)
 8005236:	701a      	strb	r2, [r3, #0]
 8005238:	e004      	b.n	8005244 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800523a:	4b05      	ldr	r3, [pc, #20]	; (8005250 <_TrySendOverflowPacket+0xdc>)
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	3301      	adds	r3, #1
 8005240:	4a03      	ldr	r2, [pc, #12]	; (8005250 <_TrySendOverflowPacket+0xdc>)
 8005242:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005244:	693b      	ldr	r3, [r7, #16]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3730      	adds	r7, #48	; 0x30
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	200143f0 	.word	0x200143f0
 8005254:	e0001004 	.word	0xe0001004

08005258 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b08a      	sub	sp, #40	; 0x28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005264:	4b6c      	ldr	r3, [pc, #432]	; (8005418 <_SendPacket+0x1c0>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d010      	beq.n	800528e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800526c:	4b6a      	ldr	r3, [pc, #424]	; (8005418 <_SendPacket+0x1c0>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 80a3 	beq.w	80053bc <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005276:	4b68      	ldr	r3, [pc, #416]	; (8005418 <_SendPacket+0x1c0>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d109      	bne.n	8005292 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800527e:	f7ff ff79 	bl	8005174 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005282:	4b65      	ldr	r3, [pc, #404]	; (8005418 <_SendPacket+0x1c0>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b01      	cmp	r3, #1
 8005288:	f040 809a 	bne.w	80053c0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800528c:	e001      	b.n	8005292 <_SendPacket+0x3a>
    goto Send;
 800528e:	bf00      	nop
 8005290:	e000      	b.n	8005294 <_SendPacket+0x3c>
Send:
 8005292:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b1f      	cmp	r3, #31
 8005298:	d809      	bhi.n	80052ae <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800529a:	4b5f      	ldr	r3, [pc, #380]	; (8005418 <_SendPacket+0x1c0>)
 800529c:	69da      	ldr	r2, [r3, #28]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	fa22 f303 	lsr.w	r3, r2, r3
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f040 808b 	bne.w	80053c4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b17      	cmp	r3, #23
 80052b2:	d807      	bhi.n	80052c4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	701a      	strb	r2, [r3, #0]
 80052c2:	e03d      	b.n	8005340 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	2b7f      	cmp	r3, #127	; 0x7f
 80052d0:	d912      	bls.n	80052f8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	09da      	lsrs	r2, r3, #7
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3b01      	subs	r3, #1
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	3a01      	subs	r2, #1
 80052ea:	60fa      	str	r2, [r7, #12]
 80052ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	e006      	b.n	8005306 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	b2da      	uxtb	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b7f      	cmp	r3, #127	; 0x7f
 800530a:	d912      	bls.n	8005332 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	09da      	lsrs	r2, r3, #7
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	3b01      	subs	r3, #1
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	3a01      	subs	r2, #1
 8005324:	60fa      	str	r2, [r7, #12]
 8005326:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800532a:	b2da      	uxtb	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	701a      	strb	r2, [r3, #0]
 8005330:	e006      	b.n	8005340 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	3b01      	subs	r3, #1
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	b2da      	uxtb	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005340:	4b36      	ldr	r3, [pc, #216]	; (800541c <_SendPacket+0x1c4>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005346:	4b34      	ldr	r3, [pc, #208]	; (8005418 <_SendPacket+0x1c0>)
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	623b      	str	r3, [r7, #32]
 8005358:	e00b      	b.n	8005372 <_SendPacket+0x11a>
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	b2da      	uxtb	r2, r3
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	1c59      	adds	r1, r3, #1
 8005362:	6279      	str	r1, [r7, #36]	; 0x24
 8005364:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	09db      	lsrs	r3, r3, #7
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	2b7f      	cmp	r3, #127	; 0x7f
 8005376:	d8f0      	bhi.n	800535a <_SendPacket+0x102>
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	627a      	str	r2, [r7, #36]	; 0x24
 800537e:	6a3a      	ldr	r2, [r7, #32]
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005388:	4b23      	ldr	r3, [pc, #140]	; (8005418 <_SendPacket+0x1c0>)
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	4618      	mov	r0, r3
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	461a      	mov	r2, r3
 8005396:	68f9      	ldr	r1, [r7, #12]
 8005398:	f7fa ff1a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800539c:	4603      	mov	r3, r0
 800539e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80053a6:	4a1c      	ldr	r2, [pc, #112]	; (8005418 <_SendPacket+0x1c0>)
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	60d3      	str	r3, [r2, #12]
 80053ac:	e00b      	b.n	80053c6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80053ae:	4b1a      	ldr	r3, [pc, #104]	; (8005418 <_SendPacket+0x1c0>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	3301      	adds	r3, #1
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	4b18      	ldr	r3, [pc, #96]	; (8005418 <_SendPacket+0x1c0>)
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	e004      	b.n	80053c6 <_SendPacket+0x16e>
    goto SendDone;
 80053bc:	bf00      	nop
 80053be:	e002      	b.n	80053c6 <_SendPacket+0x16e>
      goto SendDone;
 80053c0:	bf00      	nop
 80053c2:	e000      	b.n	80053c6 <_SendPacket+0x16e>
      goto SendDone;
 80053c4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80053c6:	4b14      	ldr	r3, [pc, #80]	; (8005418 <_SendPacket+0x1c0>)
 80053c8:	7e1b      	ldrb	r3, [r3, #24]
 80053ca:	4619      	mov	r1, r3
 80053cc:	4a14      	ldr	r2, [pc, #80]	; (8005420 <_SendPacket+0x1c8>)
 80053ce:	460b      	mov	r3, r1
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	440b      	add	r3, r1
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	4413      	add	r3, r2
 80053d8:	336c      	adds	r3, #108	; 0x6c
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	4b0e      	ldr	r3, [pc, #56]	; (8005418 <_SendPacket+0x1c0>)
 80053de:	7e1b      	ldrb	r3, [r3, #24]
 80053e0:	4618      	mov	r0, r3
 80053e2:	490f      	ldr	r1, [pc, #60]	; (8005420 <_SendPacket+0x1c8>)
 80053e4:	4603      	mov	r3, r0
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	4403      	add	r3, r0
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	440b      	add	r3, r1
 80053ee:	3370      	adds	r3, #112	; 0x70
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d00b      	beq.n	800540e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80053f6:	4b08      	ldr	r3, [pc, #32]	; (8005418 <_SendPacket+0x1c0>)
 80053f8:	789b      	ldrb	r3, [r3, #2]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d107      	bne.n	800540e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80053fe:	4b06      	ldr	r3, [pc, #24]	; (8005418 <_SendPacket+0x1c0>)
 8005400:	2201      	movs	r2, #1
 8005402:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005404:	f7ff fe44 	bl	8005090 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005408:	4b03      	ldr	r3, [pc, #12]	; (8005418 <_SendPacket+0x1c0>)
 800540a:	2200      	movs	r2, #0
 800540c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800540e:	bf00      	nop
 8005410:	3728      	adds	r7, #40	; 0x28
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	200143f0 	.word	0x200143f0
 800541c:	e0001004 	.word	0xe0001004
 8005420:	20012f30 	.word	0x20012f30

08005424 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005424:	b580      	push	{r7, lr}
 8005426:	b08a      	sub	sp, #40	; 0x28
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	3301      	adds	r3, #1
 800543a:	2b80      	cmp	r3, #128	; 0x80
 800543c:	d80a      	bhi.n	8005454 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	1c59      	adds	r1, r3, #1
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6051      	str	r1, [r2, #4]
 8005448:	78fa      	ldrb	r2, [r7, #3]
 800544a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	2b80      	cmp	r3, #128	; 0x80
 800545a:	d15a      	bne.n	8005512 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691a      	ldr	r2, [r3, #16]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	623b      	str	r3, [r7, #32]
 800547c:	e00b      	b.n	8005496 <_StoreChar+0x72>
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	b2da      	uxtb	r2, r3
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	1c59      	adds	r1, r3, #1
 8005486:	6279      	str	r1, [r7, #36]	; 0x24
 8005488:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800548c:	b2d2      	uxtb	r2, r2
 800548e:	701a      	strb	r2, [r3, #0]
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	09db      	lsrs	r3, r3, #7
 8005494:	623b      	str	r3, [r7, #32]
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	2b7f      	cmp	r3, #127	; 0x7f
 800549a:	d8f0      	bhi.n	800547e <_StoreChar+0x5a>
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	627a      	str	r2, [r7, #36]	; 0x24
 80054a2:	6a3a      	ldr	r2, [r7, #32]
 80054a4:	b2d2      	uxtb	r2, r2
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	61fb      	str	r3, [r7, #28]
 80054b0:	2300      	movs	r3, #0
 80054b2:	61bb      	str	r3, [r7, #24]
 80054b4:	e00b      	b.n	80054ce <_StoreChar+0xaa>
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	1c59      	adds	r1, r3, #1
 80054be:	61f9      	str	r1, [r7, #28]
 80054c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	701a      	strb	r2, [r3, #0]
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	09db      	lsrs	r3, r3, #7
 80054cc:	61bb      	str	r3, [r7, #24]
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	2b7f      	cmp	r3, #127	; 0x7f
 80054d2:	d8f0      	bhi.n	80054b6 <_StoreChar+0x92>
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	61fa      	str	r2, [r7, #28]
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	701a      	strb	r2, [r3, #0]
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	221a      	movs	r2, #26
 80054ea:	6939      	ldr	r1, [r7, #16]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff feb3 	bl	8005258 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff fdbd 	bl	8005076 <_PreparePacket>
 80054fc:	4602      	mov	r2, r0
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	611a      	str	r2, [r3, #16]
  }
}
 8005512:	bf00      	nop
 8005514:	3728      	adds	r7, #40	; 0x28
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800551c:	b580      	push	{r7, lr}
 800551e:	b08a      	sub	sp, #40	; 0x28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800552e:	2301      	movs	r3, #1
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005532:	2301      	movs	r3, #1
 8005534:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005536:	e007      	b.n	8005548 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005538:	6a3a      	ldr	r2, [r7, #32]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005540:	623b      	str	r3, [r7, #32]
    Width++;
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	3301      	adds	r3, #1
 8005546:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005548:	6a3a      	ldr	r2, [r7, #32]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	429a      	cmp	r2, r3
 800554e:	d2f3      	bcs.n	8005538 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	429a      	cmp	r2, r3
 8005556:	d901      	bls.n	800555c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800555c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d11f      	bne.n	80055a6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01c      	beq.n	80055a6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800556c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d005      	beq.n	8005582 <_PrintUnsigned+0x66>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d102      	bne.n	8005582 <_PrintUnsigned+0x66>
        c = '0';
 800557c:	2330      	movs	r3, #48	; 0x30
 800557e:	76fb      	strb	r3, [r7, #27]
 8005580:	e001      	b.n	8005586 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005582:	2320      	movs	r3, #32
 8005584:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005586:	e007      	b.n	8005598 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	3b01      	subs	r3, #1
 800558c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800558e:	7efb      	ldrb	r3, [r7, #27]
 8005590:	4619      	mov	r1, r3
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f7ff ff46 	bl	8005424 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <_PrintUnsigned+0x8a>
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d3f0      	bcc.n	8005588 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d903      	bls.n	80055b4 <_PrintUnsigned+0x98>
      NumDigits--;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	603b      	str	r3, [r7, #0]
 80055b2:	e009      	b.n	80055c8 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055bc:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d200      	bcs.n	80055c8 <_PrintUnsigned+0xac>
        break;
 80055c6:	e005      	b.n	80055d4 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	fb02 f303 	mul.w	r3, r2, r3
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80055d2:	e7e8      	b.n	80055a6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055dc:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e2:	fb02 f303 	mul.w	r3, r2, r3
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80055ec:	4a15      	ldr	r2, [pc, #84]	; (8005644 <_PrintUnsigned+0x128>)
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	4413      	add	r3, r2
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	4619      	mov	r1, r3
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f7ff ff14 	bl	8005424 <_StoreChar>
    Digit /= Base;
 80055fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	fbb2 f3f3 	udiv	r3, r2, r3
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e3      	bne.n	80055d4 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800560c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d011      	beq.n	800563a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00e      	beq.n	800563a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800561c:	e006      	b.n	800562c <_PrintUnsigned+0x110>
        FieldWidth--;
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	3b01      	subs	r3, #1
 8005622:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005624:	2120      	movs	r1, #32
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f7ff fefc 	bl	8005424 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <_PrintUnsigned+0x11e>
 8005632:	69fa      	ldr	r2, [r7, #28]
 8005634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005636:	429a      	cmp	r2, r3
 8005638:	d3f1      	bcc.n	800561e <_PrintUnsigned+0x102>
      }
    }
  }
}
 800563a:	bf00      	nop
 800563c:	3728      	adds	r7, #40	; 0x28
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	0800765c 	.word	0x0800765c

08005648 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	bfb8      	it	lt
 800565c:	425b      	neglt	r3, r3
 800565e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005660:	2301      	movs	r3, #1
 8005662:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005664:	e007      	b.n	8005676 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	fb92 f3f3 	sdiv	r3, r2, r3
 800566e:	613b      	str	r3, [r7, #16]
    Width++;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	3301      	adds	r3, #1
 8005674:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	429a      	cmp	r2, r3
 800567c:	daf3      	bge.n	8005666 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	429a      	cmp	r2, r3
 8005684:	d901      	bls.n	800568a <_PrintInt+0x42>
    Width = NumDigits;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00a      	beq.n	80056a6 <_PrintInt+0x5e>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	db04      	blt.n	80056a0 <_PrintInt+0x58>
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <_PrintInt+0x5e>
    FieldWidth--;
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <_PrintInt+0x6e>
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d016      	beq.n	80056e4 <_PrintInt+0x9c>
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d111      	bne.n	80056e4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00e      	beq.n	80056e4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80056c6:	e006      	b.n	80056d6 <_PrintInt+0x8e>
        FieldWidth--;
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80056ce:	2120      	movs	r1, #32
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f7ff fea7 	bl	8005424 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <_PrintInt+0x9c>
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d3f1      	bcc.n	80056c8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	da07      	bge.n	80056fa <_PrintInt+0xb2>
    v = -v;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	425b      	negs	r3, r3
 80056ee:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80056f0:	212d      	movs	r1, #45	; 0x2d
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f7ff fe96 	bl	8005424 <_StoreChar>
 80056f8:	e008      	b.n	800570c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005704:	212b      	movs	r1, #43	; 0x2b
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f7ff fe8c 	bl	8005424 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d019      	beq.n	800574a <_PrintInt+0x102>
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	d114      	bne.n	800574a <_PrintInt+0x102>
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d111      	bne.n	800574a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00e      	beq.n	800574a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800572c:	e006      	b.n	800573c <_PrintInt+0xf4>
        FieldWidth--;
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	3b01      	subs	r3, #1
 8005732:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005734:	2130      	movs	r1, #48	; 0x30
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f7ff fe74 	bl	8005424 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <_PrintInt+0x102>
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	429a      	cmp	r2, r3
 8005748:	d3f1      	bcc.n	800572e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800574a:	68b9      	ldr	r1, [r7, #8]
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	9301      	str	r3, [sp, #4]
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f7ff fedf 	bl	800551c <_PrintUnsigned>
}
 800575e:	bf00      	nop
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005768:	b580      	push	{r7, lr}
 800576a:	b098      	sub	sp, #96	; 0x60
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005774:	f3ef 8311 	mrs	r3, BASEPRI
 8005778:	f04f 0120 	mov.w	r1, #32
 800577c:	f381 8811 	msr	BASEPRI, r1
 8005780:	633b      	str	r3, [r7, #48]	; 0x30
 8005782:	48b7      	ldr	r0, [pc, #732]	; (8005a60 <_VPrintTarget+0x2f8>)
 8005784:	f7ff fc77 	bl	8005076 <_PreparePacket>
 8005788:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800578a:	4bb5      	ldr	r3, [pc, #724]	; (8005a60 <_VPrintTarget+0x2f8>)
 800578c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800578e:	2300      	movs	r3, #0
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	3301      	adds	r3, #1
 800579a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3301      	adds	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80057ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 8183 	beq.w	8005abe <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80057b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057bc:	2b25      	cmp	r3, #37	; 0x25
 80057be:	f040 8170 	bne.w	8005aa2 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80057c2:	2300      	movs	r3, #0
 80057c4:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80057c6:	2301      	movs	r3, #1
 80057c8:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80057d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057d6:	3b23      	subs	r3, #35	; 0x23
 80057d8:	2b0d      	cmp	r3, #13
 80057da:	d83f      	bhi.n	800585c <_VPrintTarget+0xf4>
 80057dc:	a201      	add	r2, pc, #4	; (adr r2, 80057e4 <_VPrintTarget+0x7c>)
 80057de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e2:	bf00      	nop
 80057e4:	0800584d 	.word	0x0800584d
 80057e8:	0800585d 	.word	0x0800585d
 80057ec:	0800585d 	.word	0x0800585d
 80057f0:	0800585d 	.word	0x0800585d
 80057f4:	0800585d 	.word	0x0800585d
 80057f8:	0800585d 	.word	0x0800585d
 80057fc:	0800585d 	.word	0x0800585d
 8005800:	0800585d 	.word	0x0800585d
 8005804:	0800583d 	.word	0x0800583d
 8005808:	0800585d 	.word	0x0800585d
 800580c:	0800581d 	.word	0x0800581d
 8005810:	0800585d 	.word	0x0800585d
 8005814:	0800585d 	.word	0x0800585d
 8005818:	0800582d 	.word	0x0800582d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800581c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800581e:	f043 0301 	orr.w	r3, r3, #1
 8005822:	64bb      	str	r3, [r7, #72]	; 0x48
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3301      	adds	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	e01a      	b.n	8005862 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800582c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800582e:	f043 0302 	orr.w	r3, r3, #2
 8005832:	64bb      	str	r3, [r7, #72]	; 0x48
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3301      	adds	r3, #1
 8005838:	60fb      	str	r3, [r7, #12]
 800583a:	e012      	b.n	8005862 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800583c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800583e:	f043 0304 	orr.w	r3, r3, #4
 8005842:	64bb      	str	r3, [r7, #72]	; 0x48
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	3301      	adds	r3, #1
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	e00a      	b.n	8005862 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800584c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800584e:	f043 0308 	orr.w	r3, r3, #8
 8005852:	64bb      	str	r3, [r7, #72]	; 0x48
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	3301      	adds	r3, #1
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	e002      	b.n	8005862 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800585c:	2300      	movs	r3, #0
 800585e:	653b      	str	r3, [r7, #80]	; 0x50
 8005860:	bf00      	nop
        }
      } while (v);
 8005862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1b0      	bne.n	80057ca <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005868:	2300      	movs	r3, #0
 800586a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005874:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005878:	2b2f      	cmp	r3, #47	; 0x2f
 800587a:	d912      	bls.n	80058a2 <_VPrintTarget+0x13a>
 800587c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005880:	2b39      	cmp	r3, #57	; 0x39
 8005882:	d80e      	bhi.n	80058a2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3301      	adds	r3, #1
 8005888:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800588a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	461a      	mov	r2, r3
 8005896:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800589a:	4413      	add	r3, r2
 800589c:	3b30      	subs	r3, #48	; 0x30
 800589e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80058a0:	e7e4      	b.n	800586c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80058a2:	2300      	movs	r3, #0
 80058a4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80058ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058b2:	2b2e      	cmp	r3, #46	; 0x2e
 80058b4:	d11d      	bne.n	80058f2 <_VPrintTarget+0x18a>
        sFormat++;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3301      	adds	r3, #1
 80058ba:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80058c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058c8:	2b2f      	cmp	r3, #47	; 0x2f
 80058ca:	d912      	bls.n	80058f2 <_VPrintTarget+0x18a>
 80058cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058d0:	2b39      	cmp	r3, #57	; 0x39
 80058d2:	d80e      	bhi.n	80058f2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3301      	adds	r3, #1
 80058d8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80058da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058dc:	4613      	mov	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	461a      	mov	r2, r3
 80058e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058ea:	4413      	add	r3, r2
 80058ec:	3b30      	subs	r3, #48	; 0x30
 80058ee:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80058f0:	e7e4      	b.n	80058bc <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80058fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058fe:	2b6c      	cmp	r3, #108	; 0x6c
 8005900:	d003      	beq.n	800590a <_VPrintTarget+0x1a2>
 8005902:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005906:	2b68      	cmp	r3, #104	; 0x68
 8005908:	d107      	bne.n	800591a <_VPrintTarget+0x1b2>
          c = *sFormat;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3301      	adds	r3, #1
 8005916:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005918:	e7ef      	b.n	80058fa <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800591a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800591e:	2b25      	cmp	r3, #37	; 0x25
 8005920:	f000 80b3 	beq.w	8005a8a <_VPrintTarget+0x322>
 8005924:	2b25      	cmp	r3, #37	; 0x25
 8005926:	f2c0 80b7 	blt.w	8005a98 <_VPrintTarget+0x330>
 800592a:	2b78      	cmp	r3, #120	; 0x78
 800592c:	f300 80b4 	bgt.w	8005a98 <_VPrintTarget+0x330>
 8005930:	2b58      	cmp	r3, #88	; 0x58
 8005932:	f2c0 80b1 	blt.w	8005a98 <_VPrintTarget+0x330>
 8005936:	3b58      	subs	r3, #88	; 0x58
 8005938:	2b20      	cmp	r3, #32
 800593a:	f200 80ad 	bhi.w	8005a98 <_VPrintTarget+0x330>
 800593e:	a201      	add	r2, pc, #4	; (adr r2, 8005944 <_VPrintTarget+0x1dc>)
 8005940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005944:	08005a3b 	.word	0x08005a3b
 8005948:	08005a99 	.word	0x08005a99
 800594c:	08005a99 	.word	0x08005a99
 8005950:	08005a99 	.word	0x08005a99
 8005954:	08005a99 	.word	0x08005a99
 8005958:	08005a99 	.word	0x08005a99
 800595c:	08005a99 	.word	0x08005a99
 8005960:	08005a99 	.word	0x08005a99
 8005964:	08005a99 	.word	0x08005a99
 8005968:	08005a99 	.word	0x08005a99
 800596c:	08005a99 	.word	0x08005a99
 8005970:	080059c9 	.word	0x080059c9
 8005974:	080059ef 	.word	0x080059ef
 8005978:	08005a99 	.word	0x08005a99
 800597c:	08005a99 	.word	0x08005a99
 8005980:	08005a99 	.word	0x08005a99
 8005984:	08005a99 	.word	0x08005a99
 8005988:	08005a99 	.word	0x08005a99
 800598c:	08005a99 	.word	0x08005a99
 8005990:	08005a99 	.word	0x08005a99
 8005994:	08005a99 	.word	0x08005a99
 8005998:	08005a99 	.word	0x08005a99
 800599c:	08005a99 	.word	0x08005a99
 80059a0:	08005a99 	.word	0x08005a99
 80059a4:	08005a65 	.word	0x08005a65
 80059a8:	08005a99 	.word	0x08005a99
 80059ac:	08005a99 	.word	0x08005a99
 80059b0:	08005a99 	.word	0x08005a99
 80059b4:	08005a99 	.word	0x08005a99
 80059b8:	08005a15 	.word	0x08005a15
 80059bc:	08005a99 	.word	0x08005a99
 80059c0:	08005a99 	.word	0x08005a99
 80059c4:	08005a3b 	.word	0x08005a3b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	1d19      	adds	r1, r3, #4
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	6011      	str	r1, [r2, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80059d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80059dc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80059e0:	f107 0314 	add.w	r3, r7, #20
 80059e4:	4611      	mov	r1, r2
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7ff fd1c 	bl	8005424 <_StoreChar>
        break;
 80059ec:	e055      	b.n	8005a9a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	1d19      	adds	r1, r3, #4
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6011      	str	r1, [r2, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80059fc:	f107 0014 	add.w	r0, r7, #20
 8005a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a02:	9301      	str	r3, [sp, #4]
 8005a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a0a:	220a      	movs	r2, #10
 8005a0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a0e:	f7ff fe1b 	bl	8005648 <_PrintInt>
        break;
 8005a12:	e042      	b.n	8005a9a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	1d19      	adds	r1, r3, #4
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6011      	str	r1, [r2, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005a22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a24:	f107 0014 	add.w	r0, r7, #20
 8005a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a32:	220a      	movs	r2, #10
 8005a34:	f7ff fd72 	bl	800551c <_PrintUnsigned>
        break;
 8005a38:	e02f      	b.n	8005a9a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	1d19      	adds	r1, r3, #4
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	6011      	str	r1, [r2, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005a48:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a4a:	f107 0014 	add.w	r0, r7, #20
 8005a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a50:	9301      	str	r3, [sp, #4]
 8005a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a58:	2210      	movs	r2, #16
 8005a5a:	f7ff fd5f 	bl	800551c <_PrintUnsigned>
        break;
 8005a5e:	e01c      	b.n	8005a9a <_VPrintTarget+0x332>
 8005a60:	20014420 	.word	0x20014420
      case 'p':
        v = va_arg(*pParamList, int);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	1d19      	adds	r1, r3, #4
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6011      	str	r1, [r2, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005a72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a74:	f107 0014 	add.w	r0, r7, #20
 8005a78:	2300      	movs	r3, #0
 8005a7a:	9301      	str	r3, [sp, #4]
 8005a7c:	2308      	movs	r3, #8
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	2308      	movs	r3, #8
 8005a82:	2210      	movs	r2, #16
 8005a84:	f7ff fd4a 	bl	800551c <_PrintUnsigned>
        break;
 8005a88:	e007      	b.n	8005a9a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005a8a:	f107 0314 	add.w	r3, r7, #20
 8005a8e:	2125      	movs	r1, #37	; 0x25
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff fcc7 	bl	8005424 <_StoreChar>
        break;
 8005a96:	e000      	b.n	8005a9a <_VPrintTarget+0x332>
      default:
        break;
 8005a98:	bf00      	nop
      }
      sFormat++;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	e007      	b.n	8005ab2 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005aa2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005aa6:	f107 0314 	add.w	r3, r7, #20
 8005aaa:	4611      	mov	r1, r2
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7ff fcb9 	bl	8005424 <_StoreChar>
    }
  } while (*sFormat);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f47f ae72 	bne.w	80057a0 <_VPrintTarget+0x38>
 8005abc:	e000      	b.n	8005ac0 <_VPrintTarget+0x358>
      break;
 8005abe:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d041      	beq.n	8005b4a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ad6:	e00b      	b.n	8005af0 <_VPrintTarget+0x388>
 8005ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ade:	1c59      	adds	r1, r3, #1
 8005ae0:	6439      	str	r1, [r7, #64]	; 0x40
 8005ae2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ae6:	b2d2      	uxtb	r2, r2
 8005ae8:	701a      	strb	r2, [r3, #0]
 8005aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aec:	09db      	lsrs	r3, r3, #7
 8005aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af2:	2b7f      	cmp	r3, #127	; 0x7f
 8005af4:	d8f0      	bhi.n	8005ad8 <_VPrintTarget+0x370>
 8005af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	643a      	str	r2, [r7, #64]	; 0x40
 8005afc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b04:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b0e:	e00b      	b.n	8005b28 <_VPrintTarget+0x3c0>
 8005b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	1c59      	adds	r1, r3, #1
 8005b18:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	701a      	strb	r2, [r3, #0]
 8005b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b24:	09db      	lsrs	r3, r3, #7
 8005b26:	637b      	str	r3, [r7, #52]	; 0x34
 8005b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b2c:	d8f0      	bhi.n	8005b10 <_VPrintTarget+0x3a8>
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	63ba      	str	r2, [r7, #56]	; 0x38
 8005b34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	69b9      	ldr	r1, [r7, #24]
 8005b42:	221a      	movs	r2, #26
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff fb87 	bl	8005258 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005b50:	bf00      	nop
 8005b52:	3758      	adds	r7, #88	; 0x58
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
 8005b64:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005b66:	2300      	movs	r3, #0
 8005b68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b6c:	4917      	ldr	r1, [pc, #92]	; (8005bcc <SEGGER_SYSVIEW_Init+0x74>)
 8005b6e:	4818      	ldr	r0, [pc, #96]	; (8005bd0 <SEGGER_SYSVIEW_Init+0x78>)
 8005b70:	f7ff f940 	bl	8004df4 <SEGGER_RTT_AllocUpBuffer>
 8005b74:	4603      	mov	r3, r0
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	4b16      	ldr	r3, [pc, #88]	; (8005bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b7a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005b7c:	4b15      	ldr	r3, [pc, #84]	; (8005bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b7e:	785a      	ldrb	r2, [r3, #1]
 8005b80:	4b14      	ldr	r3, [pc, #80]	; (8005bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b82:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005b84:	4b13      	ldr	r3, [pc, #76]	; (8005bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b86:	7e1b      	ldrb	r3, [r3, #24]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	2308      	movs	r3, #8
 8005b90:	4a11      	ldr	r2, [pc, #68]	; (8005bd8 <SEGGER_SYSVIEW_Init+0x80>)
 8005b92:	490f      	ldr	r1, [pc, #60]	; (8005bd0 <SEGGER_SYSVIEW_Init+0x78>)
 8005b94:	f7ff f9b2 	bl	8004efc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005b98:	4b0e      	ldr	r3, [pc, #56]	; (8005bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005b9e:	4b0f      	ldr	r3, [pc, #60]	; (8005bdc <SEGGER_SYSVIEW_Init+0x84>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a0c      	ldr	r2, [pc, #48]	; (8005bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ba4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005ba6:	4a0b      	ldr	r2, [pc, #44]	; (8005bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005bac:	4a09      	ldr	r2, [pc, #36]	; (8005bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005bb2:	4a08      	ldr	r2, [pc, #32]	; (8005bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005bb8:	4a06      	ldr	r2, [pc, #24]	; (8005bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005bbe:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005bc4:	bf00      	nop
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	200133e8 	.word	0x200133e8
 8005bd0:	080075f8 	.word	0x080075f8
 8005bd4:	200143f0 	.word	0x200143f0
 8005bd8:	200143e8 	.word	0x200143e8
 8005bdc:	e0001004 	.word	0xe0001004

08005be0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005be8:	4a04      	ldr	r2, [pc, #16]	; (8005bfc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6113      	str	r3, [r2, #16]
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	200143f0 	.word	0x200143f0

08005c00 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c08:	f3ef 8311 	mrs	r3, BASEPRI
 8005c0c:	f04f 0120 	mov.w	r1, #32
 8005c10:	f381 8811 	msr	BASEPRI, r1
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	4808      	ldr	r0, [pc, #32]	; (8005c38 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005c18:	f7ff fa2d 	bl	8005076 <_PreparePacket>
 8005c1c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	68b8      	ldr	r0, [r7, #8]
 8005c24:	f7ff fb18 	bl	8005258 <_SendPacket>
  RECORD_END();
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f383 8811 	msr	BASEPRI, r3
}
 8005c2e:	bf00      	nop
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20014420 	.word	0x20014420

08005c3c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005c46:	f3ef 8311 	mrs	r3, BASEPRI
 8005c4a:	f04f 0120 	mov.w	r1, #32
 8005c4e:	f381 8811 	msr	BASEPRI, r1
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	4816      	ldr	r0, [pc, #88]	; (8005cb0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005c56:	f7ff fa0e 	bl	8005076 <_PreparePacket>
 8005c5a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	61fb      	str	r3, [r7, #28]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	61bb      	str	r3, [r7, #24]
 8005c68:	e00b      	b.n	8005c82 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	1c59      	adds	r1, r3, #1
 8005c72:	61f9      	str	r1, [r7, #28]
 8005c74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c78:	b2d2      	uxtb	r2, r2
 8005c7a:	701a      	strb	r2, [r3, #0]
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	09db      	lsrs	r3, r3, #7
 8005c80:	61bb      	str	r3, [r7, #24]
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	2b7f      	cmp	r3, #127	; 0x7f
 8005c86:	d8f0      	bhi.n	8005c6a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	61fa      	str	r2, [r7, #28]
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	b2d2      	uxtb	r2, r2
 8005c92:	701a      	strb	r2, [r3, #0]
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	68f9      	ldr	r1, [r7, #12]
 8005c9c:	6938      	ldr	r0, [r7, #16]
 8005c9e:	f7ff fadb 	bl	8005258 <_SendPacket>
  RECORD_END();
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f383 8811 	msr	BASEPRI, r3
}
 8005ca8:	bf00      	nop
 8005caa:	3720      	adds	r7, #32
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	20014420 	.word	0x20014420

08005cb4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b08c      	sub	sp, #48	; 0x30
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cc0:	f3ef 8311 	mrs	r3, BASEPRI
 8005cc4:	f04f 0120 	mov.w	r1, #32
 8005cc8:	f381 8811 	msr	BASEPRI, r1
 8005ccc:	61fb      	str	r3, [r7, #28]
 8005cce:	4825      	ldr	r0, [pc, #148]	; (8005d64 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005cd0:	f7ff f9d1 	bl	8005076 <_PreparePacket>
 8005cd4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ce2:	e00b      	b.n	8005cfc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cea:	1c59      	adds	r1, r3, #1
 8005cec:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005cee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cf2:	b2d2      	uxtb	r2, r2
 8005cf4:	701a      	strb	r2, [r3, #0]
 8005cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf8:	09db      	lsrs	r3, r3, #7
 8005cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfe:	2b7f      	cmp	r3, #127	; 0x7f
 8005d00:	d8f0      	bhi.n	8005ce4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	701a      	strb	r2, [r3, #0]
 8005d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d10:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	627b      	str	r3, [r7, #36]	; 0x24
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	623b      	str	r3, [r7, #32]
 8005d1a:	e00b      	b.n	8005d34 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	1c59      	adds	r1, r3, #1
 8005d24:	6279      	str	r1, [r7, #36]	; 0x24
 8005d26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d2a:	b2d2      	uxtb	r2, r2
 8005d2c:	701a      	strb	r2, [r3, #0]
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	09db      	lsrs	r3, r3, #7
 8005d32:	623b      	str	r3, [r7, #32]
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	2b7f      	cmp	r3, #127	; 0x7f
 8005d38:	d8f0      	bhi.n	8005d1c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	627a      	str	r2, [r7, #36]	; 0x24
 8005d40:	6a3a      	ldr	r2, [r7, #32]
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	6979      	ldr	r1, [r7, #20]
 8005d4e:	69b8      	ldr	r0, [r7, #24]
 8005d50:	f7ff fa82 	bl	8005258 <_SendPacket>
  RECORD_END();
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	f383 8811 	msr	BASEPRI, r3
}
 8005d5a:	bf00      	nop
 8005d5c:	3730      	adds	r7, #48	; 0x30
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20014420 	.word	0x20014420

08005d68 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b08e      	sub	sp, #56	; 0x38
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
 8005d74:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d76:	f3ef 8311 	mrs	r3, BASEPRI
 8005d7a:	f04f 0120 	mov.w	r1, #32
 8005d7e:	f381 8811 	msr	BASEPRI, r1
 8005d82:	61fb      	str	r3, [r7, #28]
 8005d84:	4832      	ldr	r0, [pc, #200]	; (8005e50 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005d86:	f7ff f976 	bl	8005076 <_PreparePacket>
 8005d8a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	637b      	str	r3, [r7, #52]	; 0x34
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	633b      	str	r3, [r7, #48]	; 0x30
 8005d98:	e00b      	b.n	8005db2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da0:	1c59      	adds	r1, r3, #1
 8005da2:	6379      	str	r1, [r7, #52]	; 0x34
 8005da4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dae:	09db      	lsrs	r3, r3, #7
 8005db0:	633b      	str	r3, [r7, #48]	; 0x30
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	2b7f      	cmp	r3, #127	; 0x7f
 8005db6:	d8f0      	bhi.n	8005d9a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	637a      	str	r2, [r7, #52]	; 0x34
 8005dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dd0:	e00b      	b.n	8005dea <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd8:	1c59      	adds	r1, r3, #1
 8005dda:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ddc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005de0:	b2d2      	uxtb	r2, r2
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de6:	09db      	lsrs	r3, r3, #7
 8005de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dec:	2b7f      	cmp	r3, #127	; 0x7f
 8005dee:	d8f0      	bhi.n	8005dd2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005df8:	b2d2      	uxtb	r2, r2
 8005dfa:	701a      	strb	r2, [r3, #0]
 8005dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	623b      	str	r3, [r7, #32]
 8005e08:	e00b      	b.n	8005e22 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	1c59      	adds	r1, r3, #1
 8005e12:	6279      	str	r1, [r7, #36]	; 0x24
 8005e14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	09db      	lsrs	r3, r3, #7
 8005e20:	623b      	str	r3, [r7, #32]
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	2b7f      	cmp	r3, #127	; 0x7f
 8005e26:	d8f0      	bhi.n	8005e0a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	627a      	str	r2, [r7, #36]	; 0x24
 8005e2e:	6a3a      	ldr	r2, [r7, #32]
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	701a      	strb	r2, [r3, #0]
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	6979      	ldr	r1, [r7, #20]
 8005e3c:	69b8      	ldr	r0, [r7, #24]
 8005e3e:	f7ff fa0b 	bl	8005258 <_SendPacket>
  RECORD_END();
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	f383 8811 	msr	BASEPRI, r3
}
 8005e48:	bf00      	nop
 8005e4a:	3738      	adds	r7, #56	; 0x38
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	20014420 	.word	0x20014420

08005e54 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b090      	sub	sp, #64	; 0x40
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e62:	f3ef 8311 	mrs	r3, BASEPRI
 8005e66:	f04f 0120 	mov.w	r1, #32
 8005e6a:	f381 8811 	msr	BASEPRI, r1
 8005e6e:	61fb      	str	r3, [r7, #28]
 8005e70:	4840      	ldr	r0, [pc, #256]	; (8005f74 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005e72:	f7ff f900 	bl	8005076 <_PreparePacket>
 8005e76:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e84:	e00b      	b.n	8005e9e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8c:	1c59      	adds	r1, r3, #1
 8005e8e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005e90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	701a      	strb	r2, [r3, #0]
 8005e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9a:	09db      	lsrs	r3, r3, #7
 8005e9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ea2:	d8f0      	bhi.n	8005e86 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005eaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	701a      	strb	r2, [r3, #0]
 8005eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	633b      	str	r3, [r7, #48]	; 0x30
 8005ebc:	e00b      	b.n	8005ed6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec4:	1c59      	adds	r1, r3, #1
 8005ec6:	6379      	str	r1, [r7, #52]	; 0x34
 8005ec8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	701a      	strb	r2, [r3, #0]
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	09db      	lsrs	r3, r3, #7
 8005ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eda:	d8f0      	bhi.n	8005ebe <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	637a      	str	r2, [r7, #52]	; 0x34
 8005ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ef4:	e00b      	b.n	8005f0e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efc:	1c59      	adds	r1, r3, #1
 8005efe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	701a      	strb	r2, [r3, #0]
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	09db      	lsrs	r3, r3, #7
 8005f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f10:	2b7f      	cmp	r3, #127	; 0x7f
 8005f12:	d8f0      	bhi.n	8005ef6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
 8005f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f2a:	623b      	str	r3, [r7, #32]
 8005f2c:	e00b      	b.n	8005f46 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	1c59      	adds	r1, r3, #1
 8005f36:	6279      	str	r1, [r7, #36]	; 0x24
 8005f38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	09db      	lsrs	r3, r3, #7
 8005f44:	623b      	str	r3, [r7, #32]
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	2b7f      	cmp	r3, #127	; 0x7f
 8005f4a:	d8f0      	bhi.n	8005f2e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	627a      	str	r2, [r7, #36]	; 0x24
 8005f52:	6a3a      	ldr	r2, [r7, #32]
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	701a      	strb	r2, [r3, #0]
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	6979      	ldr	r1, [r7, #20]
 8005f60:	69b8      	ldr	r0, [r7, #24]
 8005f62:	f7ff f979 	bl	8005258 <_SendPacket>
  RECORD_END();
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	f383 8811 	msr	BASEPRI, r3
}
 8005f6c:	bf00      	nop
 8005f6e:	3740      	adds	r7, #64	; 0x40
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	20014420 	.word	0x20014420

08005f78 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08c      	sub	sp, #48	; 0x30
 8005f7c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005f7e:	4b58      	ldr	r3, [pc, #352]	; (80060e0 <SEGGER_SYSVIEW_Start+0x168>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005f84:	f3ef 8311 	mrs	r3, BASEPRI
 8005f88:	f04f 0120 	mov.w	r1, #32
 8005f8c:	f381 8811 	msr	BASEPRI, r1
 8005f90:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005f92:	4b53      	ldr	r3, [pc, #332]	; (80060e0 <SEGGER_SYSVIEW_Start+0x168>)
 8005f94:	785b      	ldrb	r3, [r3, #1]
 8005f96:	220a      	movs	r2, #10
 8005f98:	4952      	ldr	r1, [pc, #328]	; (80060e4 <SEGGER_SYSVIEW_Start+0x16c>)
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fa f918 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005fa6:	200a      	movs	r0, #10
 8005fa8:	f7ff fe2a 	bl	8005c00 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fac:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb0:	f04f 0120 	mov.w	r1, #32
 8005fb4:	f381 8811 	msr	BASEPRI, r1
 8005fb8:	60bb      	str	r3, [r7, #8]
 8005fba:	484b      	ldr	r0, [pc, #300]	; (80060e8 <SEGGER_SYSVIEW_Start+0x170>)
 8005fbc:	f7ff f85b 	bl	8005076 <_PreparePacket>
 8005fc0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fca:	4b45      	ldr	r3, [pc, #276]	; (80060e0 <SEGGER_SYSVIEW_Start+0x168>)
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fd0:	e00b      	b.n	8005fea <SEGGER_SYSVIEW_Start+0x72>
 8005fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd8:	1c59      	adds	r1, r3, #1
 8005fda:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005fdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fe0:	b2d2      	uxtb	r2, r2
 8005fe2:	701a      	strb	r2, [r3, #0]
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	09db      	lsrs	r3, r3, #7
 8005fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	2b7f      	cmp	r3, #127	; 0x7f
 8005fee:	d8f0      	bhi.n	8005fd2 <SEGGER_SYSVIEW_Start+0x5a>
 8005ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	627b      	str	r3, [r7, #36]	; 0x24
 8006004:	4b36      	ldr	r3, [pc, #216]	; (80060e0 <SEGGER_SYSVIEW_Start+0x168>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	623b      	str	r3, [r7, #32]
 800600a:	e00b      	b.n	8006024 <SEGGER_SYSVIEW_Start+0xac>
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	b2da      	uxtb	r2, r3
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	1c59      	adds	r1, r3, #1
 8006014:	6279      	str	r1, [r7, #36]	; 0x24
 8006016:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800601a:	b2d2      	uxtb	r2, r2
 800601c:	701a      	strb	r2, [r3, #0]
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	09db      	lsrs	r3, r3, #7
 8006022:	623b      	str	r3, [r7, #32]
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	2b7f      	cmp	r3, #127	; 0x7f
 8006028:	d8f0      	bhi.n	800600c <SEGGER_SYSVIEW_Start+0x94>
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	627a      	str	r2, [r7, #36]	; 0x24
 8006030:	6a3a      	ldr	r2, [r7, #32]
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	61fb      	str	r3, [r7, #28]
 800603e:	4b28      	ldr	r3, [pc, #160]	; (80060e0 <SEGGER_SYSVIEW_Start+0x168>)
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	61bb      	str	r3, [r7, #24]
 8006044:	e00b      	b.n	800605e <SEGGER_SYSVIEW_Start+0xe6>
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	b2da      	uxtb	r2, r3
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	1c59      	adds	r1, r3, #1
 800604e:	61f9      	str	r1, [r7, #28]
 8006050:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006054:	b2d2      	uxtb	r2, r2
 8006056:	701a      	strb	r2, [r3, #0]
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	09db      	lsrs	r3, r3, #7
 800605c:	61bb      	str	r3, [r7, #24]
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	2b7f      	cmp	r3, #127	; 0x7f
 8006062:	d8f0      	bhi.n	8006046 <SEGGER_SYSVIEW_Start+0xce>
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	61fa      	str	r2, [r7, #28]
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	701a      	strb	r2, [r3, #0]
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	617b      	str	r3, [r7, #20]
 8006078:	2300      	movs	r3, #0
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	e00b      	b.n	8006096 <SEGGER_SYSVIEW_Start+0x11e>
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	b2da      	uxtb	r2, r3
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	1c59      	adds	r1, r3, #1
 8006086:	6179      	str	r1, [r7, #20]
 8006088:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	09db      	lsrs	r3, r3, #7
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	2b7f      	cmp	r3, #127	; 0x7f
 800609a:	d8f0      	bhi.n	800607e <SEGGER_SYSVIEW_Start+0x106>
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	617a      	str	r2, [r7, #20]
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	701a      	strb	r2, [r3, #0]
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80060ac:	2218      	movs	r2, #24
 80060ae:	6839      	ldr	r1, [r7, #0]
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7ff f8d1 	bl	8005258 <_SendPacket>
      RECORD_END();
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80060bc:	4b08      	ldr	r3, [pc, #32]	; (80060e0 <SEGGER_SYSVIEW_Start+0x168>)
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80060c4:	4b06      	ldr	r3, [pc, #24]	; (80060e0 <SEGGER_SYSVIEW_Start+0x168>)
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80060ca:	f000 f9eb 	bl	80064a4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80060ce:	f000 f9b1 	bl	8006434 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80060d2:	f000 fc83 	bl	80069dc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80060d6:	bf00      	nop
 80060d8:	3730      	adds	r7, #48	; 0x30
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	200143f0 	.word	0x200143f0
 80060e4:	08007650 	.word	0x08007650
 80060e8:	20014420 	.word	0x20014420

080060ec <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060f2:	f3ef 8311 	mrs	r3, BASEPRI
 80060f6:	f04f 0120 	mov.w	r1, #32
 80060fa:	f381 8811 	msr	BASEPRI, r1
 80060fe:	607b      	str	r3, [r7, #4]
 8006100:	480b      	ldr	r0, [pc, #44]	; (8006130 <SEGGER_SYSVIEW_Stop+0x44>)
 8006102:	f7fe ffb8 	bl	8005076 <_PreparePacket>
 8006106:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006108:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <SEGGER_SYSVIEW_Stop+0x48>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d007      	beq.n	8006120 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006110:	220b      	movs	r2, #11
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	6838      	ldr	r0, [r7, #0]
 8006116:	f7ff f89f 	bl	8005258 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800611a:	4b06      	ldr	r3, [pc, #24]	; (8006134 <SEGGER_SYSVIEW_Stop+0x48>)
 800611c:	2200      	movs	r2, #0
 800611e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f383 8811 	msr	BASEPRI, r3
}
 8006126:	bf00      	nop
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20014420 	.word	0x20014420
 8006134:	200143f0 	.word	0x200143f0

08006138 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006138:	b580      	push	{r7, lr}
 800613a:	b08c      	sub	sp, #48	; 0x30
 800613c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800613e:	f3ef 8311 	mrs	r3, BASEPRI
 8006142:	f04f 0120 	mov.w	r1, #32
 8006146:	f381 8811 	msr	BASEPRI, r1
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	4845      	ldr	r0, [pc, #276]	; (8006264 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800614e:	f7fe ff92 	bl	8005076 <_PreparePacket>
 8006152:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800615c:	4b42      	ldr	r3, [pc, #264]	; (8006268 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	62bb      	str	r3, [r7, #40]	; 0x28
 8006162:	e00b      	b.n	800617c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006166:	b2da      	uxtb	r2, r3
 8006168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616a:	1c59      	adds	r1, r3, #1
 800616c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800616e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	701a      	strb	r2, [r3, #0]
 8006176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006178:	09db      	lsrs	r3, r3, #7
 800617a:	62bb      	str	r3, [r7, #40]	; 0x28
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	2b7f      	cmp	r3, #127	; 0x7f
 8006180:	d8f0      	bhi.n	8006164 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006184:	1c5a      	adds	r2, r3, #1
 8006186:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006190:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
 8006196:	4b34      	ldr	r3, [pc, #208]	; (8006268 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	623b      	str	r3, [r7, #32]
 800619c:	e00b      	b.n	80061b6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	1c59      	adds	r1, r3, #1
 80061a6:	6279      	str	r1, [r7, #36]	; 0x24
 80061a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	09db      	lsrs	r3, r3, #7
 80061b4:	623b      	str	r3, [r7, #32]
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	2b7f      	cmp	r3, #127	; 0x7f
 80061ba:	d8f0      	bhi.n	800619e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	627a      	str	r2, [r7, #36]	; 0x24
 80061c2:	6a3a      	ldr	r2, [r7, #32]
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	61fb      	str	r3, [r7, #28]
 80061d0:	4b25      	ldr	r3, [pc, #148]	; (8006268 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	61bb      	str	r3, [r7, #24]
 80061d6:	e00b      	b.n	80061f0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	1c59      	adds	r1, r3, #1
 80061e0:	61f9      	str	r1, [r7, #28]
 80061e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	09db      	lsrs	r3, r3, #7
 80061ee:	61bb      	str	r3, [r7, #24]
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	2b7f      	cmp	r3, #127	; 0x7f
 80061f4:	d8f0      	bhi.n	80061d8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	61fa      	str	r2, [r7, #28]
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	701a      	strb	r2, [r3, #0]
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	2300      	movs	r3, #0
 800620c:	613b      	str	r3, [r7, #16]
 800620e:	e00b      	b.n	8006228 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	b2da      	uxtb	r2, r3
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	1c59      	adds	r1, r3, #1
 8006218:	6179      	str	r1, [r7, #20]
 800621a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	09db      	lsrs	r3, r3, #7
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	2b7f      	cmp	r3, #127	; 0x7f
 800622c:	d8f0      	bhi.n	8006210 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	617a      	str	r2, [r7, #20]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800623e:	2218      	movs	r2, #24
 8006240:	6879      	ldr	r1, [r7, #4]
 8006242:	68b8      	ldr	r0, [r7, #8]
 8006244:	f7ff f808 	bl	8005258 <_SendPacket>
  RECORD_END();
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800624e:	4b06      	ldr	r3, [pc, #24]	; (8006268 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006256:	4b04      	ldr	r3, [pc, #16]	; (8006268 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	4798      	blx	r3
  }
}
 800625c:	bf00      	nop
 800625e:	3730      	adds	r7, #48	; 0x30
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	20014420 	.word	0x20014420
 8006268:	200143f0 	.word	0x200143f0

0800626c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800626c:	b580      	push	{r7, lr}
 800626e:	b092      	sub	sp, #72	; 0x48
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006274:	f3ef 8311 	mrs	r3, BASEPRI
 8006278:	f04f 0120 	mov.w	r1, #32
 800627c:	f381 8811 	msr	BASEPRI, r1
 8006280:	617b      	str	r3, [r7, #20]
 8006282:	486a      	ldr	r0, [pc, #424]	; (800642c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006284:	f7fe fef7 	bl	8005076 <_PreparePacket>
 8006288:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	647b      	str	r3, [r7, #68]	; 0x44
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	4b66      	ldr	r3, [pc, #408]	; (8006430 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	643b      	str	r3, [r7, #64]	; 0x40
 800629e:	e00b      	b.n	80062b8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80062a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062a6:	1c59      	adds	r1, r3, #1
 80062a8:	6479      	str	r1, [r7, #68]	; 0x44
 80062aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062ae:	b2d2      	uxtb	r2, r2
 80062b0:	701a      	strb	r2, [r3, #0]
 80062b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b4:	09db      	lsrs	r3, r3, #7
 80062b6:	643b      	str	r3, [r7, #64]	; 0x40
 80062b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ba:	2b7f      	cmp	r3, #127	; 0x7f
 80062bc:	d8f0      	bhi.n	80062a0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80062be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	647a      	str	r2, [r7, #68]	; 0x44
 80062c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80062d8:	e00b      	b.n	80062f2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80062da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e0:	1c59      	adds	r1, r3, #1
 80062e2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80062e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062e8:	b2d2      	uxtb	r2, r2
 80062ea:	701a      	strb	r2, [r3, #0]
 80062ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ee:	09db      	lsrs	r3, r3, #7
 80062f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80062f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f4:	2b7f      	cmp	r3, #127	; 0x7f
 80062f6:	d8f0      	bhi.n	80062da <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80062f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062fa:	1c5a      	adds	r2, r3, #1
 80062fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80062fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	701a      	strb	r2, [r3, #0]
 8006304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006306:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	2220      	movs	r2, #32
 800630e:	4619      	mov	r1, r3
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f7fe fe63 	bl	8004fdc <_EncodeStr>
 8006316:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006318:	2209      	movs	r2, #9
 800631a:	68f9      	ldr	r1, [r7, #12]
 800631c:	6938      	ldr	r0, [r7, #16]
 800631e:	f7fe ff9b 	bl	8005258 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	637b      	str	r3, [r7, #52]	; 0x34
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	4b40      	ldr	r3, [pc, #256]	; (8006430 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	633b      	str	r3, [r7, #48]	; 0x30
 8006336:	e00b      	b.n	8006350 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	b2da      	uxtb	r2, r3
 800633c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800633e:	1c59      	adds	r1, r3, #1
 8006340:	6379      	str	r1, [r7, #52]	; 0x34
 8006342:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006346:	b2d2      	uxtb	r2, r2
 8006348:	701a      	strb	r2, [r3, #0]
 800634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634c:	09db      	lsrs	r3, r3, #7
 800634e:	633b      	str	r3, [r7, #48]	; 0x30
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	2b7f      	cmp	r3, #127	; 0x7f
 8006354:	d8f0      	bhi.n	8006338 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006358:	1c5a      	adds	r2, r3, #1
 800635a:	637a      	str	r2, [r7, #52]	; 0x34
 800635c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006364:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006370:	e00b      	b.n	800638a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006374:	b2da      	uxtb	r2, r3
 8006376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006378:	1c59      	adds	r1, r3, #1
 800637a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800637c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006380:	b2d2      	uxtb	r2, r2
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006386:	09db      	lsrs	r3, r3, #7
 8006388:	62bb      	str	r3, [r7, #40]	; 0x28
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	2b7f      	cmp	r3, #127	; 0x7f
 800638e:	d8f0      	bhi.n	8006372 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006392:	1c5a      	adds	r2, r3, #1
 8006394:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	627b      	str	r3, [r7, #36]	; 0x24
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	623b      	str	r3, [r7, #32]
 80063aa:	e00b      	b.n	80063c4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	1c59      	adds	r1, r3, #1
 80063b4:	6279      	str	r1, [r7, #36]	; 0x24
 80063b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	701a      	strb	r2, [r3, #0]
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	09db      	lsrs	r3, r3, #7
 80063c2:	623b      	str	r3, [r7, #32]
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	2b7f      	cmp	r3, #127	; 0x7f
 80063c8:	d8f0      	bhi.n	80063ac <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	627a      	str	r2, [r7, #36]	; 0x24
 80063d0:	6a3a      	ldr	r2, [r7, #32]
 80063d2:	b2d2      	uxtb	r2, r2
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	61fb      	str	r3, [r7, #28]
 80063de:	2300      	movs	r3, #0
 80063e0:	61bb      	str	r3, [r7, #24]
 80063e2:	e00b      	b.n	80063fc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	1c59      	adds	r1, r3, #1
 80063ec:	61f9      	str	r1, [r7, #28]
 80063ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	09db      	lsrs	r3, r3, #7
 80063fa:	61bb      	str	r3, [r7, #24]
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006400:	d8f0      	bhi.n	80063e4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	61fa      	str	r2, [r7, #28]
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006412:	2215      	movs	r2, #21
 8006414:	68f9      	ldr	r1, [r7, #12]
 8006416:	6938      	ldr	r0, [r7, #16]
 8006418:	f7fe ff1e 	bl	8005258 <_SendPacket>
  RECORD_END();
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f383 8811 	msr	BASEPRI, r3
}
 8006422:	bf00      	nop
 8006424:	3748      	adds	r7, #72	; 0x48
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	20014420 	.word	0x20014420
 8006430:	200143f0 	.word	0x200143f0

08006434 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006438:	4b07      	ldr	r3, [pc, #28]	; (8006458 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d008      	beq.n	8006452 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006440:	4b05      	ldr	r3, [pc, #20]	; (8006458 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800644a:	4b03      	ldr	r3, [pc, #12]	; (8006458 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	4798      	blx	r3
  }
}
 8006452:	bf00      	nop
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	200143f0 	.word	0x200143f0

0800645c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006464:	f3ef 8311 	mrs	r3, BASEPRI
 8006468:	f04f 0120 	mov.w	r1, #32
 800646c:	f381 8811 	msr	BASEPRI, r1
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	480b      	ldr	r0, [pc, #44]	; (80064a0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006474:	f7fe fdff 	bl	8005076 <_PreparePacket>
 8006478:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800647a:	2280      	movs	r2, #128	; 0x80
 800647c:	6879      	ldr	r1, [r7, #4]
 800647e:	6938      	ldr	r0, [r7, #16]
 8006480:	f7fe fdac 	bl	8004fdc <_EncodeStr>
 8006484:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006486:	220e      	movs	r2, #14
 8006488:	68f9      	ldr	r1, [r7, #12]
 800648a:	6938      	ldr	r0, [r7, #16]
 800648c:	f7fe fee4 	bl	8005258 <_SendPacket>
  RECORD_END();
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f383 8811 	msr	BASEPRI, r3
}
 8006496:	bf00      	nop
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	20014420 	.word	0x20014420

080064a4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80064a4:	b590      	push	{r4, r7, lr}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80064aa:	4b15      	ldr	r3, [pc, #84]	; (8006500 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d01a      	beq.n	80064e8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80064b2:	4b13      	ldr	r3, [pc, #76]	; (8006500 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d015      	beq.n	80064e8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80064bc:	4b10      	ldr	r3, [pc, #64]	; (8006500 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4798      	blx	r3
 80064c4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80064c8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80064ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064ce:	f04f 0200 	mov.w	r2, #0
 80064d2:	f04f 0300 	mov.w	r3, #0
 80064d6:	000a      	movs	r2, r1
 80064d8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80064da:	4613      	mov	r3, r2
 80064dc:	461a      	mov	r2, r3
 80064de:	4621      	mov	r1, r4
 80064e0:	200d      	movs	r0, #13
 80064e2:	f7ff fbe7 	bl	8005cb4 <SEGGER_SYSVIEW_RecordU32x2>
 80064e6:	e006      	b.n	80064f6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80064e8:	4b06      	ldr	r3, [pc, #24]	; (8006504 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4619      	mov	r1, r3
 80064ee:	200c      	movs	r0, #12
 80064f0:	f7ff fba4 	bl	8005c3c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80064f4:	bf00      	nop
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd90      	pop	{r4, r7, pc}
 80064fe:	bf00      	nop
 8006500:	200143f0 	.word	0x200143f0
 8006504:	e0001004 	.word	0xe0001004

08006508 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800650e:	f3ef 8311 	mrs	r3, BASEPRI
 8006512:	f04f 0120 	mov.w	r1, #32
 8006516:	f381 8811 	msr	BASEPRI, r1
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	4819      	ldr	r0, [pc, #100]	; (8006584 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800651e:	f7fe fdaa 	bl	8005076 <_PreparePacket>
 8006522:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006528:	4b17      	ldr	r3, [pc, #92]	; (8006588 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006530:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	617b      	str	r3, [r7, #20]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	613b      	str	r3, [r7, #16]
 800653a:	e00b      	b.n	8006554 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	b2da      	uxtb	r2, r3
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	1c59      	adds	r1, r3, #1
 8006544:	6179      	str	r1, [r7, #20]
 8006546:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800654a:	b2d2      	uxtb	r2, r2
 800654c:	701a      	strb	r2, [r3, #0]
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	09db      	lsrs	r3, r3, #7
 8006552:	613b      	str	r3, [r7, #16]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	2b7f      	cmp	r3, #127	; 0x7f
 8006558:	d8f0      	bhi.n	800653c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	617a      	str	r2, [r7, #20]
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800656a:	2202      	movs	r2, #2
 800656c:	6879      	ldr	r1, [r7, #4]
 800656e:	68b8      	ldr	r0, [r7, #8]
 8006570:	f7fe fe72 	bl	8005258 <_SendPacket>
  RECORD_END();
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f383 8811 	msr	BASEPRI, r3
}
 800657a:	bf00      	nop
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	20014420 	.word	0x20014420
 8006588:	e000ed04 	.word	0xe000ed04

0800658c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006592:	f3ef 8311 	mrs	r3, BASEPRI
 8006596:	f04f 0120 	mov.w	r1, #32
 800659a:	f381 8811 	msr	BASEPRI, r1
 800659e:	607b      	str	r3, [r7, #4]
 80065a0:	4807      	ldr	r0, [pc, #28]	; (80065c0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80065a2:	f7fe fd68 	bl	8005076 <_PreparePacket>
 80065a6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80065a8:	2203      	movs	r2, #3
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	6838      	ldr	r0, [r7, #0]
 80065ae:	f7fe fe53 	bl	8005258 <_SendPacket>
  RECORD_END();
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f383 8811 	msr	BASEPRI, r3
}
 80065b8:	bf00      	nop
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	20014420 	.word	0x20014420

080065c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065ca:	f3ef 8311 	mrs	r3, BASEPRI
 80065ce:	f04f 0120 	mov.w	r1, #32
 80065d2:	f381 8811 	msr	BASEPRI, r1
 80065d6:	607b      	str	r3, [r7, #4]
 80065d8:	4807      	ldr	r0, [pc, #28]	; (80065f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80065da:	f7fe fd4c 	bl	8005076 <_PreparePacket>
 80065de:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80065e0:	2212      	movs	r2, #18
 80065e2:	6839      	ldr	r1, [r7, #0]
 80065e4:	6838      	ldr	r0, [r7, #0]
 80065e6:	f7fe fe37 	bl	8005258 <_SendPacket>
  RECORD_END();
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f383 8811 	msr	BASEPRI, r3
}
 80065f0:	bf00      	nop
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	20014420 	.word	0x20014420

080065fc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006602:	f3ef 8311 	mrs	r3, BASEPRI
 8006606:	f04f 0120 	mov.w	r1, #32
 800660a:	f381 8811 	msr	BASEPRI, r1
 800660e:	607b      	str	r3, [r7, #4]
 8006610:	4807      	ldr	r0, [pc, #28]	; (8006630 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006612:	f7fe fd30 	bl	8005076 <_PreparePacket>
 8006616:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006618:	2211      	movs	r2, #17
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6838      	ldr	r0, [r7, #0]
 800661e:	f7fe fe1b 	bl	8005258 <_SendPacket>
  RECORD_END();
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f383 8811 	msr	BASEPRI, r3
}
 8006628:	bf00      	nop
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	20014420 	.word	0x20014420

08006634 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006634:	b580      	push	{r7, lr}
 8006636:	b088      	sub	sp, #32
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800663c:	f3ef 8311 	mrs	r3, BASEPRI
 8006640:	f04f 0120 	mov.w	r1, #32
 8006644:	f381 8811 	msr	BASEPRI, r1
 8006648:	617b      	str	r3, [r7, #20]
 800664a:	4819      	ldr	r0, [pc, #100]	; (80066b0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800664c:	f7fe fd13 	bl	8005076 <_PreparePacket>
 8006650:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006656:	4b17      	ldr	r3, [pc, #92]	; (80066b4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	61fb      	str	r3, [r7, #28]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	61bb      	str	r3, [r7, #24]
 8006668:	e00b      	b.n	8006682 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	b2da      	uxtb	r2, r3
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	1c59      	adds	r1, r3, #1
 8006672:	61f9      	str	r1, [r7, #28]
 8006674:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	701a      	strb	r2, [r3, #0]
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	09db      	lsrs	r3, r3, #7
 8006680:	61bb      	str	r3, [r7, #24]
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	2b7f      	cmp	r3, #127	; 0x7f
 8006686:	d8f0      	bhi.n	800666a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	61fa      	str	r2, [r7, #28]
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	b2d2      	uxtb	r2, r2
 8006692:	701a      	strb	r2, [r3, #0]
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006698:	2208      	movs	r2, #8
 800669a:	68f9      	ldr	r1, [r7, #12]
 800669c:	6938      	ldr	r0, [r7, #16]
 800669e:	f7fe fddb 	bl	8005258 <_SendPacket>
  RECORD_END();
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f383 8811 	msr	BASEPRI, r3
}
 80066a8:	bf00      	nop
 80066aa:	3720      	adds	r7, #32
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	20014420 	.word	0x20014420
 80066b4:	200143f0 	.word	0x200143f0

080066b8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b088      	sub	sp, #32
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066c0:	f3ef 8311 	mrs	r3, BASEPRI
 80066c4:	f04f 0120 	mov.w	r1, #32
 80066c8:	f381 8811 	msr	BASEPRI, r1
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	4819      	ldr	r0, [pc, #100]	; (8006734 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80066d0:	f7fe fcd1 	bl	8005076 <_PreparePacket>
 80066d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80066da:	4b17      	ldr	r3, [pc, #92]	; (8006738 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	61fb      	str	r3, [r7, #28]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	61bb      	str	r3, [r7, #24]
 80066ec:	e00b      	b.n	8006706 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	1c59      	adds	r1, r3, #1
 80066f6:	61f9      	str	r1, [r7, #28]
 80066f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066fc:	b2d2      	uxtb	r2, r2
 80066fe:	701a      	strb	r2, [r3, #0]
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	09db      	lsrs	r3, r3, #7
 8006704:	61bb      	str	r3, [r7, #24]
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	2b7f      	cmp	r3, #127	; 0x7f
 800670a:	d8f0      	bhi.n	80066ee <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	1c5a      	adds	r2, r3, #1
 8006710:	61fa      	str	r2, [r7, #28]
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	b2d2      	uxtb	r2, r2
 8006716:	701a      	strb	r2, [r3, #0]
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800671c:	2204      	movs	r2, #4
 800671e:	68f9      	ldr	r1, [r7, #12]
 8006720:	6938      	ldr	r0, [r7, #16]
 8006722:	f7fe fd99 	bl	8005258 <_SendPacket>
  RECORD_END();
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f383 8811 	msr	BASEPRI, r3
}
 800672c:	bf00      	nop
 800672e:	3720      	adds	r7, #32
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	20014420 	.word	0x20014420
 8006738:	200143f0 	.word	0x200143f0

0800673c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006744:	f3ef 8311 	mrs	r3, BASEPRI
 8006748:	f04f 0120 	mov.w	r1, #32
 800674c:	f381 8811 	msr	BASEPRI, r1
 8006750:	617b      	str	r3, [r7, #20]
 8006752:	4819      	ldr	r0, [pc, #100]	; (80067b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006754:	f7fe fc8f 	bl	8005076 <_PreparePacket>
 8006758:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800675e:	4b17      	ldr	r3, [pc, #92]	; (80067bc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	61fb      	str	r3, [r7, #28]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	61bb      	str	r3, [r7, #24]
 8006770:	e00b      	b.n	800678a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	b2da      	uxtb	r2, r3
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	1c59      	adds	r1, r3, #1
 800677a:	61f9      	str	r1, [r7, #28]
 800677c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006780:	b2d2      	uxtb	r2, r2
 8006782:	701a      	strb	r2, [r3, #0]
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	09db      	lsrs	r3, r3, #7
 8006788:	61bb      	str	r3, [r7, #24]
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	2b7f      	cmp	r3, #127	; 0x7f
 800678e:	d8f0      	bhi.n	8006772 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	61fa      	str	r2, [r7, #28]
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	b2d2      	uxtb	r2, r2
 800679a:	701a      	strb	r2, [r3, #0]
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80067a0:	2206      	movs	r2, #6
 80067a2:	68f9      	ldr	r1, [r7, #12]
 80067a4:	6938      	ldr	r0, [r7, #16]
 80067a6:	f7fe fd57 	bl	8005258 <_SendPacket>
  RECORD_END();
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f383 8811 	msr	BASEPRI, r3
}
 80067b0:	bf00      	nop
 80067b2:	3720      	adds	r7, #32
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	20014420 	.word	0x20014420
 80067bc:	200143f0 	.word	0x200143f0

080067c0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b08a      	sub	sp, #40	; 0x28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80067ca:	f3ef 8311 	mrs	r3, BASEPRI
 80067ce:	f04f 0120 	mov.w	r1, #32
 80067d2:	f381 8811 	msr	BASEPRI, r1
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	4827      	ldr	r0, [pc, #156]	; (8006878 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80067da:	f7fe fc4c 	bl	8005076 <_PreparePacket>
 80067de:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80067e4:	4b25      	ldr	r3, [pc, #148]	; (800687c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	627b      	str	r3, [r7, #36]	; 0x24
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	623b      	str	r3, [r7, #32]
 80067f6:	e00b      	b.n	8006810 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	1c59      	adds	r1, r3, #1
 8006800:	6279      	str	r1, [r7, #36]	; 0x24
 8006802:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	09db      	lsrs	r3, r3, #7
 800680e:	623b      	str	r3, [r7, #32]
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	2b7f      	cmp	r3, #127	; 0x7f
 8006814:	d8f0      	bhi.n	80067f8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	627a      	str	r2, [r7, #36]	; 0x24
 800681c:	6a3a      	ldr	r2, [r7, #32]
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	61fb      	str	r3, [r7, #28]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	61bb      	str	r3, [r7, #24]
 800682e:	e00b      	b.n	8006848 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	b2da      	uxtb	r2, r3
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	1c59      	adds	r1, r3, #1
 8006838:	61f9      	str	r1, [r7, #28]
 800683a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	09db      	lsrs	r3, r3, #7
 8006846:	61bb      	str	r3, [r7, #24]
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2b7f      	cmp	r3, #127	; 0x7f
 800684c:	d8f0      	bhi.n	8006830 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	61fa      	str	r2, [r7, #28]
 8006854:	69ba      	ldr	r2, [r7, #24]
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	701a      	strb	r2, [r3, #0]
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800685e:	2207      	movs	r2, #7
 8006860:	68f9      	ldr	r1, [r7, #12]
 8006862:	6938      	ldr	r0, [r7, #16]
 8006864:	f7fe fcf8 	bl	8005258 <_SendPacket>
  RECORD_END();
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f383 8811 	msr	BASEPRI, r3
}
 800686e:	bf00      	nop
 8006870:	3728      	adds	r7, #40	; 0x28
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20014420 	.word	0x20014420
 800687c:	200143f0 	.word	0x200143f0

08006880 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006888:	4b04      	ldr	r3, [pc, #16]	; (800689c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	1ad3      	subs	r3, r2, r3
}
 8006890:	4618      	mov	r0, r3
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	200143f0 	.word	0x200143f0

080068a0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08c      	sub	sp, #48	; 0x30
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	4603      	mov	r3, r0
 80068a8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80068aa:	4b3b      	ldr	r3, [pc, #236]	; (8006998 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d06d      	beq.n	800698e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80068b2:	4b39      	ldr	r3, [pc, #228]	; (8006998 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80068b8:	2300      	movs	r3, #0
 80068ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80068bc:	e008      	b.n	80068d0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80068c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d007      	beq.n	80068da <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80068ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068cc:	3301      	adds	r3, #1
 80068ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80068d0:	79fb      	ldrb	r3, [r7, #7]
 80068d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d3f2      	bcc.n	80068be <SEGGER_SYSVIEW_SendModule+0x1e>
 80068d8:	e000      	b.n	80068dc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80068da:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80068dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d055      	beq.n	800698e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068e2:	f3ef 8311 	mrs	r3, BASEPRI
 80068e6:	f04f 0120 	mov.w	r1, #32
 80068ea:	f381 8811 	msr	BASEPRI, r1
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	482a      	ldr	r0, [pc, #168]	; (800699c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80068f2:	f7fe fbc0 	bl	8005076 <_PreparePacket>
 80068f6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006900:	79fb      	ldrb	r3, [r7, #7]
 8006902:	623b      	str	r3, [r7, #32]
 8006904:	e00b      	b.n	800691e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	b2da      	uxtb	r2, r3
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	1c59      	adds	r1, r3, #1
 800690e:	6279      	str	r1, [r7, #36]	; 0x24
 8006910:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	701a      	strb	r2, [r3, #0]
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	09db      	lsrs	r3, r3, #7
 800691c:	623b      	str	r3, [r7, #32]
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	2b7f      	cmp	r3, #127	; 0x7f
 8006922:	d8f0      	bhi.n	8006906 <SEGGER_SYSVIEW_SendModule+0x66>
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	627a      	str	r2, [r7, #36]	; 0x24
 800692a:	6a3a      	ldr	r2, [r7, #32]
 800692c:	b2d2      	uxtb	r2, r2
 800692e:	701a      	strb	r2, [r3, #0]
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	61fb      	str	r3, [r7, #28]
 8006938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	61bb      	str	r3, [r7, #24]
 800693e:	e00b      	b.n	8006958 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	b2da      	uxtb	r2, r3
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	1c59      	adds	r1, r3, #1
 8006948:	61f9      	str	r1, [r7, #28]
 800694a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	701a      	strb	r2, [r3, #0]
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	09db      	lsrs	r3, r3, #7
 8006956:	61bb      	str	r3, [r7, #24]
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	2b7f      	cmp	r3, #127	; 0x7f
 800695c:	d8f0      	bhi.n	8006940 <SEGGER_SYSVIEW_SendModule+0xa0>
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	61fa      	str	r2, [r7, #28]
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	b2d2      	uxtb	r2, r2
 8006968:	701a      	strb	r2, [r3, #0]
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800696e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2280      	movs	r2, #128	; 0x80
 8006974:	4619      	mov	r1, r3
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f7fe fb30 	bl	8004fdc <_EncodeStr>
 800697c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800697e:	2216      	movs	r2, #22
 8006980:	68f9      	ldr	r1, [r7, #12]
 8006982:	6938      	ldr	r0, [r7, #16]
 8006984:	f7fe fc68 	bl	8005258 <_SendPacket>
      RECORD_END();
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800698e:	bf00      	nop
 8006990:	3730      	adds	r7, #48	; 0x30
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	20014418 	.word	0x20014418
 800699c:	20014420 	.word	0x20014420

080069a0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80069a6:	4b0c      	ldr	r3, [pc, #48]	; (80069d8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00f      	beq.n	80069ce <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80069ae:	4b0a      	ldr	r3, [pc, #40]	; (80069d8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d002      	beq.n	80069c2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1f2      	bne.n	80069b4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80069ce:	bf00      	nop
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	20014418 	.word	0x20014418

080069dc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80069e2:	f3ef 8311 	mrs	r3, BASEPRI
 80069e6:	f04f 0120 	mov.w	r1, #32
 80069ea:	f381 8811 	msr	BASEPRI, r1
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	4817      	ldr	r0, [pc, #92]	; (8006a50 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80069f2:	f7fe fb40 	bl	8005076 <_PreparePacket>
 80069f6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	4b14      	ldr	r3, [pc, #80]	; (8006a54 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	613b      	str	r3, [r7, #16]
 8006a06:	e00b      	b.n	8006a20 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	1c59      	adds	r1, r3, #1
 8006a10:	6179      	str	r1, [r7, #20]
 8006a12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a16:	b2d2      	uxtb	r2, r2
 8006a18:	701a      	strb	r2, [r3, #0]
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	09db      	lsrs	r3, r3, #7
 8006a1e:	613b      	str	r3, [r7, #16]
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	2b7f      	cmp	r3, #127	; 0x7f
 8006a24:	d8f0      	bhi.n	8006a08 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	617a      	str	r2, [r7, #20]
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	b2d2      	uxtb	r2, r2
 8006a30:	701a      	strb	r2, [r3, #0]
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006a36:	221b      	movs	r2, #27
 8006a38:	6879      	ldr	r1, [r7, #4]
 8006a3a:	68b8      	ldr	r0, [r7, #8]
 8006a3c:	f7fe fc0c 	bl	8005258 <_SendPacket>
  RECORD_END();
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f383 8811 	msr	BASEPRI, r3
}
 8006a46:	bf00      	nop
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	20014420 	.word	0x20014420
 8006a54:	2001441c 	.word	0x2001441c

08006a58 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006a58:	b40f      	push	{r0, r1, r2, r3}
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b082      	sub	sp, #8
 8006a5e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006a60:	f107 0314 	add.w	r3, r7, #20
 8006a64:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006a66:	1d3b      	adds	r3, r7, #4
 8006a68:	461a      	mov	r2, r3
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	6938      	ldr	r0, [r7, #16]
 8006a6e:	f7fe fe7b 	bl	8005768 <_VPrintTarget>
  va_end(ParamList);
}
 8006a72:	bf00      	nop
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a7c:	b004      	add	sp, #16
 8006a7e:	4770      	bx	lr

08006a80 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08a      	sub	sp, #40	; 0x28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a88:	f3ef 8311 	mrs	r3, BASEPRI
 8006a8c:	f04f 0120 	mov.w	r1, #32
 8006a90:	f381 8811 	msr	BASEPRI, r1
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	4827      	ldr	r0, [pc, #156]	; (8006b34 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006a98:	f7fe faed 	bl	8005076 <_PreparePacket>
 8006a9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a9e:	2280      	movs	r2, #128	; 0x80
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	6938      	ldr	r0, [r7, #16]
 8006aa4:	f7fe fa9a 	bl	8004fdc <_EncodeStr>
 8006aa8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
 8006aae:	2301      	movs	r3, #1
 8006ab0:	623b      	str	r3, [r7, #32]
 8006ab2:	e00b      	b.n	8006acc <SEGGER_SYSVIEW_Warn+0x4c>
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	1c59      	adds	r1, r3, #1
 8006abc:	6279      	str	r1, [r7, #36]	; 0x24
 8006abe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ac2:	b2d2      	uxtb	r2, r2
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	09db      	lsrs	r3, r3, #7
 8006aca:	623b      	str	r3, [r7, #32]
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	2b7f      	cmp	r3, #127	; 0x7f
 8006ad0:	d8f0      	bhi.n	8006ab4 <SEGGER_SYSVIEW_Warn+0x34>
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	627a      	str	r2, [r7, #36]	; 0x24
 8006ad8:	6a3a      	ldr	r2, [r7, #32]
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	701a      	strb	r2, [r3, #0]
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	61fb      	str	r3, [r7, #28]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	61bb      	str	r3, [r7, #24]
 8006aea:	e00b      	b.n	8006b04 <SEGGER_SYSVIEW_Warn+0x84>
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	1c59      	adds	r1, r3, #1
 8006af4:	61f9      	str	r1, [r7, #28]
 8006af6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006afa:	b2d2      	uxtb	r2, r2
 8006afc:	701a      	strb	r2, [r3, #0]
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	09db      	lsrs	r3, r3, #7
 8006b02:	61bb      	str	r3, [r7, #24]
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	2b7f      	cmp	r3, #127	; 0x7f
 8006b08:	d8f0      	bhi.n	8006aec <SEGGER_SYSVIEW_Warn+0x6c>
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	1c5a      	adds	r2, r3, #1
 8006b0e:	61fa      	str	r2, [r7, #28]
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	b2d2      	uxtb	r2, r2
 8006b14:	701a      	strb	r2, [r3, #0]
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006b1a:	221a      	movs	r2, #26
 8006b1c:	68f9      	ldr	r1, [r7, #12]
 8006b1e:	6938      	ldr	r0, [r7, #16]
 8006b20:	f7fe fb9a 	bl	8005258 <_SendPacket>
  RECORD_END();
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f383 8811 	msr	BASEPRI, r3
}
 8006b2a:	bf00      	nop
 8006b2c:	3728      	adds	r7, #40	; 0x28
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	20014420 	.word	0x20014420

08006b38 <__libc_init_array>:
 8006b38:	b570      	push	{r4, r5, r6, lr}
 8006b3a:	4d0d      	ldr	r5, [pc, #52]	; (8006b70 <__libc_init_array+0x38>)
 8006b3c:	4c0d      	ldr	r4, [pc, #52]	; (8006b74 <__libc_init_array+0x3c>)
 8006b3e:	1b64      	subs	r4, r4, r5
 8006b40:	10a4      	asrs	r4, r4, #2
 8006b42:	2600      	movs	r6, #0
 8006b44:	42a6      	cmp	r6, r4
 8006b46:	d109      	bne.n	8006b5c <__libc_init_array+0x24>
 8006b48:	4d0b      	ldr	r5, [pc, #44]	; (8006b78 <__libc_init_array+0x40>)
 8006b4a:	4c0c      	ldr	r4, [pc, #48]	; (8006b7c <__libc_init_array+0x44>)
 8006b4c:	f000 fcc0 	bl	80074d0 <_init>
 8006b50:	1b64      	subs	r4, r4, r5
 8006b52:	10a4      	asrs	r4, r4, #2
 8006b54:	2600      	movs	r6, #0
 8006b56:	42a6      	cmp	r6, r4
 8006b58:	d105      	bne.n	8006b66 <__libc_init_array+0x2e>
 8006b5a:	bd70      	pop	{r4, r5, r6, pc}
 8006b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b60:	4798      	blx	r3
 8006b62:	3601      	adds	r6, #1
 8006b64:	e7ee      	b.n	8006b44 <__libc_init_array+0xc>
 8006b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b6a:	4798      	blx	r3
 8006b6c:	3601      	adds	r6, #1
 8006b6e:	e7f2      	b.n	8006b56 <__libc_init_array+0x1e>
 8006b70:	080076a0 	.word	0x080076a0
 8006b74:	080076a0 	.word	0x080076a0
 8006b78:	080076a0 	.word	0x080076a0
 8006b7c:	080076a4 	.word	0x080076a4

08006b80 <memcmp>:
 8006b80:	b510      	push	{r4, lr}
 8006b82:	3901      	subs	r1, #1
 8006b84:	4402      	add	r2, r0
 8006b86:	4290      	cmp	r0, r2
 8006b88:	d101      	bne.n	8006b8e <memcmp+0xe>
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	e005      	b.n	8006b9a <memcmp+0x1a>
 8006b8e:	7803      	ldrb	r3, [r0, #0]
 8006b90:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006b94:	42a3      	cmp	r3, r4
 8006b96:	d001      	beq.n	8006b9c <memcmp+0x1c>
 8006b98:	1b18      	subs	r0, r3, r4
 8006b9a:	bd10      	pop	{r4, pc}
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	e7f2      	b.n	8006b86 <memcmp+0x6>

08006ba0 <memcpy>:
 8006ba0:	440a      	add	r2, r1
 8006ba2:	4291      	cmp	r1, r2
 8006ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ba8:	d100      	bne.n	8006bac <memcpy+0xc>
 8006baa:	4770      	bx	lr
 8006bac:	b510      	push	{r4, lr}
 8006bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bb6:	4291      	cmp	r1, r2
 8006bb8:	d1f9      	bne.n	8006bae <memcpy+0xe>
 8006bba:	bd10      	pop	{r4, pc}

08006bbc <memset>:
 8006bbc:	4402      	add	r2, r0
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d100      	bne.n	8006bc6 <memset+0xa>
 8006bc4:	4770      	bx	lr
 8006bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bca:	e7f9      	b.n	8006bc0 <memset+0x4>

08006bcc <sniprintf>:
 8006bcc:	b40c      	push	{r2, r3}
 8006bce:	b530      	push	{r4, r5, lr}
 8006bd0:	4b17      	ldr	r3, [pc, #92]	; (8006c30 <sniprintf+0x64>)
 8006bd2:	1e0c      	subs	r4, r1, #0
 8006bd4:	681d      	ldr	r5, [r3, #0]
 8006bd6:	b09d      	sub	sp, #116	; 0x74
 8006bd8:	da08      	bge.n	8006bec <sniprintf+0x20>
 8006bda:	238b      	movs	r3, #139	; 0x8b
 8006bdc:	602b      	str	r3, [r5, #0]
 8006bde:	f04f 30ff 	mov.w	r0, #4294967295
 8006be2:	b01d      	add	sp, #116	; 0x74
 8006be4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006be8:	b002      	add	sp, #8
 8006bea:	4770      	bx	lr
 8006bec:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006bf0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006bf4:	bf14      	ite	ne
 8006bf6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006bfa:	4623      	moveq	r3, r4
 8006bfc:	9304      	str	r3, [sp, #16]
 8006bfe:	9307      	str	r3, [sp, #28]
 8006c00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c04:	9002      	str	r0, [sp, #8]
 8006c06:	9006      	str	r0, [sp, #24]
 8006c08:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c0e:	ab21      	add	r3, sp, #132	; 0x84
 8006c10:	a902      	add	r1, sp, #8
 8006c12:	4628      	mov	r0, r5
 8006c14:	9301      	str	r3, [sp, #4]
 8006c16:	f000 f869 	bl	8006cec <_svfiprintf_r>
 8006c1a:	1c43      	adds	r3, r0, #1
 8006c1c:	bfbc      	itt	lt
 8006c1e:	238b      	movlt	r3, #139	; 0x8b
 8006c20:	602b      	strlt	r3, [r5, #0]
 8006c22:	2c00      	cmp	r4, #0
 8006c24:	d0dd      	beq.n	8006be2 <sniprintf+0x16>
 8006c26:	9b02      	ldr	r3, [sp, #8]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	701a      	strb	r2, [r3, #0]
 8006c2c:	e7d9      	b.n	8006be2 <sniprintf+0x16>
 8006c2e:	bf00      	nop
 8006c30:	20000014 	.word	0x20000014

08006c34 <__ssputs_r>:
 8006c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c38:	688e      	ldr	r6, [r1, #8]
 8006c3a:	429e      	cmp	r6, r3
 8006c3c:	4682      	mov	sl, r0
 8006c3e:	460c      	mov	r4, r1
 8006c40:	4690      	mov	r8, r2
 8006c42:	461f      	mov	r7, r3
 8006c44:	d838      	bhi.n	8006cb8 <__ssputs_r+0x84>
 8006c46:	898a      	ldrh	r2, [r1, #12]
 8006c48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c4c:	d032      	beq.n	8006cb4 <__ssputs_r+0x80>
 8006c4e:	6825      	ldr	r5, [r4, #0]
 8006c50:	6909      	ldr	r1, [r1, #16]
 8006c52:	eba5 0901 	sub.w	r9, r5, r1
 8006c56:	6965      	ldr	r5, [r4, #20]
 8006c58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c60:	3301      	adds	r3, #1
 8006c62:	444b      	add	r3, r9
 8006c64:	106d      	asrs	r5, r5, #1
 8006c66:	429d      	cmp	r5, r3
 8006c68:	bf38      	it	cc
 8006c6a:	461d      	movcc	r5, r3
 8006c6c:	0553      	lsls	r3, r2, #21
 8006c6e:	d531      	bpl.n	8006cd4 <__ssputs_r+0xa0>
 8006c70:	4629      	mov	r1, r5
 8006c72:	f000 fb55 	bl	8007320 <_malloc_r>
 8006c76:	4606      	mov	r6, r0
 8006c78:	b950      	cbnz	r0, 8006c90 <__ssputs_r+0x5c>
 8006c7a:	230c      	movs	r3, #12
 8006c7c:	f8ca 3000 	str.w	r3, [sl]
 8006c80:	89a3      	ldrh	r3, [r4, #12]
 8006c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c86:	81a3      	strh	r3, [r4, #12]
 8006c88:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c90:	6921      	ldr	r1, [r4, #16]
 8006c92:	464a      	mov	r2, r9
 8006c94:	f7ff ff84 	bl	8006ba0 <memcpy>
 8006c98:	89a3      	ldrh	r3, [r4, #12]
 8006c9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca2:	81a3      	strh	r3, [r4, #12]
 8006ca4:	6126      	str	r6, [r4, #16]
 8006ca6:	6165      	str	r5, [r4, #20]
 8006ca8:	444e      	add	r6, r9
 8006caa:	eba5 0509 	sub.w	r5, r5, r9
 8006cae:	6026      	str	r6, [r4, #0]
 8006cb0:	60a5      	str	r5, [r4, #8]
 8006cb2:	463e      	mov	r6, r7
 8006cb4:	42be      	cmp	r6, r7
 8006cb6:	d900      	bls.n	8006cba <__ssputs_r+0x86>
 8006cb8:	463e      	mov	r6, r7
 8006cba:	6820      	ldr	r0, [r4, #0]
 8006cbc:	4632      	mov	r2, r6
 8006cbe:	4641      	mov	r1, r8
 8006cc0:	f000 faa8 	bl	8007214 <memmove>
 8006cc4:	68a3      	ldr	r3, [r4, #8]
 8006cc6:	1b9b      	subs	r3, r3, r6
 8006cc8:	60a3      	str	r3, [r4, #8]
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	4433      	add	r3, r6
 8006cce:	6023      	str	r3, [r4, #0]
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	e7db      	b.n	8006c8c <__ssputs_r+0x58>
 8006cd4:	462a      	mov	r2, r5
 8006cd6:	f000 fb97 	bl	8007408 <_realloc_r>
 8006cda:	4606      	mov	r6, r0
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	d1e1      	bne.n	8006ca4 <__ssputs_r+0x70>
 8006ce0:	6921      	ldr	r1, [r4, #16]
 8006ce2:	4650      	mov	r0, sl
 8006ce4:	f000 fab0 	bl	8007248 <_free_r>
 8006ce8:	e7c7      	b.n	8006c7a <__ssputs_r+0x46>
	...

08006cec <_svfiprintf_r>:
 8006cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf0:	4698      	mov	r8, r3
 8006cf2:	898b      	ldrh	r3, [r1, #12]
 8006cf4:	061b      	lsls	r3, r3, #24
 8006cf6:	b09d      	sub	sp, #116	; 0x74
 8006cf8:	4607      	mov	r7, r0
 8006cfa:	460d      	mov	r5, r1
 8006cfc:	4614      	mov	r4, r2
 8006cfe:	d50e      	bpl.n	8006d1e <_svfiprintf_r+0x32>
 8006d00:	690b      	ldr	r3, [r1, #16]
 8006d02:	b963      	cbnz	r3, 8006d1e <_svfiprintf_r+0x32>
 8006d04:	2140      	movs	r1, #64	; 0x40
 8006d06:	f000 fb0b 	bl	8007320 <_malloc_r>
 8006d0a:	6028      	str	r0, [r5, #0]
 8006d0c:	6128      	str	r0, [r5, #16]
 8006d0e:	b920      	cbnz	r0, 8006d1a <_svfiprintf_r+0x2e>
 8006d10:	230c      	movs	r3, #12
 8006d12:	603b      	str	r3, [r7, #0]
 8006d14:	f04f 30ff 	mov.w	r0, #4294967295
 8006d18:	e0d1      	b.n	8006ebe <_svfiprintf_r+0x1d2>
 8006d1a:	2340      	movs	r3, #64	; 0x40
 8006d1c:	616b      	str	r3, [r5, #20]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	9309      	str	r3, [sp, #36]	; 0x24
 8006d22:	2320      	movs	r3, #32
 8006d24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d28:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d2c:	2330      	movs	r3, #48	; 0x30
 8006d2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ed8 <_svfiprintf_r+0x1ec>
 8006d32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d36:	f04f 0901 	mov.w	r9, #1
 8006d3a:	4623      	mov	r3, r4
 8006d3c:	469a      	mov	sl, r3
 8006d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d42:	b10a      	cbz	r2, 8006d48 <_svfiprintf_r+0x5c>
 8006d44:	2a25      	cmp	r2, #37	; 0x25
 8006d46:	d1f9      	bne.n	8006d3c <_svfiprintf_r+0x50>
 8006d48:	ebba 0b04 	subs.w	fp, sl, r4
 8006d4c:	d00b      	beq.n	8006d66 <_svfiprintf_r+0x7a>
 8006d4e:	465b      	mov	r3, fp
 8006d50:	4622      	mov	r2, r4
 8006d52:	4629      	mov	r1, r5
 8006d54:	4638      	mov	r0, r7
 8006d56:	f7ff ff6d 	bl	8006c34 <__ssputs_r>
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	f000 80aa 	beq.w	8006eb4 <_svfiprintf_r+0x1c8>
 8006d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d62:	445a      	add	r2, fp
 8006d64:	9209      	str	r2, [sp, #36]	; 0x24
 8006d66:	f89a 3000 	ldrb.w	r3, [sl]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 80a2 	beq.w	8006eb4 <_svfiprintf_r+0x1c8>
 8006d70:	2300      	movs	r3, #0
 8006d72:	f04f 32ff 	mov.w	r2, #4294967295
 8006d76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d7a:	f10a 0a01 	add.w	sl, sl, #1
 8006d7e:	9304      	str	r3, [sp, #16]
 8006d80:	9307      	str	r3, [sp, #28]
 8006d82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d86:	931a      	str	r3, [sp, #104]	; 0x68
 8006d88:	4654      	mov	r4, sl
 8006d8a:	2205      	movs	r2, #5
 8006d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d90:	4851      	ldr	r0, [pc, #324]	; (8006ed8 <_svfiprintf_r+0x1ec>)
 8006d92:	f7f9 fa6d 	bl	8000270 <memchr>
 8006d96:	9a04      	ldr	r2, [sp, #16]
 8006d98:	b9d8      	cbnz	r0, 8006dd2 <_svfiprintf_r+0xe6>
 8006d9a:	06d0      	lsls	r0, r2, #27
 8006d9c:	bf44      	itt	mi
 8006d9e:	2320      	movmi	r3, #32
 8006da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006da4:	0711      	lsls	r1, r2, #28
 8006da6:	bf44      	itt	mi
 8006da8:	232b      	movmi	r3, #43	; 0x2b
 8006daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dae:	f89a 3000 	ldrb.w	r3, [sl]
 8006db2:	2b2a      	cmp	r3, #42	; 0x2a
 8006db4:	d015      	beq.n	8006de2 <_svfiprintf_r+0xf6>
 8006db6:	9a07      	ldr	r2, [sp, #28]
 8006db8:	4654      	mov	r4, sl
 8006dba:	2000      	movs	r0, #0
 8006dbc:	f04f 0c0a 	mov.w	ip, #10
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dc6:	3b30      	subs	r3, #48	; 0x30
 8006dc8:	2b09      	cmp	r3, #9
 8006dca:	d94e      	bls.n	8006e6a <_svfiprintf_r+0x17e>
 8006dcc:	b1b0      	cbz	r0, 8006dfc <_svfiprintf_r+0x110>
 8006dce:	9207      	str	r2, [sp, #28]
 8006dd0:	e014      	b.n	8006dfc <_svfiprintf_r+0x110>
 8006dd2:	eba0 0308 	sub.w	r3, r0, r8
 8006dd6:	fa09 f303 	lsl.w	r3, r9, r3
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	9304      	str	r3, [sp, #16]
 8006dde:	46a2      	mov	sl, r4
 8006de0:	e7d2      	b.n	8006d88 <_svfiprintf_r+0x9c>
 8006de2:	9b03      	ldr	r3, [sp, #12]
 8006de4:	1d19      	adds	r1, r3, #4
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	9103      	str	r1, [sp, #12]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	bfbb      	ittet	lt
 8006dee:	425b      	neglt	r3, r3
 8006df0:	f042 0202 	orrlt.w	r2, r2, #2
 8006df4:	9307      	strge	r3, [sp, #28]
 8006df6:	9307      	strlt	r3, [sp, #28]
 8006df8:	bfb8      	it	lt
 8006dfa:	9204      	strlt	r2, [sp, #16]
 8006dfc:	7823      	ldrb	r3, [r4, #0]
 8006dfe:	2b2e      	cmp	r3, #46	; 0x2e
 8006e00:	d10c      	bne.n	8006e1c <_svfiprintf_r+0x130>
 8006e02:	7863      	ldrb	r3, [r4, #1]
 8006e04:	2b2a      	cmp	r3, #42	; 0x2a
 8006e06:	d135      	bne.n	8006e74 <_svfiprintf_r+0x188>
 8006e08:	9b03      	ldr	r3, [sp, #12]
 8006e0a:	1d1a      	adds	r2, r3, #4
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	9203      	str	r2, [sp, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	bfb8      	it	lt
 8006e14:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e18:	3402      	adds	r4, #2
 8006e1a:	9305      	str	r3, [sp, #20]
 8006e1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ee8 <_svfiprintf_r+0x1fc>
 8006e20:	7821      	ldrb	r1, [r4, #0]
 8006e22:	2203      	movs	r2, #3
 8006e24:	4650      	mov	r0, sl
 8006e26:	f7f9 fa23 	bl	8000270 <memchr>
 8006e2a:	b140      	cbz	r0, 8006e3e <_svfiprintf_r+0x152>
 8006e2c:	2340      	movs	r3, #64	; 0x40
 8006e2e:	eba0 000a 	sub.w	r0, r0, sl
 8006e32:	fa03 f000 	lsl.w	r0, r3, r0
 8006e36:	9b04      	ldr	r3, [sp, #16]
 8006e38:	4303      	orrs	r3, r0
 8006e3a:	3401      	adds	r4, #1
 8006e3c:	9304      	str	r3, [sp, #16]
 8006e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e42:	4826      	ldr	r0, [pc, #152]	; (8006edc <_svfiprintf_r+0x1f0>)
 8006e44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e48:	2206      	movs	r2, #6
 8006e4a:	f7f9 fa11 	bl	8000270 <memchr>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	d038      	beq.n	8006ec4 <_svfiprintf_r+0x1d8>
 8006e52:	4b23      	ldr	r3, [pc, #140]	; (8006ee0 <_svfiprintf_r+0x1f4>)
 8006e54:	bb1b      	cbnz	r3, 8006e9e <_svfiprintf_r+0x1b2>
 8006e56:	9b03      	ldr	r3, [sp, #12]
 8006e58:	3307      	adds	r3, #7
 8006e5a:	f023 0307 	bic.w	r3, r3, #7
 8006e5e:	3308      	adds	r3, #8
 8006e60:	9303      	str	r3, [sp, #12]
 8006e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e64:	4433      	add	r3, r6
 8006e66:	9309      	str	r3, [sp, #36]	; 0x24
 8006e68:	e767      	b.n	8006d3a <_svfiprintf_r+0x4e>
 8006e6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e6e:	460c      	mov	r4, r1
 8006e70:	2001      	movs	r0, #1
 8006e72:	e7a5      	b.n	8006dc0 <_svfiprintf_r+0xd4>
 8006e74:	2300      	movs	r3, #0
 8006e76:	3401      	adds	r4, #1
 8006e78:	9305      	str	r3, [sp, #20]
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	f04f 0c0a 	mov.w	ip, #10
 8006e80:	4620      	mov	r0, r4
 8006e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e86:	3a30      	subs	r2, #48	; 0x30
 8006e88:	2a09      	cmp	r2, #9
 8006e8a:	d903      	bls.n	8006e94 <_svfiprintf_r+0x1a8>
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d0c5      	beq.n	8006e1c <_svfiprintf_r+0x130>
 8006e90:	9105      	str	r1, [sp, #20]
 8006e92:	e7c3      	b.n	8006e1c <_svfiprintf_r+0x130>
 8006e94:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e98:	4604      	mov	r4, r0
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e7f0      	b.n	8006e80 <_svfiprintf_r+0x194>
 8006e9e:	ab03      	add	r3, sp, #12
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	462a      	mov	r2, r5
 8006ea4:	4b0f      	ldr	r3, [pc, #60]	; (8006ee4 <_svfiprintf_r+0x1f8>)
 8006ea6:	a904      	add	r1, sp, #16
 8006ea8:	4638      	mov	r0, r7
 8006eaa:	f3af 8000 	nop.w
 8006eae:	1c42      	adds	r2, r0, #1
 8006eb0:	4606      	mov	r6, r0
 8006eb2:	d1d6      	bne.n	8006e62 <_svfiprintf_r+0x176>
 8006eb4:	89ab      	ldrh	r3, [r5, #12]
 8006eb6:	065b      	lsls	r3, r3, #25
 8006eb8:	f53f af2c 	bmi.w	8006d14 <_svfiprintf_r+0x28>
 8006ebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ebe:	b01d      	add	sp, #116	; 0x74
 8006ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec4:	ab03      	add	r3, sp, #12
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	462a      	mov	r2, r5
 8006eca:	4b06      	ldr	r3, [pc, #24]	; (8006ee4 <_svfiprintf_r+0x1f8>)
 8006ecc:	a904      	add	r1, sp, #16
 8006ece:	4638      	mov	r0, r7
 8006ed0:	f000 f87a 	bl	8006fc8 <_printf_i>
 8006ed4:	e7eb      	b.n	8006eae <_svfiprintf_r+0x1c2>
 8006ed6:	bf00      	nop
 8006ed8:	0800766c 	.word	0x0800766c
 8006edc:	08007676 	.word	0x08007676
 8006ee0:	00000000 	.word	0x00000000
 8006ee4:	08006c35 	.word	0x08006c35
 8006ee8:	08007672 	.word	0x08007672

08006eec <_printf_common>:
 8006eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef0:	4616      	mov	r6, r2
 8006ef2:	4699      	mov	r9, r3
 8006ef4:	688a      	ldr	r2, [r1, #8]
 8006ef6:	690b      	ldr	r3, [r1, #16]
 8006ef8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006efc:	4293      	cmp	r3, r2
 8006efe:	bfb8      	it	lt
 8006f00:	4613      	movlt	r3, r2
 8006f02:	6033      	str	r3, [r6, #0]
 8006f04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f08:	4607      	mov	r7, r0
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	b10a      	cbz	r2, 8006f12 <_printf_common+0x26>
 8006f0e:	3301      	adds	r3, #1
 8006f10:	6033      	str	r3, [r6, #0]
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	0699      	lsls	r1, r3, #26
 8006f16:	bf42      	ittt	mi
 8006f18:	6833      	ldrmi	r3, [r6, #0]
 8006f1a:	3302      	addmi	r3, #2
 8006f1c:	6033      	strmi	r3, [r6, #0]
 8006f1e:	6825      	ldr	r5, [r4, #0]
 8006f20:	f015 0506 	ands.w	r5, r5, #6
 8006f24:	d106      	bne.n	8006f34 <_printf_common+0x48>
 8006f26:	f104 0a19 	add.w	sl, r4, #25
 8006f2a:	68e3      	ldr	r3, [r4, #12]
 8006f2c:	6832      	ldr	r2, [r6, #0]
 8006f2e:	1a9b      	subs	r3, r3, r2
 8006f30:	42ab      	cmp	r3, r5
 8006f32:	dc26      	bgt.n	8006f82 <_printf_common+0x96>
 8006f34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f38:	1e13      	subs	r3, r2, #0
 8006f3a:	6822      	ldr	r2, [r4, #0]
 8006f3c:	bf18      	it	ne
 8006f3e:	2301      	movne	r3, #1
 8006f40:	0692      	lsls	r2, r2, #26
 8006f42:	d42b      	bmi.n	8006f9c <_printf_common+0xb0>
 8006f44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f48:	4649      	mov	r1, r9
 8006f4a:	4638      	mov	r0, r7
 8006f4c:	47c0      	blx	r8
 8006f4e:	3001      	adds	r0, #1
 8006f50:	d01e      	beq.n	8006f90 <_printf_common+0xa4>
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	68e5      	ldr	r5, [r4, #12]
 8006f56:	6832      	ldr	r2, [r6, #0]
 8006f58:	f003 0306 	and.w	r3, r3, #6
 8006f5c:	2b04      	cmp	r3, #4
 8006f5e:	bf08      	it	eq
 8006f60:	1aad      	subeq	r5, r5, r2
 8006f62:	68a3      	ldr	r3, [r4, #8]
 8006f64:	6922      	ldr	r2, [r4, #16]
 8006f66:	bf0c      	ite	eq
 8006f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f6c:	2500      	movne	r5, #0
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	bfc4      	itt	gt
 8006f72:	1a9b      	subgt	r3, r3, r2
 8006f74:	18ed      	addgt	r5, r5, r3
 8006f76:	2600      	movs	r6, #0
 8006f78:	341a      	adds	r4, #26
 8006f7a:	42b5      	cmp	r5, r6
 8006f7c:	d11a      	bne.n	8006fb4 <_printf_common+0xc8>
 8006f7e:	2000      	movs	r0, #0
 8006f80:	e008      	b.n	8006f94 <_printf_common+0xa8>
 8006f82:	2301      	movs	r3, #1
 8006f84:	4652      	mov	r2, sl
 8006f86:	4649      	mov	r1, r9
 8006f88:	4638      	mov	r0, r7
 8006f8a:	47c0      	blx	r8
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	d103      	bne.n	8006f98 <_printf_common+0xac>
 8006f90:	f04f 30ff 	mov.w	r0, #4294967295
 8006f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f98:	3501      	adds	r5, #1
 8006f9a:	e7c6      	b.n	8006f2a <_printf_common+0x3e>
 8006f9c:	18e1      	adds	r1, r4, r3
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	2030      	movs	r0, #48	; 0x30
 8006fa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fa6:	4422      	add	r2, r4
 8006fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fb0:	3302      	adds	r3, #2
 8006fb2:	e7c7      	b.n	8006f44 <_printf_common+0x58>
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	4622      	mov	r2, r4
 8006fb8:	4649      	mov	r1, r9
 8006fba:	4638      	mov	r0, r7
 8006fbc:	47c0      	blx	r8
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	d0e6      	beq.n	8006f90 <_printf_common+0xa4>
 8006fc2:	3601      	adds	r6, #1
 8006fc4:	e7d9      	b.n	8006f7a <_printf_common+0x8e>
	...

08006fc8 <_printf_i>:
 8006fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fcc:	7e0f      	ldrb	r7, [r1, #24]
 8006fce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fd0:	2f78      	cmp	r7, #120	; 0x78
 8006fd2:	4691      	mov	r9, r2
 8006fd4:	4680      	mov	r8, r0
 8006fd6:	460c      	mov	r4, r1
 8006fd8:	469a      	mov	sl, r3
 8006fda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fde:	d807      	bhi.n	8006ff0 <_printf_i+0x28>
 8006fe0:	2f62      	cmp	r7, #98	; 0x62
 8006fe2:	d80a      	bhi.n	8006ffa <_printf_i+0x32>
 8006fe4:	2f00      	cmp	r7, #0
 8006fe6:	f000 80d8 	beq.w	800719a <_printf_i+0x1d2>
 8006fea:	2f58      	cmp	r7, #88	; 0x58
 8006fec:	f000 80a3 	beq.w	8007136 <_printf_i+0x16e>
 8006ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ff4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ff8:	e03a      	b.n	8007070 <_printf_i+0xa8>
 8006ffa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ffe:	2b15      	cmp	r3, #21
 8007000:	d8f6      	bhi.n	8006ff0 <_printf_i+0x28>
 8007002:	a101      	add	r1, pc, #4	; (adr r1, 8007008 <_printf_i+0x40>)
 8007004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007008:	08007061 	.word	0x08007061
 800700c:	08007075 	.word	0x08007075
 8007010:	08006ff1 	.word	0x08006ff1
 8007014:	08006ff1 	.word	0x08006ff1
 8007018:	08006ff1 	.word	0x08006ff1
 800701c:	08006ff1 	.word	0x08006ff1
 8007020:	08007075 	.word	0x08007075
 8007024:	08006ff1 	.word	0x08006ff1
 8007028:	08006ff1 	.word	0x08006ff1
 800702c:	08006ff1 	.word	0x08006ff1
 8007030:	08006ff1 	.word	0x08006ff1
 8007034:	08007181 	.word	0x08007181
 8007038:	080070a5 	.word	0x080070a5
 800703c:	08007163 	.word	0x08007163
 8007040:	08006ff1 	.word	0x08006ff1
 8007044:	08006ff1 	.word	0x08006ff1
 8007048:	080071a3 	.word	0x080071a3
 800704c:	08006ff1 	.word	0x08006ff1
 8007050:	080070a5 	.word	0x080070a5
 8007054:	08006ff1 	.word	0x08006ff1
 8007058:	08006ff1 	.word	0x08006ff1
 800705c:	0800716b 	.word	0x0800716b
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	1d1a      	adds	r2, r3, #4
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	602a      	str	r2, [r5, #0]
 8007068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800706c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007070:	2301      	movs	r3, #1
 8007072:	e0a3      	b.n	80071bc <_printf_i+0x1f4>
 8007074:	6820      	ldr	r0, [r4, #0]
 8007076:	6829      	ldr	r1, [r5, #0]
 8007078:	0606      	lsls	r6, r0, #24
 800707a:	f101 0304 	add.w	r3, r1, #4
 800707e:	d50a      	bpl.n	8007096 <_printf_i+0xce>
 8007080:	680e      	ldr	r6, [r1, #0]
 8007082:	602b      	str	r3, [r5, #0]
 8007084:	2e00      	cmp	r6, #0
 8007086:	da03      	bge.n	8007090 <_printf_i+0xc8>
 8007088:	232d      	movs	r3, #45	; 0x2d
 800708a:	4276      	negs	r6, r6
 800708c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007090:	485e      	ldr	r0, [pc, #376]	; (800720c <_printf_i+0x244>)
 8007092:	230a      	movs	r3, #10
 8007094:	e019      	b.n	80070ca <_printf_i+0x102>
 8007096:	680e      	ldr	r6, [r1, #0]
 8007098:	602b      	str	r3, [r5, #0]
 800709a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800709e:	bf18      	it	ne
 80070a0:	b236      	sxthne	r6, r6
 80070a2:	e7ef      	b.n	8007084 <_printf_i+0xbc>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	6820      	ldr	r0, [r4, #0]
 80070a8:	1d19      	adds	r1, r3, #4
 80070aa:	6029      	str	r1, [r5, #0]
 80070ac:	0601      	lsls	r1, r0, #24
 80070ae:	d501      	bpl.n	80070b4 <_printf_i+0xec>
 80070b0:	681e      	ldr	r6, [r3, #0]
 80070b2:	e002      	b.n	80070ba <_printf_i+0xf2>
 80070b4:	0646      	lsls	r6, r0, #25
 80070b6:	d5fb      	bpl.n	80070b0 <_printf_i+0xe8>
 80070b8:	881e      	ldrh	r6, [r3, #0]
 80070ba:	4854      	ldr	r0, [pc, #336]	; (800720c <_printf_i+0x244>)
 80070bc:	2f6f      	cmp	r7, #111	; 0x6f
 80070be:	bf0c      	ite	eq
 80070c0:	2308      	moveq	r3, #8
 80070c2:	230a      	movne	r3, #10
 80070c4:	2100      	movs	r1, #0
 80070c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070ca:	6865      	ldr	r5, [r4, #4]
 80070cc:	60a5      	str	r5, [r4, #8]
 80070ce:	2d00      	cmp	r5, #0
 80070d0:	bfa2      	ittt	ge
 80070d2:	6821      	ldrge	r1, [r4, #0]
 80070d4:	f021 0104 	bicge.w	r1, r1, #4
 80070d8:	6021      	strge	r1, [r4, #0]
 80070da:	b90e      	cbnz	r6, 80070e0 <_printf_i+0x118>
 80070dc:	2d00      	cmp	r5, #0
 80070de:	d04d      	beq.n	800717c <_printf_i+0x1b4>
 80070e0:	4615      	mov	r5, r2
 80070e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80070e6:	fb03 6711 	mls	r7, r3, r1, r6
 80070ea:	5dc7      	ldrb	r7, [r0, r7]
 80070ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070f0:	4637      	mov	r7, r6
 80070f2:	42bb      	cmp	r3, r7
 80070f4:	460e      	mov	r6, r1
 80070f6:	d9f4      	bls.n	80070e2 <_printf_i+0x11a>
 80070f8:	2b08      	cmp	r3, #8
 80070fa:	d10b      	bne.n	8007114 <_printf_i+0x14c>
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	07de      	lsls	r6, r3, #31
 8007100:	d508      	bpl.n	8007114 <_printf_i+0x14c>
 8007102:	6923      	ldr	r3, [r4, #16]
 8007104:	6861      	ldr	r1, [r4, #4]
 8007106:	4299      	cmp	r1, r3
 8007108:	bfde      	ittt	le
 800710a:	2330      	movle	r3, #48	; 0x30
 800710c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007110:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007114:	1b52      	subs	r2, r2, r5
 8007116:	6122      	str	r2, [r4, #16]
 8007118:	f8cd a000 	str.w	sl, [sp]
 800711c:	464b      	mov	r3, r9
 800711e:	aa03      	add	r2, sp, #12
 8007120:	4621      	mov	r1, r4
 8007122:	4640      	mov	r0, r8
 8007124:	f7ff fee2 	bl	8006eec <_printf_common>
 8007128:	3001      	adds	r0, #1
 800712a:	d14c      	bne.n	80071c6 <_printf_i+0x1fe>
 800712c:	f04f 30ff 	mov.w	r0, #4294967295
 8007130:	b004      	add	sp, #16
 8007132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007136:	4835      	ldr	r0, [pc, #212]	; (800720c <_printf_i+0x244>)
 8007138:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800713c:	6829      	ldr	r1, [r5, #0]
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	f851 6b04 	ldr.w	r6, [r1], #4
 8007144:	6029      	str	r1, [r5, #0]
 8007146:	061d      	lsls	r5, r3, #24
 8007148:	d514      	bpl.n	8007174 <_printf_i+0x1ac>
 800714a:	07df      	lsls	r7, r3, #31
 800714c:	bf44      	itt	mi
 800714e:	f043 0320 	orrmi.w	r3, r3, #32
 8007152:	6023      	strmi	r3, [r4, #0]
 8007154:	b91e      	cbnz	r6, 800715e <_printf_i+0x196>
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	f023 0320 	bic.w	r3, r3, #32
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	2310      	movs	r3, #16
 8007160:	e7b0      	b.n	80070c4 <_printf_i+0xfc>
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	f043 0320 	orr.w	r3, r3, #32
 8007168:	6023      	str	r3, [r4, #0]
 800716a:	2378      	movs	r3, #120	; 0x78
 800716c:	4828      	ldr	r0, [pc, #160]	; (8007210 <_printf_i+0x248>)
 800716e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007172:	e7e3      	b.n	800713c <_printf_i+0x174>
 8007174:	0659      	lsls	r1, r3, #25
 8007176:	bf48      	it	mi
 8007178:	b2b6      	uxthmi	r6, r6
 800717a:	e7e6      	b.n	800714a <_printf_i+0x182>
 800717c:	4615      	mov	r5, r2
 800717e:	e7bb      	b.n	80070f8 <_printf_i+0x130>
 8007180:	682b      	ldr	r3, [r5, #0]
 8007182:	6826      	ldr	r6, [r4, #0]
 8007184:	6961      	ldr	r1, [r4, #20]
 8007186:	1d18      	adds	r0, r3, #4
 8007188:	6028      	str	r0, [r5, #0]
 800718a:	0635      	lsls	r5, r6, #24
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	d501      	bpl.n	8007194 <_printf_i+0x1cc>
 8007190:	6019      	str	r1, [r3, #0]
 8007192:	e002      	b.n	800719a <_printf_i+0x1d2>
 8007194:	0670      	lsls	r0, r6, #25
 8007196:	d5fb      	bpl.n	8007190 <_printf_i+0x1c8>
 8007198:	8019      	strh	r1, [r3, #0]
 800719a:	2300      	movs	r3, #0
 800719c:	6123      	str	r3, [r4, #16]
 800719e:	4615      	mov	r5, r2
 80071a0:	e7ba      	b.n	8007118 <_printf_i+0x150>
 80071a2:	682b      	ldr	r3, [r5, #0]
 80071a4:	1d1a      	adds	r2, r3, #4
 80071a6:	602a      	str	r2, [r5, #0]
 80071a8:	681d      	ldr	r5, [r3, #0]
 80071aa:	6862      	ldr	r2, [r4, #4]
 80071ac:	2100      	movs	r1, #0
 80071ae:	4628      	mov	r0, r5
 80071b0:	f7f9 f85e 	bl	8000270 <memchr>
 80071b4:	b108      	cbz	r0, 80071ba <_printf_i+0x1f2>
 80071b6:	1b40      	subs	r0, r0, r5
 80071b8:	6060      	str	r0, [r4, #4]
 80071ba:	6863      	ldr	r3, [r4, #4]
 80071bc:	6123      	str	r3, [r4, #16]
 80071be:	2300      	movs	r3, #0
 80071c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071c4:	e7a8      	b.n	8007118 <_printf_i+0x150>
 80071c6:	6923      	ldr	r3, [r4, #16]
 80071c8:	462a      	mov	r2, r5
 80071ca:	4649      	mov	r1, r9
 80071cc:	4640      	mov	r0, r8
 80071ce:	47d0      	blx	sl
 80071d0:	3001      	adds	r0, #1
 80071d2:	d0ab      	beq.n	800712c <_printf_i+0x164>
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	079b      	lsls	r3, r3, #30
 80071d8:	d413      	bmi.n	8007202 <_printf_i+0x23a>
 80071da:	68e0      	ldr	r0, [r4, #12]
 80071dc:	9b03      	ldr	r3, [sp, #12]
 80071de:	4298      	cmp	r0, r3
 80071e0:	bfb8      	it	lt
 80071e2:	4618      	movlt	r0, r3
 80071e4:	e7a4      	b.n	8007130 <_printf_i+0x168>
 80071e6:	2301      	movs	r3, #1
 80071e8:	4632      	mov	r2, r6
 80071ea:	4649      	mov	r1, r9
 80071ec:	4640      	mov	r0, r8
 80071ee:	47d0      	blx	sl
 80071f0:	3001      	adds	r0, #1
 80071f2:	d09b      	beq.n	800712c <_printf_i+0x164>
 80071f4:	3501      	adds	r5, #1
 80071f6:	68e3      	ldr	r3, [r4, #12]
 80071f8:	9903      	ldr	r1, [sp, #12]
 80071fa:	1a5b      	subs	r3, r3, r1
 80071fc:	42ab      	cmp	r3, r5
 80071fe:	dcf2      	bgt.n	80071e6 <_printf_i+0x21e>
 8007200:	e7eb      	b.n	80071da <_printf_i+0x212>
 8007202:	2500      	movs	r5, #0
 8007204:	f104 0619 	add.w	r6, r4, #25
 8007208:	e7f5      	b.n	80071f6 <_printf_i+0x22e>
 800720a:	bf00      	nop
 800720c:	0800767d 	.word	0x0800767d
 8007210:	0800768e 	.word	0x0800768e

08007214 <memmove>:
 8007214:	4288      	cmp	r0, r1
 8007216:	b510      	push	{r4, lr}
 8007218:	eb01 0402 	add.w	r4, r1, r2
 800721c:	d902      	bls.n	8007224 <memmove+0x10>
 800721e:	4284      	cmp	r4, r0
 8007220:	4623      	mov	r3, r4
 8007222:	d807      	bhi.n	8007234 <memmove+0x20>
 8007224:	1e43      	subs	r3, r0, #1
 8007226:	42a1      	cmp	r1, r4
 8007228:	d008      	beq.n	800723c <memmove+0x28>
 800722a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800722e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007232:	e7f8      	b.n	8007226 <memmove+0x12>
 8007234:	4402      	add	r2, r0
 8007236:	4601      	mov	r1, r0
 8007238:	428a      	cmp	r2, r1
 800723a:	d100      	bne.n	800723e <memmove+0x2a>
 800723c:	bd10      	pop	{r4, pc}
 800723e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007242:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007246:	e7f7      	b.n	8007238 <memmove+0x24>

08007248 <_free_r>:
 8007248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800724a:	2900      	cmp	r1, #0
 800724c:	d044      	beq.n	80072d8 <_free_r+0x90>
 800724e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007252:	9001      	str	r0, [sp, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f1a1 0404 	sub.w	r4, r1, #4
 800725a:	bfb8      	it	lt
 800725c:	18e4      	addlt	r4, r4, r3
 800725e:	f000 f913 	bl	8007488 <__malloc_lock>
 8007262:	4a1e      	ldr	r2, [pc, #120]	; (80072dc <_free_r+0x94>)
 8007264:	9801      	ldr	r0, [sp, #4]
 8007266:	6813      	ldr	r3, [r2, #0]
 8007268:	b933      	cbnz	r3, 8007278 <_free_r+0x30>
 800726a:	6063      	str	r3, [r4, #4]
 800726c:	6014      	str	r4, [r2, #0]
 800726e:	b003      	add	sp, #12
 8007270:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007274:	f000 b90e 	b.w	8007494 <__malloc_unlock>
 8007278:	42a3      	cmp	r3, r4
 800727a:	d908      	bls.n	800728e <_free_r+0x46>
 800727c:	6825      	ldr	r5, [r4, #0]
 800727e:	1961      	adds	r1, r4, r5
 8007280:	428b      	cmp	r3, r1
 8007282:	bf01      	itttt	eq
 8007284:	6819      	ldreq	r1, [r3, #0]
 8007286:	685b      	ldreq	r3, [r3, #4]
 8007288:	1949      	addeq	r1, r1, r5
 800728a:	6021      	streq	r1, [r4, #0]
 800728c:	e7ed      	b.n	800726a <_free_r+0x22>
 800728e:	461a      	mov	r2, r3
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	b10b      	cbz	r3, 8007298 <_free_r+0x50>
 8007294:	42a3      	cmp	r3, r4
 8007296:	d9fa      	bls.n	800728e <_free_r+0x46>
 8007298:	6811      	ldr	r1, [r2, #0]
 800729a:	1855      	adds	r5, r2, r1
 800729c:	42a5      	cmp	r5, r4
 800729e:	d10b      	bne.n	80072b8 <_free_r+0x70>
 80072a0:	6824      	ldr	r4, [r4, #0]
 80072a2:	4421      	add	r1, r4
 80072a4:	1854      	adds	r4, r2, r1
 80072a6:	42a3      	cmp	r3, r4
 80072a8:	6011      	str	r1, [r2, #0]
 80072aa:	d1e0      	bne.n	800726e <_free_r+0x26>
 80072ac:	681c      	ldr	r4, [r3, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	6053      	str	r3, [r2, #4]
 80072b2:	4421      	add	r1, r4
 80072b4:	6011      	str	r1, [r2, #0]
 80072b6:	e7da      	b.n	800726e <_free_r+0x26>
 80072b8:	d902      	bls.n	80072c0 <_free_r+0x78>
 80072ba:	230c      	movs	r3, #12
 80072bc:	6003      	str	r3, [r0, #0]
 80072be:	e7d6      	b.n	800726e <_free_r+0x26>
 80072c0:	6825      	ldr	r5, [r4, #0]
 80072c2:	1961      	adds	r1, r4, r5
 80072c4:	428b      	cmp	r3, r1
 80072c6:	bf04      	itt	eq
 80072c8:	6819      	ldreq	r1, [r3, #0]
 80072ca:	685b      	ldreq	r3, [r3, #4]
 80072cc:	6063      	str	r3, [r4, #4]
 80072ce:	bf04      	itt	eq
 80072d0:	1949      	addeq	r1, r1, r5
 80072d2:	6021      	streq	r1, [r4, #0]
 80072d4:	6054      	str	r4, [r2, #4]
 80072d6:	e7ca      	b.n	800726e <_free_r+0x26>
 80072d8:	b003      	add	sp, #12
 80072da:	bd30      	pop	{r4, r5, pc}
 80072dc:	20014504 	.word	0x20014504

080072e0 <sbrk_aligned>:
 80072e0:	b570      	push	{r4, r5, r6, lr}
 80072e2:	4e0e      	ldr	r6, [pc, #56]	; (800731c <sbrk_aligned+0x3c>)
 80072e4:	460c      	mov	r4, r1
 80072e6:	6831      	ldr	r1, [r6, #0]
 80072e8:	4605      	mov	r5, r0
 80072ea:	b911      	cbnz	r1, 80072f2 <sbrk_aligned+0x12>
 80072ec:	f000 f8bc 	bl	8007468 <_sbrk_r>
 80072f0:	6030      	str	r0, [r6, #0]
 80072f2:	4621      	mov	r1, r4
 80072f4:	4628      	mov	r0, r5
 80072f6:	f000 f8b7 	bl	8007468 <_sbrk_r>
 80072fa:	1c43      	adds	r3, r0, #1
 80072fc:	d00a      	beq.n	8007314 <sbrk_aligned+0x34>
 80072fe:	1cc4      	adds	r4, r0, #3
 8007300:	f024 0403 	bic.w	r4, r4, #3
 8007304:	42a0      	cmp	r0, r4
 8007306:	d007      	beq.n	8007318 <sbrk_aligned+0x38>
 8007308:	1a21      	subs	r1, r4, r0
 800730a:	4628      	mov	r0, r5
 800730c:	f000 f8ac 	bl	8007468 <_sbrk_r>
 8007310:	3001      	adds	r0, #1
 8007312:	d101      	bne.n	8007318 <sbrk_aligned+0x38>
 8007314:	f04f 34ff 	mov.w	r4, #4294967295
 8007318:	4620      	mov	r0, r4
 800731a:	bd70      	pop	{r4, r5, r6, pc}
 800731c:	20014508 	.word	0x20014508

08007320 <_malloc_r>:
 8007320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007324:	1ccd      	adds	r5, r1, #3
 8007326:	f025 0503 	bic.w	r5, r5, #3
 800732a:	3508      	adds	r5, #8
 800732c:	2d0c      	cmp	r5, #12
 800732e:	bf38      	it	cc
 8007330:	250c      	movcc	r5, #12
 8007332:	2d00      	cmp	r5, #0
 8007334:	4607      	mov	r7, r0
 8007336:	db01      	blt.n	800733c <_malloc_r+0x1c>
 8007338:	42a9      	cmp	r1, r5
 800733a:	d905      	bls.n	8007348 <_malloc_r+0x28>
 800733c:	230c      	movs	r3, #12
 800733e:	603b      	str	r3, [r7, #0]
 8007340:	2600      	movs	r6, #0
 8007342:	4630      	mov	r0, r6
 8007344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007348:	4e2e      	ldr	r6, [pc, #184]	; (8007404 <_malloc_r+0xe4>)
 800734a:	f000 f89d 	bl	8007488 <__malloc_lock>
 800734e:	6833      	ldr	r3, [r6, #0]
 8007350:	461c      	mov	r4, r3
 8007352:	bb34      	cbnz	r4, 80073a2 <_malloc_r+0x82>
 8007354:	4629      	mov	r1, r5
 8007356:	4638      	mov	r0, r7
 8007358:	f7ff ffc2 	bl	80072e0 <sbrk_aligned>
 800735c:	1c43      	adds	r3, r0, #1
 800735e:	4604      	mov	r4, r0
 8007360:	d14d      	bne.n	80073fe <_malloc_r+0xde>
 8007362:	6834      	ldr	r4, [r6, #0]
 8007364:	4626      	mov	r6, r4
 8007366:	2e00      	cmp	r6, #0
 8007368:	d140      	bne.n	80073ec <_malloc_r+0xcc>
 800736a:	6823      	ldr	r3, [r4, #0]
 800736c:	4631      	mov	r1, r6
 800736e:	4638      	mov	r0, r7
 8007370:	eb04 0803 	add.w	r8, r4, r3
 8007374:	f000 f878 	bl	8007468 <_sbrk_r>
 8007378:	4580      	cmp	r8, r0
 800737a:	d13a      	bne.n	80073f2 <_malloc_r+0xd2>
 800737c:	6821      	ldr	r1, [r4, #0]
 800737e:	3503      	adds	r5, #3
 8007380:	1a6d      	subs	r5, r5, r1
 8007382:	f025 0503 	bic.w	r5, r5, #3
 8007386:	3508      	adds	r5, #8
 8007388:	2d0c      	cmp	r5, #12
 800738a:	bf38      	it	cc
 800738c:	250c      	movcc	r5, #12
 800738e:	4629      	mov	r1, r5
 8007390:	4638      	mov	r0, r7
 8007392:	f7ff ffa5 	bl	80072e0 <sbrk_aligned>
 8007396:	3001      	adds	r0, #1
 8007398:	d02b      	beq.n	80073f2 <_malloc_r+0xd2>
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	442b      	add	r3, r5
 800739e:	6023      	str	r3, [r4, #0]
 80073a0:	e00e      	b.n	80073c0 <_malloc_r+0xa0>
 80073a2:	6822      	ldr	r2, [r4, #0]
 80073a4:	1b52      	subs	r2, r2, r5
 80073a6:	d41e      	bmi.n	80073e6 <_malloc_r+0xc6>
 80073a8:	2a0b      	cmp	r2, #11
 80073aa:	d916      	bls.n	80073da <_malloc_r+0xba>
 80073ac:	1961      	adds	r1, r4, r5
 80073ae:	42a3      	cmp	r3, r4
 80073b0:	6025      	str	r5, [r4, #0]
 80073b2:	bf18      	it	ne
 80073b4:	6059      	strne	r1, [r3, #4]
 80073b6:	6863      	ldr	r3, [r4, #4]
 80073b8:	bf08      	it	eq
 80073ba:	6031      	streq	r1, [r6, #0]
 80073bc:	5162      	str	r2, [r4, r5]
 80073be:	604b      	str	r3, [r1, #4]
 80073c0:	4638      	mov	r0, r7
 80073c2:	f104 060b 	add.w	r6, r4, #11
 80073c6:	f000 f865 	bl	8007494 <__malloc_unlock>
 80073ca:	f026 0607 	bic.w	r6, r6, #7
 80073ce:	1d23      	adds	r3, r4, #4
 80073d0:	1af2      	subs	r2, r6, r3
 80073d2:	d0b6      	beq.n	8007342 <_malloc_r+0x22>
 80073d4:	1b9b      	subs	r3, r3, r6
 80073d6:	50a3      	str	r3, [r4, r2]
 80073d8:	e7b3      	b.n	8007342 <_malloc_r+0x22>
 80073da:	6862      	ldr	r2, [r4, #4]
 80073dc:	42a3      	cmp	r3, r4
 80073de:	bf0c      	ite	eq
 80073e0:	6032      	streq	r2, [r6, #0]
 80073e2:	605a      	strne	r2, [r3, #4]
 80073e4:	e7ec      	b.n	80073c0 <_malloc_r+0xa0>
 80073e6:	4623      	mov	r3, r4
 80073e8:	6864      	ldr	r4, [r4, #4]
 80073ea:	e7b2      	b.n	8007352 <_malloc_r+0x32>
 80073ec:	4634      	mov	r4, r6
 80073ee:	6876      	ldr	r6, [r6, #4]
 80073f0:	e7b9      	b.n	8007366 <_malloc_r+0x46>
 80073f2:	230c      	movs	r3, #12
 80073f4:	603b      	str	r3, [r7, #0]
 80073f6:	4638      	mov	r0, r7
 80073f8:	f000 f84c 	bl	8007494 <__malloc_unlock>
 80073fc:	e7a1      	b.n	8007342 <_malloc_r+0x22>
 80073fe:	6025      	str	r5, [r4, #0]
 8007400:	e7de      	b.n	80073c0 <_malloc_r+0xa0>
 8007402:	bf00      	nop
 8007404:	20014504 	.word	0x20014504

08007408 <_realloc_r>:
 8007408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800740c:	4680      	mov	r8, r0
 800740e:	4614      	mov	r4, r2
 8007410:	460e      	mov	r6, r1
 8007412:	b921      	cbnz	r1, 800741e <_realloc_r+0x16>
 8007414:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007418:	4611      	mov	r1, r2
 800741a:	f7ff bf81 	b.w	8007320 <_malloc_r>
 800741e:	b92a      	cbnz	r2, 800742c <_realloc_r+0x24>
 8007420:	f7ff ff12 	bl	8007248 <_free_r>
 8007424:	4625      	mov	r5, r4
 8007426:	4628      	mov	r0, r5
 8007428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800742c:	f000 f838 	bl	80074a0 <_malloc_usable_size_r>
 8007430:	4284      	cmp	r4, r0
 8007432:	4607      	mov	r7, r0
 8007434:	d802      	bhi.n	800743c <_realloc_r+0x34>
 8007436:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800743a:	d812      	bhi.n	8007462 <_realloc_r+0x5a>
 800743c:	4621      	mov	r1, r4
 800743e:	4640      	mov	r0, r8
 8007440:	f7ff ff6e 	bl	8007320 <_malloc_r>
 8007444:	4605      	mov	r5, r0
 8007446:	2800      	cmp	r0, #0
 8007448:	d0ed      	beq.n	8007426 <_realloc_r+0x1e>
 800744a:	42bc      	cmp	r4, r7
 800744c:	4622      	mov	r2, r4
 800744e:	4631      	mov	r1, r6
 8007450:	bf28      	it	cs
 8007452:	463a      	movcs	r2, r7
 8007454:	f7ff fba4 	bl	8006ba0 <memcpy>
 8007458:	4631      	mov	r1, r6
 800745a:	4640      	mov	r0, r8
 800745c:	f7ff fef4 	bl	8007248 <_free_r>
 8007460:	e7e1      	b.n	8007426 <_realloc_r+0x1e>
 8007462:	4635      	mov	r5, r6
 8007464:	e7df      	b.n	8007426 <_realloc_r+0x1e>
	...

08007468 <_sbrk_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	4d06      	ldr	r5, [pc, #24]	; (8007484 <_sbrk_r+0x1c>)
 800746c:	2300      	movs	r3, #0
 800746e:	4604      	mov	r4, r0
 8007470:	4608      	mov	r0, r1
 8007472:	602b      	str	r3, [r5, #0]
 8007474:	f000 f81e 	bl	80074b4 <_sbrk>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d102      	bne.n	8007482 <_sbrk_r+0x1a>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	b103      	cbz	r3, 8007482 <_sbrk_r+0x1a>
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	2001450c 	.word	0x2001450c

08007488 <__malloc_lock>:
 8007488:	4801      	ldr	r0, [pc, #4]	; (8007490 <__malloc_lock+0x8>)
 800748a:	f000 b811 	b.w	80074b0 <__retarget_lock_acquire_recursive>
 800748e:	bf00      	nop
 8007490:	20014510 	.word	0x20014510

08007494 <__malloc_unlock>:
 8007494:	4801      	ldr	r0, [pc, #4]	; (800749c <__malloc_unlock+0x8>)
 8007496:	f000 b80c 	b.w	80074b2 <__retarget_lock_release_recursive>
 800749a:	bf00      	nop
 800749c:	20014510 	.word	0x20014510

080074a0 <_malloc_usable_size_r>:
 80074a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074a4:	1f18      	subs	r0, r3, #4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	bfbc      	itt	lt
 80074aa:	580b      	ldrlt	r3, [r1, r0]
 80074ac:	18c0      	addlt	r0, r0, r3
 80074ae:	4770      	bx	lr

080074b0 <__retarget_lock_acquire_recursive>:
 80074b0:	4770      	bx	lr

080074b2 <__retarget_lock_release_recursive>:
 80074b2:	4770      	bx	lr

080074b4 <_sbrk>:
 80074b4:	4a04      	ldr	r2, [pc, #16]	; (80074c8 <_sbrk+0x14>)
 80074b6:	6811      	ldr	r1, [r2, #0]
 80074b8:	4603      	mov	r3, r0
 80074ba:	b909      	cbnz	r1, 80074c0 <_sbrk+0xc>
 80074bc:	4903      	ldr	r1, [pc, #12]	; (80074cc <_sbrk+0x18>)
 80074be:	6011      	str	r1, [r2, #0]
 80074c0:	6810      	ldr	r0, [r2, #0]
 80074c2:	4403      	add	r3, r0
 80074c4:	6013      	str	r3, [r2, #0]
 80074c6:	4770      	bx	lr
 80074c8:	20014514 	.word	0x20014514
 80074cc:	20014518 	.word	0x20014518

080074d0 <_init>:
 80074d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d2:	bf00      	nop
 80074d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074d6:	bc08      	pop	{r3}
 80074d8:	469e      	mov	lr, r3
 80074da:	4770      	bx	lr

080074dc <_fini>:
 80074dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074de:	bf00      	nop
 80074e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074e2:	bc08      	pop	{r3}
 80074e4:	469e      	mov	lr, r3
 80074e6:	4770      	bx	lr
